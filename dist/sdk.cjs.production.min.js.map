{"version":3,"file":"sdk.cjs.production.min.js","sources":["../src/constants.ts","../src/errors.ts","../src/utils.ts","../src/entities/currency.ts","../src/entities/token.ts","../src/entities/fractions/fraction.ts","../src/entities/fractions/currencyAmount.ts","../src/entities/fractions/tokenAmount.ts","../src/entities/fractions/price.ts","../src/entities/pair.ts","../src/entities/route.ts","../src/entities/fractions/percent.ts","../src/entities/trade.ts","../src/router.ts","../src/fetcher.ts"],"sourcesContent":["import JSBI from 'jsbi'\r\n\r\n// exports for external consumption\r\nexport type BigintIsh = JSBI | bigint | string\r\n\r\nexport enum ChainId {\r\n  MAINNET = 56,\r\n  TESTNET = 59140,\r\n}\r\n\r\nexport enum TradeType {\r\n  EXACT_INPUT,\r\n  EXACT_OUTPUT\r\n}\r\n\r\nexport enum Rounding {\r\n  ROUND_DOWN,\r\n  ROUND_HALF_UP,\r\n  ROUND_UP\r\n}\r\n\r\nexport const FACTORY_ADDRESS = '0xfCCe87c5Ba2c5f694FE0FF8a4940599eC3845a9A'\r\n\r\nexport const INIT_CODE_HASH = '0x8c68ab9748161cdbebb8187e2149f5064d7587a257d3a40011f2dc7345c31e85'\r\n\r\nexport const MINIMUM_LIQUIDITY = JSBI.BigInt(1000)\r\n\r\n// exports for internal consumption\r\nexport const ZERO = JSBI.BigInt(0)\r\nexport const ONE = JSBI.BigInt(1)\r\nexport const TWO = JSBI.BigInt(2)\r\nexport const THREE = JSBI.BigInt(3)\r\nexport const FIVE = JSBI.BigInt(5)\r\nexport const TEN = JSBI.BigInt(10)\r\nexport const _100 = JSBI.BigInt(100)\r\nexport const FEES_NUMERATOR = JSBI.BigInt(9975)\r\nexport const FEES_DENOMINATOR = JSBI.BigInt(10000)\r\n\r\nexport enum SolidityType {\r\n  uint8 = 'uint8',\r\n  uint256 = 'uint256'\r\n}\r\n\r\nexport const SOLIDITY_TYPE_MAXIMA = {\r\n  [SolidityType.uint8]: JSBI.BigInt('0xff'),\r\n  [SolidityType.uint256]: JSBI.BigInt('0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff')\r\n}\r\n","// see https://stackoverflow.com/a/41102306\r\nconst CAN_SET_PROTOTYPE = 'setPrototypeOf' in Object\r\n\r\n/**\r\n * Indicates that the pair has insufficient reserves for a desired output amount. I.e. the amount of output cannot be\r\n * obtained by sending any amount of input.\r\n */\r\nexport class InsufficientReservesError extends Error {\r\n  public readonly isInsufficientReservesError: true = true\r\n\r\n  public constructor() {\r\n    super()\r\n    this.name = this.constructor.name\r\n    if (CAN_SET_PROTOTYPE) Object.setPrototypeOf(this, new.target.prototype)\r\n  }\r\n}\r\n\r\n/**\r\n * Indicates that the input amount is too small to produce any amount of output. I.e. the amount of input sent is less\r\n * than the price of a single unit of output after fees.\r\n */\r\nexport class InsufficientInputAmountError extends Error {\r\n  public readonly isInsufficientInputAmountError: true = true\r\n\r\n  public constructor() {\r\n    super()\r\n    this.name = this.constructor.name\r\n    if (CAN_SET_PROTOTYPE) Object.setPrototypeOf(this, new.target.prototype)\r\n  }\r\n}\r\n","import invariant from 'tiny-invariant'\r\nimport warning from 'tiny-warning'\r\nimport JSBI from 'jsbi'\r\nimport { getAddress } from '@ethersproject/address'\r\n\r\nimport { BigintIsh, ZERO, ONE, TWO, THREE, SolidityType, SOLIDITY_TYPE_MAXIMA } from './constants'\r\n\r\nexport function validateSolidityTypeInstance(value: JSBI, solidityType: SolidityType): void {\r\n  invariant(JSBI.greaterThanOrEqual(value, ZERO), `${value} is not a ${solidityType}.`)\r\n  invariant(JSBI.lessThanOrEqual(value, SOLIDITY_TYPE_MAXIMA[solidityType]), `${value} is not a ${solidityType}.`)\r\n}\r\n\r\n// warns if addresses are not checksummed\r\nexport function validateAndParseAddress(address: string): string {\r\n  try {\r\n    const checksummedAddress = getAddress(address)\r\n    warning(address === checksummedAddress, `${address} is not checksummed.`)\r\n    return checksummedAddress\r\n  } catch (error) {\r\n    invariant(false, `${address} is not a valid address.`)\r\n  }\r\n}\r\n\r\nexport function parseBigintIsh(bigintIsh: BigintIsh): JSBI {\r\n  return bigintIsh instanceof JSBI\r\n    ? bigintIsh\r\n    : typeof bigintIsh === 'bigint'\r\n    ? JSBI.BigInt(bigintIsh.toString())\r\n    : JSBI.BigInt(bigintIsh)\r\n}\r\n\r\n// mock the on-chain sqrt function\r\nexport function sqrt(y: JSBI): JSBI {\r\n  validateSolidityTypeInstance(y, SolidityType.uint256)\r\n  let z: JSBI = ZERO\r\n  let x: JSBI\r\n  if (JSBI.greaterThan(y, THREE)) {\r\n    z = y\r\n    x = JSBI.add(JSBI.divide(y, TWO), ONE)\r\n    while (JSBI.lessThan(x, z)) {\r\n      z = x\r\n      x = JSBI.divide(JSBI.add(JSBI.divide(y, x), x), TWO)\r\n    }\r\n  } else if (JSBI.notEqual(y, ZERO)) {\r\n    z = ONE\r\n  }\r\n  return z\r\n}\r\n\r\n// given an array of items sorted by `comparator`, insert an item into its sort index and constrain the size to\r\n// `maxSize` by removing the last item\r\nexport function sortedInsert<T>(items: T[], add: T, maxSize: number, comparator: (a: T, b: T) => number): T | null {\r\n  invariant(maxSize > 0, 'MAX_SIZE_ZERO')\r\n  // this is an invariant because the interface cannot return multiple removed items if items.length exceeds maxSize\r\n  invariant(items.length <= maxSize, 'ITEMS_SIZE')\r\n\r\n  // short circuit first item add\r\n  if (items.length === 0) {\r\n    items.push(add)\r\n    return null\r\n  } else {\r\n    const isFull = items.length === maxSize\r\n    // short circuit if full and the additional item does not come before the last item\r\n    if (isFull && comparator(items[items.length - 1], add) <= 0) {\r\n      return add\r\n    }\r\n\r\n    let lo = 0,\r\n      hi = items.length\r\n\r\n    while (lo < hi) {\r\n      const mid = (lo + hi) >>> 1\r\n      if (comparator(items[mid], add) <= 0) {\r\n        lo = mid + 1\r\n      } else {\r\n        hi = mid\r\n      }\r\n    }\r\n    items.splice(lo, 0, add)\r\n    return isFull ? items.pop()! : null\r\n  }\r\n}\r\n","import JSBI from 'jsbi'\r\n\r\nimport { SolidityType } from '../constants'\r\nimport { validateSolidityTypeInstance } from '../utils'\r\n\r\n/**\r\n * A currency is any fungible financial instrument on Ethereum, including Ether and all ERC20 tokens.\r\n *\r\n * The only instance of the base class `Currency` is Ether.\r\n */\r\nexport class Currency {\r\n  public readonly decimals: number\r\n  public readonly symbol?: string\r\n  public readonly name?: string\r\n\r\n  /**\r\n   * The only instance of the base class `Currency`.\r\n   */\r\n  public static readonly ETHER: Currency = new Currency(18, 'ETH', 'ETH')\r\n\r\n  /**\r\n   * Constructs an instance of the base class `Currency`. The only instance of the base class `Currency` is `Currency.ETHER`.\r\n   * @param decimals decimals of the currency\r\n   * @param symbol symbol of the currency\r\n   * @param name of the currency\r\n   */\r\n  protected constructor(decimals: number, symbol?: string, name?: string) {\r\n    validateSolidityTypeInstance(JSBI.BigInt(decimals), SolidityType.uint8)\r\n\r\n    this.decimals = decimals\r\n    this.symbol = symbol\r\n    this.name = name\r\n  }\r\n}\r\n\r\nconst ETHER = Currency.ETHER\r\nexport { ETHER }\r\n","import invariant from 'tiny-invariant'\r\nimport { ChainId } from '../constants'\r\nimport { validateAndParseAddress } from '../utils'\r\nimport { Currency } from './currency'\r\n\r\n/**\r\n * Represents an ERC20 token with a unique address and some metadata.\r\n */\r\nexport class Token extends Currency {\r\n  public readonly chainId: ChainId\r\n  public readonly address: string\r\n\r\n  public constructor(chainId: ChainId, address: string, decimals: number, symbol?: string, name?: string) {\r\n    super(decimals, symbol, name)\r\n    this.chainId = chainId\r\n    this.address = validateAndParseAddress(address)\r\n  }\r\n\r\n  /**\r\n   * Returns true if the two tokens are equivalent, i.e. have the same chainId and address.\r\n   * @param other other token to compare\r\n   */\r\n  public equals(other: Token): boolean {\r\n    // short circuit on reference equality\r\n    if (this === other) {\r\n      return true\r\n    }\r\n    return this.chainId === other.chainId && this.address === other.address\r\n  }\r\n\r\n  /**\r\n   * Returns true if the address of this token sorts before the address of the other token\r\n   * @param other other token to compare\r\n   * @throws if the tokens have the same address\r\n   * @throws if the tokens are on different chains\r\n   */\r\n  public sortsBefore(other: Token): boolean {\r\n    invariant(this.chainId === other.chainId, 'CHAIN_IDS')\r\n    invariant(this.address !== other.address, 'ADDRESSES')\r\n    return this.address.toLowerCase() < other.address.toLowerCase()\r\n  }\r\n}\r\n\r\n/**\r\n * Compares two currencies for equality\r\n */\r\nexport function currencyEquals(currencyA: Currency, currencyB: Currency): boolean {\r\n  if (currencyA instanceof Token && currencyB instanceof Token) {\r\n    return currencyA.equals(currencyB)\r\n  } else if (currencyA instanceof Token) {\r\n    return false\r\n  } else if (currencyB instanceof Token) {\r\n    return false\r\n  } else {\r\n    return currencyA === currencyB\r\n  }\r\n}\r\n\r\nexport const WETH = {\r\n  [ChainId.MAINNET]: new Token(\r\n    ChainId.MAINNET,\r\n    '0xae13d989daC2f0dEbFf460aC112a837C89BAa7cd',\r\n    18,\r\n    'WBNB',\r\n    'Wrapped BNB'\r\n  ),\r\n  [ChainId.TESTNET]: new Token(ChainId.TESTNET, '0x2c1b868d6596a18e32e61b901e4060c872647b6c', 18, 'WETH', 'Wrapped ETH')\r\n}\r\n","import invariant from 'tiny-invariant'\r\nimport JSBI from 'jsbi'\r\nimport _Decimal from 'decimal.js-light'\r\nimport _Big, { RoundingMode } from 'big.js'\r\nimport toFormat from 'toformat'\r\n\r\nimport { BigintIsh, Rounding } from '../../constants'\r\nimport { ONE } from '../../constants'\r\nimport { parseBigintIsh } from '../../utils'\r\n\r\nconst Decimal = toFormat(_Decimal)\r\nconst Big = toFormat(_Big)\r\n\r\nconst toSignificantRounding = {\r\n  [Rounding.ROUND_DOWN]: Decimal.ROUND_DOWN,\r\n  [Rounding.ROUND_HALF_UP]: Decimal.ROUND_HALF_UP,\r\n  [Rounding.ROUND_UP]: Decimal.ROUND_UP\r\n}\r\n\r\nconst toFixedRounding = {\r\n  [Rounding.ROUND_DOWN]: RoundingMode.RoundDown,\r\n  [Rounding.ROUND_HALF_UP]: RoundingMode.RoundHalfUp,\r\n  [Rounding.ROUND_UP]: RoundingMode.RoundUp\r\n}\r\n\r\nexport class Fraction {\r\n  public readonly numerator: JSBI\r\n  public readonly denominator: JSBI\r\n\r\n  public constructor(numerator: BigintIsh, denominator: BigintIsh = ONE) {\r\n    this.numerator = parseBigintIsh(numerator)\r\n    this.denominator = parseBigintIsh(denominator)\r\n  }\r\n\r\n  // performs floor division\r\n  public get quotient(): JSBI {\r\n    return JSBI.divide(this.numerator, this.denominator)\r\n  }\r\n\r\n  // remainder after floor division\r\n  public get remainder(): Fraction {\r\n    return new Fraction(JSBI.remainder(this.numerator, this.denominator), this.denominator)\r\n  }\r\n\r\n  public invert(): Fraction {\r\n    return new Fraction(this.denominator, this.numerator)\r\n  }\r\n\r\n  public add(other: Fraction | BigintIsh): Fraction {\r\n    const otherParsed = other instanceof Fraction ? other : new Fraction(parseBigintIsh(other))\r\n    if (JSBI.equal(this.denominator, otherParsed.denominator)) {\r\n      return new Fraction(JSBI.add(this.numerator, otherParsed.numerator), this.denominator)\r\n    }\r\n    return new Fraction(\r\n      JSBI.add(\r\n        JSBI.multiply(this.numerator, otherParsed.denominator),\r\n        JSBI.multiply(otherParsed.numerator, this.denominator)\r\n      ),\r\n      JSBI.multiply(this.denominator, otherParsed.denominator)\r\n    )\r\n  }\r\n\r\n  public subtract(other: Fraction | BigintIsh): Fraction {\r\n    const otherParsed = other instanceof Fraction ? other : new Fraction(parseBigintIsh(other))\r\n    if (JSBI.equal(this.denominator, otherParsed.denominator)) {\r\n      return new Fraction(JSBI.subtract(this.numerator, otherParsed.numerator), this.denominator)\r\n    }\r\n    return new Fraction(\r\n      JSBI.subtract(\r\n        JSBI.multiply(this.numerator, otherParsed.denominator),\r\n        JSBI.multiply(otherParsed.numerator, this.denominator)\r\n      ),\r\n      JSBI.multiply(this.denominator, otherParsed.denominator)\r\n    )\r\n  }\r\n\r\n  public lessThan(other: Fraction | BigintIsh): boolean {\r\n    const otherParsed = other instanceof Fraction ? other : new Fraction(parseBigintIsh(other))\r\n    return JSBI.lessThan(\r\n      JSBI.multiply(this.numerator, otherParsed.denominator),\r\n      JSBI.multiply(otherParsed.numerator, this.denominator)\r\n    )\r\n  }\r\n\r\n  public equalTo(other: Fraction | BigintIsh): boolean {\r\n    const otherParsed = other instanceof Fraction ? other : new Fraction(parseBigintIsh(other))\r\n    return JSBI.equal(\r\n      JSBI.multiply(this.numerator, otherParsed.denominator),\r\n      JSBI.multiply(otherParsed.numerator, this.denominator)\r\n    )\r\n  }\r\n\r\n  public greaterThan(other: Fraction | BigintIsh): boolean {\r\n    const otherParsed = other instanceof Fraction ? other : new Fraction(parseBigintIsh(other))\r\n    return JSBI.greaterThan(\r\n      JSBI.multiply(this.numerator, otherParsed.denominator),\r\n      JSBI.multiply(otherParsed.numerator, this.denominator)\r\n    )\r\n  }\r\n\r\n  public multiply(other: Fraction | BigintIsh): Fraction {\r\n    const otherParsed = other instanceof Fraction ? other : new Fraction(parseBigintIsh(other))\r\n    return new Fraction(\r\n      JSBI.multiply(this.numerator, otherParsed.numerator),\r\n      JSBI.multiply(this.denominator, otherParsed.denominator)\r\n    )\r\n  }\r\n\r\n  public divide(other: Fraction | BigintIsh): Fraction {\r\n    const otherParsed = other instanceof Fraction ? other : new Fraction(parseBigintIsh(other))\r\n    return new Fraction(\r\n      JSBI.multiply(this.numerator, otherParsed.denominator),\r\n      JSBI.multiply(this.denominator, otherParsed.numerator)\r\n    )\r\n  }\r\n\r\n  public toSignificant(\r\n    significantDigits: number,\r\n    format: object = { groupSeparator: '' },\r\n    rounding: Rounding = Rounding.ROUND_HALF_UP\r\n  ): string {\r\n    invariant(Number.isInteger(significantDigits), `${significantDigits} is not an integer.`)\r\n    invariant(significantDigits > 0, `${significantDigits} is not positive.`)\r\n\r\n    Decimal.set({ precision: significantDigits + 1, rounding: toSignificantRounding[rounding] })\r\n    const quotient = new Decimal(this.numerator.toString())\r\n      .div(this.denominator.toString())\r\n      .toSignificantDigits(significantDigits)\r\n    return quotient.toFormat(quotient.decimalPlaces(), format)\r\n  }\r\n\r\n  public toFixed(\r\n    decimalPlaces: number,\r\n    format: object = { groupSeparator: '' },\r\n    rounding: Rounding = Rounding.ROUND_HALF_UP\r\n  ): string {\r\n    invariant(Number.isInteger(decimalPlaces), `${decimalPlaces} is not an integer.`)\r\n    invariant(decimalPlaces >= 0, `${decimalPlaces} is negative.`)\r\n\r\n    Big.DP = decimalPlaces\r\n    Big.RM = toFixedRounding[rounding]\r\n    return new Big(this.numerator.toString()).div(this.denominator.toString()).toFormat(decimalPlaces, format)\r\n  }\r\n}\r\n","import { currencyEquals } from '../token'\r\nimport { Currency, ETHER } from '../currency'\r\nimport invariant from 'tiny-invariant'\r\nimport JSBI from 'jsbi'\r\nimport _Big from 'big.js'\r\nimport toFormat from 'toformat'\r\n\r\nimport { BigintIsh, Rounding, TEN, SolidityType } from '../../constants'\r\nimport { parseBigintIsh, validateSolidityTypeInstance } from '../../utils'\r\nimport { Fraction } from './fraction'\r\n\r\nconst Big = toFormat(_Big)\r\n\r\nexport class CurrencyAmount extends Fraction {\r\n  public readonly currency: Currency\r\n\r\n  /**\r\n   * Helper that calls the constructor with the ETHER currency\r\n   * @param amount ether amount in wei\r\n   */\r\n  public static ether(amount: BigintIsh): CurrencyAmount {\r\n    return new CurrencyAmount(ETHER, amount)\r\n  }\r\n\r\n  // amount _must_ be raw, i.e. in the native representation\r\n  protected constructor(currency: Currency, amount: BigintIsh) {\r\n    const parsedAmount = parseBigintIsh(amount)\r\n    validateSolidityTypeInstance(parsedAmount, SolidityType.uint256)\r\n\r\n    super(parsedAmount, JSBI.exponentiate(TEN, JSBI.BigInt(currency.decimals)))\r\n    this.currency = currency\r\n  }\r\n\r\n  public get raw(): JSBI {\r\n    return this.numerator\r\n  }\r\n\r\n  public add(other: CurrencyAmount): CurrencyAmount {\r\n    invariant(currencyEquals(this.currency, other.currency), 'TOKEN')\r\n    return new CurrencyAmount(this.currency, JSBI.add(this.raw, other.raw))\r\n  }\r\n\r\n  public subtract(other: CurrencyAmount): CurrencyAmount {\r\n    invariant(currencyEquals(this.currency, other.currency), 'TOKEN')\r\n    return new CurrencyAmount(this.currency, JSBI.subtract(this.raw, other.raw))\r\n  }\r\n\r\n  public toSignificant(\r\n    significantDigits: number = 6,\r\n    format?: object,\r\n    rounding: Rounding = Rounding.ROUND_DOWN\r\n  ): string {\r\n    return super.toSignificant(significantDigits, format, rounding)\r\n  }\r\n\r\n  public toFixed(\r\n    decimalPlaces: number = this.currency.decimals,\r\n    format?: object,\r\n    rounding: Rounding = Rounding.ROUND_DOWN\r\n  ): string {\r\n    invariant(decimalPlaces <= this.currency.decimals, 'DECIMALS')\r\n    return super.toFixed(decimalPlaces, format, rounding)\r\n  }\r\n\r\n  public toExact(format: object = { groupSeparator: '' }): string {\r\n    Big.DP = this.currency.decimals\r\n    return new Big(this.numerator.toString()).div(this.denominator.toString()).toFormat(format)\r\n  }\r\n}\r\n","import { CurrencyAmount } from './currencyAmount'\r\nimport { Token } from '../token'\r\nimport invariant from 'tiny-invariant'\r\nimport JSBI from 'jsbi'\r\n\r\nimport { BigintIsh } from '../../constants'\r\n\r\nexport class TokenAmount extends CurrencyAmount {\r\n  public readonly token: Token\r\n\r\n  // amount _must_ be raw, i.e. in the native representation\r\n  public constructor(token: Token, amount: BigintIsh) {\r\n    super(token, amount)\r\n    this.token = token\r\n  }\r\n\r\n  public add(other: TokenAmount): TokenAmount {\r\n    invariant(this.token.equals(other.token), 'TOKEN')\r\n    return new TokenAmount(this.token, JSBI.add(this.raw, other.raw))\r\n  }\r\n\r\n  public subtract(other: TokenAmount): TokenAmount {\r\n    invariant(this.token.equals(other.token), 'TOKEN')\r\n    return new TokenAmount(this.token, JSBI.subtract(this.raw, other.raw))\r\n  }\r\n}\r\n","import { Token } from '../token'\r\nimport { TokenAmount } from './tokenAmount'\r\nimport { currencyEquals } from '../token'\r\nimport invariant from 'tiny-invariant'\r\nimport JSBI from 'jsbi'\r\n\r\nimport { BigintIsh, Rounding, TEN } from '../../constants'\r\nimport { Currency } from '../currency'\r\nimport { Route } from '../route'\r\nimport { Fraction } from './fraction'\r\nimport { CurrencyAmount } from './currencyAmount'\r\n\r\nexport class Price extends Fraction {\r\n  public readonly baseCurrency: Currency // input i.e. denominator\r\n  public readonly quoteCurrency: Currency // output i.e. numerator\r\n  public readonly scalar: Fraction // used to adjust the raw fraction w/r/t the decimals of the {base,quote}Token\r\n\r\n  public static fromRoute(route: Route): Price {\r\n    const prices: Price[] = []\r\n    for (const [i, pair] of route.pairs.entries()) {\r\n      prices.push(\r\n        route.path[i].equals(pair.token0)\r\n          ? new Price(pair.reserve0.currency, pair.reserve1.currency, pair.reserve0.raw, pair.reserve1.raw)\r\n          : new Price(pair.reserve1.currency, pair.reserve0.currency, pair.reserve1.raw, pair.reserve0.raw)\r\n      )\r\n    }\r\n    return prices.slice(1).reduce((accumulator, currentValue) => accumulator.multiply(currentValue), prices[0])\r\n  }\r\n\r\n  // denominator and numerator _must_ be raw, i.e. in the native representation\r\n  public constructor(baseCurrency: Currency, quoteCurrency: Currency, denominator: BigintIsh, numerator: BigintIsh) {\r\n    super(numerator, denominator)\r\n\r\n    this.baseCurrency = baseCurrency\r\n    this.quoteCurrency = quoteCurrency\r\n    this.scalar = new Fraction(\r\n      JSBI.exponentiate(TEN, JSBI.BigInt(baseCurrency.decimals)),\r\n      JSBI.exponentiate(TEN, JSBI.BigInt(quoteCurrency.decimals))\r\n    )\r\n  }\r\n\r\n  public get raw(): Fraction {\r\n    return new Fraction(this.numerator, this.denominator)\r\n  }\r\n\r\n  public get adjusted(): Fraction {\r\n    return super.multiply(this.scalar)\r\n  }\r\n\r\n  public invert(): Price {\r\n    return new Price(this.quoteCurrency, this.baseCurrency, this.numerator, this.denominator)\r\n  }\r\n\r\n  public multiply(other: Price): Price {\r\n    invariant(currencyEquals(this.quoteCurrency, other.baseCurrency), 'TOKEN')\r\n    const fraction = super.multiply(other)\r\n    return new Price(this.baseCurrency, other.quoteCurrency, fraction.denominator, fraction.numerator)\r\n  }\r\n\r\n  // performs floor division on overflow\r\n  public quote(currencyAmount: CurrencyAmount): CurrencyAmount {\r\n    invariant(currencyEquals(currencyAmount.currency, this.baseCurrency), 'TOKEN')\r\n    if (this.quoteCurrency instanceof Token) {\r\n      return new TokenAmount(this.quoteCurrency, super.multiply(currencyAmount.raw).quotient)\r\n    }\r\n    return CurrencyAmount.ether(super.multiply(currencyAmount.raw).quotient)\r\n  }\r\n\r\n  public toSignificant(significantDigits: number = 6, format?: object, rounding?: Rounding): string {\r\n    return this.adjusted.toSignificant(significantDigits, format, rounding)\r\n  }\r\n\r\n  public toFixed(decimalPlaces: number = 4, format?: object, rounding?: Rounding): string {\r\n    return this.adjusted.toFixed(decimalPlaces, format, rounding)\r\n  }\r\n}\r\n","import { Price } from './fractions/price'\r\nimport { TokenAmount } from './fractions/tokenAmount'\r\nimport invariant from 'tiny-invariant'\r\nimport JSBI from 'jsbi'\r\nimport { pack, keccak256 } from '@ethersproject/solidity'\r\nimport { getCreate2Address } from '@ethersproject/address'\r\n\r\nimport {\r\n  BigintIsh,\r\n  FACTORY_ADDRESS,\r\n  INIT_CODE_HASH,\r\n  MINIMUM_LIQUIDITY,\r\n  ZERO,\r\n  ONE,\r\n  FIVE,\r\n  FEES_NUMERATOR,\r\n  FEES_DENOMINATOR,\r\n  ChainId,\r\n} from '../constants'\r\nimport { sqrt, parseBigintIsh } from '../utils'\r\nimport { InsufficientReservesError, InsufficientInputAmountError } from '../errors'\r\nimport { Token } from './token'\r\n\r\nlet PAIR_ADDRESS_CACHE: { [token0Address: string]: { [token1Address: string]: string } } = {}\r\n\r\nexport class Pair {\r\n  public readonly liquidityToken: Token\r\n  private readonly tokenAmounts: [TokenAmount, TokenAmount]\r\n\r\n  public static getAddress(tokenA: Token, tokenB: Token): string {\r\n    const tokens = tokenA.sortsBefore(tokenB) ? [tokenA, tokenB] : [tokenB, tokenA] // does safety checks\r\n\r\n    if (PAIR_ADDRESS_CACHE?.[tokens[0].address]?.[tokens[1].address] === undefined) {\r\n      PAIR_ADDRESS_CACHE = {\r\n        ...PAIR_ADDRESS_CACHE,\r\n        [tokens[0].address]: {\r\n          ...PAIR_ADDRESS_CACHE?.[tokens[0].address],\r\n          [tokens[1].address]: getCreate2Address(\r\n            FACTORY_ADDRESS,\r\n            keccak256(['bytes'], [pack(['address', 'address'], [tokens[0].address, tokens[1].address])]),\r\n            INIT_CODE_HASH\r\n          ),\r\n        },\r\n      }\r\n    }\r\n\r\n    return PAIR_ADDRESS_CACHE[tokens[0].address][tokens[1].address]\r\n  }\r\n\r\n  public constructor(tokenAmountA: TokenAmount, tokenAmountB: TokenAmount) {\r\n    const tokenAmounts = tokenAmountA.token.sortsBefore(tokenAmountB.token) // does safety checks\r\n      ? [tokenAmountA, tokenAmountB]\r\n      : [tokenAmountB, tokenAmountA]\r\n    this.liquidityToken = new Token(\r\n      tokenAmounts[0].token.chainId,\r\n      Pair.getAddress(tokenAmounts[0].token, tokenAmounts[1].token),\r\n      18,\r\n      'Echodex-LP',\r\n      'Echodex LPs'\r\n    )\r\n    this.tokenAmounts = tokenAmounts as [TokenAmount, TokenAmount]\r\n  }\r\n\r\n  /**\r\n   * Returns true if the token is either token0 or token1\r\n   * @param token to check\r\n   */\r\n  public involvesToken(token: Token): boolean {\r\n    return token.equals(this.token0) || token.equals(this.token1)\r\n  }\r\n\r\n  /**\r\n   * Returns the current mid price of the pair in terms of token0, i.e. the ratio of reserve1 to reserve0\r\n   */\r\n  public get token0Price(): Price {\r\n    return new Price(this.token0, this.token1, this.tokenAmounts[0].raw, this.tokenAmounts[1].raw)\r\n  }\r\n\r\n  /**\r\n   * Returns the current mid price of the pair in terms of token1, i.e. the ratio of reserve0 to reserve1\r\n   */\r\n  public get token1Price(): Price {\r\n    return new Price(this.token1, this.token0, this.tokenAmounts[1].raw, this.tokenAmounts[0].raw)\r\n  }\r\n\r\n  /**\r\n   * Return the price of the given token in terms of the other token in the pair.\r\n   * @param token token to return price of\r\n   */\r\n  public priceOf(token: Token): Price {\r\n    invariant(this.involvesToken(token), 'TOKEN')\r\n    return token.equals(this.token0) ? this.token0Price : this.token1Price\r\n  }\r\n\r\n  /**\r\n   * Returns the chain ID of the tokens in the pair.\r\n   */\r\n  public get chainId(): ChainId {\r\n    return this.token0.chainId\r\n  }\r\n\r\n  public get token0(): Token {\r\n    return this.tokenAmounts[0].token\r\n  }\r\n\r\n  public get token1(): Token {\r\n    return this.tokenAmounts[1].token\r\n  }\r\n\r\n  public get reserve0(): TokenAmount {\r\n    return this.tokenAmounts[0]\r\n  }\r\n\r\n  public get reserve1(): TokenAmount {\r\n    return this.tokenAmounts[1]\r\n  }\r\n\r\n  public reserveOf(token: Token): TokenAmount {\r\n    invariant(this.involvesToken(token), 'TOKEN')\r\n    return token.equals(this.token0) ? this.reserve0 : this.reserve1\r\n  }\r\n\r\n  public getOutputAmount(inputAmount: TokenAmount): [TokenAmount, Pair] {\r\n    invariant(this.involvesToken(inputAmount.token), 'TOKEN')\r\n    if (JSBI.equal(this.reserve0.raw, ZERO) || JSBI.equal(this.reserve1.raw, ZERO)) {\r\n      throw new InsufficientReservesError()\r\n    }\r\n    const inputReserve = this.reserveOf(inputAmount.token)\r\n    const outputReserve = this.reserveOf(inputAmount.token.equals(this.token0) ? this.token1 : this.token0)\r\n    const inputAmountWithFee = JSBI.multiply(inputAmount.raw, FEES_NUMERATOR)\r\n    const numerator = JSBI.multiply(inputAmountWithFee, outputReserve.raw)\r\n    const denominator = JSBI.add(JSBI.multiply(inputReserve.raw, FEES_DENOMINATOR), inputAmountWithFee)\r\n    const outputAmount = new TokenAmount(\r\n      inputAmount.token.equals(this.token0) ? this.token1 : this.token0,\r\n      JSBI.divide(numerator, denominator)\r\n    )\r\n    if (JSBI.equal(outputAmount.raw, ZERO)) {\r\n      throw new InsufficientInputAmountError()\r\n    }\r\n    return [outputAmount, new Pair(inputReserve.add(inputAmount), outputReserve.subtract(outputAmount))]\r\n  }\r\n\r\n  public getInputAmount(outputAmount: TokenAmount): [TokenAmount, Pair] {\r\n    invariant(this.involvesToken(outputAmount.token), 'TOKEN')\r\n    if (\r\n      JSBI.equal(this.reserve0.raw, ZERO) ||\r\n      JSBI.equal(this.reserve1.raw, ZERO) ||\r\n      JSBI.greaterThanOrEqual(outputAmount.raw, this.reserveOf(outputAmount.token).raw)\r\n    ) {\r\n      throw new InsufficientReservesError()\r\n    }\r\n\r\n    const outputReserve = this.reserveOf(outputAmount.token)\r\n    const inputReserve = this.reserveOf(outputAmount.token.equals(this.token0) ? this.token1 : this.token0)\r\n    const numerator = JSBI.multiply(JSBI.multiply(inputReserve.raw, outputAmount.raw), FEES_DENOMINATOR)\r\n    const denominator = JSBI.multiply(JSBI.subtract(outputReserve.raw, outputAmount.raw), FEES_NUMERATOR)\r\n    const inputAmount = new TokenAmount(\r\n      outputAmount.token.equals(this.token0) ? this.token1 : this.token0,\r\n      JSBI.add(JSBI.divide(numerator, denominator), ONE)\r\n    )\r\n    return [inputAmount, new Pair(inputReserve.add(inputAmount), outputReserve.subtract(outputAmount))]\r\n  }\r\n\r\n  public getLiquidityMinted(\r\n    totalSupply: TokenAmount,\r\n    tokenAmountA: TokenAmount,\r\n    tokenAmountB: TokenAmount\r\n  ): TokenAmount {\r\n    invariant(totalSupply.token.equals(this.liquidityToken), 'LIQUIDITY')\r\n    const tokenAmounts = tokenAmountA.token.sortsBefore(tokenAmountB.token) // does safety checks\r\n      ? [tokenAmountA, tokenAmountB]\r\n      : [tokenAmountB, tokenAmountA]\r\n    invariant(tokenAmounts[0].token.equals(this.token0) && tokenAmounts[1].token.equals(this.token1), 'TOKEN')\r\n\r\n    let liquidity: JSBI\r\n    if (JSBI.equal(totalSupply.raw, ZERO)) {\r\n      liquidity = JSBI.subtract(sqrt(JSBI.multiply(tokenAmounts[0].raw, tokenAmounts[1].raw)), MINIMUM_LIQUIDITY)\r\n    } else {\r\n      const amount0 = JSBI.divide(JSBI.multiply(tokenAmounts[0].raw, totalSupply.raw), this.reserve0.raw)\r\n      const amount1 = JSBI.divide(JSBI.multiply(tokenAmounts[1].raw, totalSupply.raw), this.reserve1.raw)\r\n      liquidity = JSBI.lessThanOrEqual(amount0, amount1) ? amount0 : amount1\r\n    }\r\n    if (!JSBI.greaterThan(liquidity, ZERO)) {\r\n      throw new InsufficientInputAmountError()\r\n    }\r\n    return new TokenAmount(this.liquidityToken, liquidity)\r\n  }\r\n\r\n  public getLiquidityValue(\r\n    token: Token,\r\n    totalSupply: TokenAmount,\r\n    liquidity: TokenAmount,\r\n    feeOn: boolean = false,\r\n    kLast?: BigintIsh\r\n  ): TokenAmount {\r\n    invariant(this.involvesToken(token), 'TOKEN')\r\n    invariant(totalSupply.token.equals(this.liquidityToken), 'TOTAL_SUPPLY')\r\n    invariant(liquidity.token.equals(this.liquidityToken), 'LIQUIDITY')\r\n    invariant(JSBI.lessThanOrEqual(liquidity.raw, totalSupply.raw), 'LIQUIDITY')\r\n\r\n    let totalSupplyAdjusted: TokenAmount\r\n    if (!feeOn) {\r\n      totalSupplyAdjusted = totalSupply\r\n    } else {\r\n      invariant(!!kLast, 'K_LAST')\r\n      const kLastParsed = parseBigintIsh(kLast)\r\n      if (!JSBI.equal(kLastParsed, ZERO)) {\r\n        const rootK = sqrt(JSBI.multiply(this.reserve0.raw, this.reserve1.raw))\r\n        const rootKLast = sqrt(kLastParsed)\r\n        if (JSBI.greaterThan(rootK, rootKLast)) {\r\n          const numerator = JSBI.multiply(totalSupply.raw, JSBI.subtract(rootK, rootKLast))\r\n          const denominator = JSBI.add(JSBI.multiply(rootK, FIVE), rootKLast)\r\n          const feeLiquidity = JSBI.divide(numerator, denominator)\r\n          totalSupplyAdjusted = totalSupply.add(new TokenAmount(this.liquidityToken, feeLiquidity))\r\n        } else {\r\n          totalSupplyAdjusted = totalSupply\r\n        }\r\n      } else {\r\n        totalSupplyAdjusted = totalSupply\r\n      }\r\n    }\r\n\r\n    return new TokenAmount(\r\n      token,\r\n      JSBI.divide(JSBI.multiply(liquidity.raw, this.reserveOf(token).raw), totalSupplyAdjusted.raw)\r\n    )\r\n  }\r\n}\r\n","import { ChainId } from '../constants'\r\nimport invariant from 'tiny-invariant'\r\n\r\nimport { Currency, ETHER } from './currency'\r\nimport { Token, WETH } from './token'\r\nimport { Pair } from './pair'\r\nimport { Price } from './fractions/price'\r\n\r\nexport class Route {\r\n  public readonly pairs: Pair[]\r\n  public readonly path: Token[]\r\n  public readonly input: Currency\r\n  public readonly output: Currency\r\n  public readonly midPrice: Price\r\n\r\n  public constructor(pairs: Pair[], input: Currency, output?: Currency) {\r\n    invariant(pairs.length > 0, 'PAIRS')\r\n    invariant(\r\n      pairs.every(pair => pair.chainId === pairs[0].chainId),\r\n      'CHAIN_IDS'\r\n    )\r\n    invariant(\r\n      (input instanceof Token && pairs[0].involvesToken(input)) ||\r\n        (input === ETHER && pairs[0].involvesToken(WETH[pairs[0].chainId])),\r\n      'INPUT'\r\n    )\r\n    invariant(\r\n      typeof output === 'undefined' ||\r\n        (output instanceof Token && pairs[pairs.length - 1].involvesToken(output)) ||\r\n        (output === ETHER && pairs[pairs.length - 1].involvesToken(WETH[pairs[0].chainId])),\r\n      'OUTPUT'\r\n    )\r\n\r\n    const path: Token[] = [input instanceof Token ? input : WETH[pairs[0].chainId]]\r\n    for (const [i, pair] of pairs.entries()) {\r\n      const currentInput = path[i]\r\n      invariant(currentInput.equals(pair.token0) || currentInput.equals(pair.token1), 'PATH')\r\n      const output = currentInput.equals(pair.token0) ? pair.token1 : pair.token0\r\n      path.push(output)\r\n    }\r\n\r\n    this.pairs = pairs\r\n    this.path = path\r\n    this.midPrice = Price.fromRoute(this)\r\n    this.input = input\r\n    this.output = output ?? path[path.length - 1]\r\n  }\r\n\r\n  public get chainId(): ChainId {\r\n    return this.pairs[0].chainId\r\n  }\r\n}\r\n","import { Rounding, _100 } from '../../constants'\r\nimport { Fraction } from './fraction'\r\n\r\nconst _100_PERCENT = new Fraction(_100)\r\n\r\nexport class Percent extends Fraction {\r\n  public toSignificant(significantDigits: number = 5, format?: object, rounding?: Rounding): string {\r\n    return this.multiply(_100_PERCENT).toSignificant(significantDigits, format, rounding)\r\n  }\r\n\r\n  public toFixed(decimalPlaces: number = 2, format?: object, rounding?: Rounding): string {\r\n    return this.multiply(_100_PERCENT).toFixed(decimalPlaces, format, rounding)\r\n  }\r\n}\r\n","import invariant from 'tiny-invariant'\r\n\r\nimport { ChainId, ONE, TradeType, ZERO } from '../constants'\r\nimport { sortedInsert } from '../utils'\r\nimport { Currency, ETHER } from './currency'\r\nimport { CurrencyAmount } from './fractions/currencyAmount'\r\nimport { Fraction } from './fractions/fraction'\r\nimport { Percent } from './fractions/percent'\r\nimport { Price } from './fractions/price'\r\nimport { TokenAmount } from './fractions/tokenAmount'\r\nimport { Pair } from './pair'\r\nimport { Route } from './route'\r\nimport { currencyEquals, Token, WETH } from './token'\r\n\r\n/**\r\n * Returns the percent difference between the mid price and the execution price, i.e. price impact.\r\n * @param midPrice mid price before the trade\r\n * @param inputAmount the input amount of the trade\r\n * @param outputAmount the output amount of the trade\r\n */\r\nfunction computePriceImpact(midPrice: Price, inputAmount: CurrencyAmount, outputAmount: CurrencyAmount): Percent {\r\n  const exactQuote = midPrice.raw.multiply(inputAmount.raw)\r\n  // calculate slippage := (exactQuote - outputAmount) / exactQuote\r\n  const slippage = exactQuote.subtract(outputAmount.raw).divide(exactQuote)\r\n  return new Percent(slippage.numerator, slippage.denominator)\r\n}\r\n\r\n// minimal interface so the input output comparator may be shared across types\r\ninterface InputOutput {\r\n  readonly inputAmount: CurrencyAmount\r\n  readonly outputAmount: CurrencyAmount\r\n}\r\n\r\n// comparator function that allows sorting trades by their output amounts, in decreasing order, and then input amounts\r\n// in increasing order. i.e. the best trades have the most outputs for the least inputs and are sorted first\r\nexport function inputOutputComparator(a: InputOutput, b: InputOutput): number {\r\n  // must have same input and output token for comparison\r\n  invariant(currencyEquals(a.inputAmount.currency, b.inputAmount.currency), 'INPUT_CURRENCY')\r\n  invariant(currencyEquals(a.outputAmount.currency, b.outputAmount.currency), 'OUTPUT_CURRENCY')\r\n  if (a.outputAmount.equalTo(b.outputAmount)) {\r\n    if (a.inputAmount.equalTo(b.inputAmount)) {\r\n      return 0\r\n    }\r\n    // trade A requires less input than trade B, so A should come first\r\n    if (a.inputAmount.lessThan(b.inputAmount)) {\r\n      return -1\r\n    } else {\r\n      return 1\r\n    }\r\n  } else {\r\n    // tradeA has less output than trade B, so should come second\r\n    if (a.outputAmount.lessThan(b.outputAmount)) {\r\n      return 1\r\n    } else {\r\n      return -1\r\n    }\r\n  }\r\n}\r\n\r\n// extension of the input output comparator that also considers other dimensions of the trade in ranking them\r\nexport function tradeComparator(a: Trade, b: Trade) {\r\n  const ioComp = inputOutputComparator(a, b)\r\n  if (ioComp !== 0) {\r\n    return ioComp\r\n  }\r\n\r\n  // consider lowest slippage next, since these are less likely to fail\r\n  if (a.priceImpact.lessThan(b.priceImpact)) {\r\n    return -1\r\n  } else if (a.priceImpact.greaterThan(b.priceImpact)) {\r\n    return 1\r\n  }\r\n\r\n  // finally consider the number of hops since each hop costs gas\r\n  return a.route.path.length - b.route.path.length\r\n}\r\n\r\nexport interface BestTradeOptions {\r\n  // how many results to return\r\n  maxNumResults?: number\r\n  // the maximum number of hops a trade should contain\r\n  maxHops?: number\r\n}\r\n\r\n/**\r\n * Given a currency amount and a chain ID, returns the equivalent representation as the token amount.\r\n * In other words, if the currency is ETHER, returns the WETH token amount for the given chain. Otherwise, returns\r\n * the input currency amount.\r\n */\r\nfunction wrappedAmount(currencyAmount: CurrencyAmount, chainId: ChainId): TokenAmount {\r\n  if (currencyAmount instanceof TokenAmount) return currencyAmount\r\n  if (currencyAmount.currency === ETHER) return new TokenAmount(WETH[chainId], currencyAmount.raw)\r\n  invariant(false, 'CURRENCY')\r\n}\r\n\r\nfunction wrappedCurrency(currency: Currency, chainId: ChainId): Token {\r\n  if (currency instanceof Token) return currency\r\n  if (currency === ETHER) return WETH[chainId]\r\n  invariant(false, 'CURRENCY')\r\n}\r\n\r\n/**\r\n * Represents a trade executed against a list of pairs.\r\n * Does not account for slippage, i.e. trades that front run this trade and move the price.\r\n */\r\nexport class Trade {\r\n  /**\r\n   * The route of the trade, i.e. which pairs the trade goes through.\r\n   */\r\n  public readonly route: Route\r\n  /**\r\n   * The type of the trade, either exact in or exact out.\r\n   */\r\n  public readonly tradeType: TradeType\r\n  /**\r\n   * The input amount for the trade assuming no slippage.\r\n   */\r\n  public readonly inputAmount: CurrencyAmount\r\n  /**\r\n   * The output amount for the trade assuming no slippage.\r\n   */\r\n  public readonly outputAmount: CurrencyAmount\r\n  /**\r\n   * The price expressed in terms of output amount/input amount.\r\n   */\r\n  public readonly executionPrice: Price\r\n  /**\r\n   * The mid price after the trade executes assuming no slippage.\r\n   */\r\n  public readonly nextMidPrice: Price\r\n  /**\r\n   * The percent difference between the mid price before the trade and the trade execution price.\r\n   */\r\n  public readonly priceImpact: Percent\r\n\r\n  /**\r\n   * Constructs an exact in trade with the given amount in and route\r\n   * @param route route of the exact in trade\r\n   * @param amountIn the amount being passed in\r\n   */\r\n  public static exactIn(route: Route, amountIn: CurrencyAmount): Trade {\r\n    return new Trade(route, amountIn, TradeType.EXACT_INPUT)\r\n  }\r\n\r\n  /**\r\n   * Constructs an exact out trade with the given amount out and route\r\n   * @param route route of the exact out trade\r\n   * @param amountOut the amount returned by the trade\r\n   */\r\n  public static exactOut(route: Route, amountOut: CurrencyAmount): Trade {\r\n    return new Trade(route, amountOut, TradeType.EXACT_OUTPUT)\r\n  }\r\n\r\n  public constructor(route: Route, amount: CurrencyAmount, tradeType: TradeType) {\r\n    const amounts: TokenAmount[] = new Array(route.path.length)\r\n    const nextPairs: Pair[] = new Array(route.pairs.length)\r\n    if (tradeType === TradeType.EXACT_INPUT) {\r\n      invariant(currencyEquals(amount.currency, route.input), 'INPUT')\r\n      amounts[0] = wrappedAmount(amount, route.chainId)\r\n      for (let i = 0; i < route.path.length - 1; i++) {\r\n        const pair = route.pairs[i]\r\n        const [outputAmount, nextPair] = pair.getOutputAmount(amounts[i])\r\n        amounts[i + 1] = outputAmount\r\n        nextPairs[i] = nextPair\r\n      }\r\n    } else {\r\n      invariant(currencyEquals(amount.currency, route.output), 'OUTPUT')\r\n      amounts[amounts.length - 1] = wrappedAmount(amount, route.chainId)\r\n      for (let i = route.path.length - 1; i > 0; i--) {\r\n        const pair = route.pairs[i - 1]\r\n        const [inputAmount, nextPair] = pair.getInputAmount(amounts[i])\r\n        amounts[i - 1] = inputAmount\r\n        nextPairs[i - 1] = nextPair\r\n      }\r\n    }\r\n\r\n    this.route = route\r\n    this.tradeType = tradeType\r\n    this.inputAmount =\r\n      tradeType === TradeType.EXACT_INPUT\r\n        ? amount\r\n        : route.input === ETHER\r\n        ? CurrencyAmount.ether(amounts[0].raw)\r\n        : amounts[0]\r\n    this.outputAmount =\r\n      tradeType === TradeType.EXACT_OUTPUT\r\n        ? amount\r\n        : route.output === ETHER\r\n        ? CurrencyAmount.ether(amounts[amounts.length - 1].raw)\r\n        : amounts[amounts.length - 1]\r\n    this.executionPrice = new Price(\r\n      this.inputAmount.currency,\r\n      this.outputAmount.currency,\r\n      this.inputAmount.raw,\r\n      this.outputAmount.raw\r\n    )\r\n    this.nextMidPrice = Price.fromRoute(new Route(nextPairs, route.input))\r\n    this.priceImpact = computePriceImpact(route.midPrice, this.inputAmount, this.outputAmount)\r\n  }\r\n\r\n  /**\r\n   * Get the minimum amount that must be received from this trade for the given slippage tolerance\r\n   * @param slippageTolerance tolerance of unfavorable slippage from the execution price of this trade\r\n   */\r\n  public minimumAmountOut(slippageTolerance: Percent): CurrencyAmount {\r\n    invariant(!slippageTolerance.lessThan(ZERO), 'SLIPPAGE_TOLERANCE')\r\n    if (this.tradeType === TradeType.EXACT_OUTPUT) {\r\n      return this.outputAmount\r\n    } else {\r\n      const slippageAdjustedAmountOut = new Fraction(ONE)\r\n        .add(slippageTolerance)\r\n        .invert()\r\n        .multiply(this.outputAmount.raw).quotient\r\n      return this.outputAmount instanceof TokenAmount\r\n        ? new TokenAmount(this.outputAmount.token, slippageAdjustedAmountOut)\r\n        : CurrencyAmount.ether(slippageAdjustedAmountOut)\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get the maximum amount in that can be spent via this trade for the given slippage tolerance\r\n   * @param slippageTolerance tolerance of unfavorable slippage from the execution price of this trade\r\n   */\r\n  public maximumAmountIn(slippageTolerance: Percent): CurrencyAmount {\r\n    invariant(!slippageTolerance.lessThan(ZERO), 'SLIPPAGE_TOLERANCE')\r\n    if (this.tradeType === TradeType.EXACT_INPUT) {\r\n      return this.inputAmount\r\n    } else {\r\n      const slippageAdjustedAmountIn = new Fraction(ONE).add(slippageTolerance).multiply(this.inputAmount.raw).quotient\r\n      return this.inputAmount instanceof TokenAmount\r\n        ? new TokenAmount(this.inputAmount.token, slippageAdjustedAmountIn)\r\n        : CurrencyAmount.ether(slippageAdjustedAmountIn)\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Given a list of pairs, and a fixed amount in, returns the top `maxNumResults` trades that go from an input token\r\n   * amount to an output token, making at most `maxHops` hops.\r\n   * Note this does not consider aggregation, as routes are linear. It's possible a better route exists by splitting\r\n   * the amount in among multiple routes.\r\n   * @param pairs the pairs to consider in finding the best trade\r\n   * @param currencyAmountIn exact amount of input currency to spend\r\n   * @param currencyOut the desired currency out\r\n   * @param maxNumResults maximum number of results to return\r\n   * @param maxHops maximum number of hops a returned trade can make, e.g. 1 hop goes through a single pair\r\n   * @param currentPairs used in recursion; the current list of pairs\r\n   * @param originalAmountIn used in recursion; the original value of the currencyAmountIn parameter\r\n   * @param bestTrades used in recursion; the current list of best trades\r\n   */\r\n  public static bestTradeExactIn(\r\n    pairs: Pair[],\r\n    currencyAmountIn: CurrencyAmount,\r\n    currencyOut: Currency,\r\n    { maxNumResults = 3, maxHops = 3 }: BestTradeOptions = {},\r\n    // used in recursion.\r\n    currentPairs: Pair[] = [],\r\n    originalAmountIn: CurrencyAmount = currencyAmountIn,\r\n    bestTrades: Trade[] = []\r\n  ): Trade[] {\r\n    invariant(pairs.length > 0, 'PAIRS')\r\n    invariant(maxHops > 0, 'MAX_HOPS')\r\n    invariant(originalAmountIn === currencyAmountIn || currentPairs.length > 0, 'INVALID_RECURSION')\r\n    const chainId: ChainId | undefined =\r\n      currencyAmountIn instanceof TokenAmount\r\n        ? currencyAmountIn.token.chainId\r\n        : currencyOut instanceof Token\r\n        ? currencyOut.chainId\r\n        : undefined\r\n    invariant(chainId !== undefined, 'CHAIN_ID')\r\n\r\n    const amountIn = wrappedAmount(currencyAmountIn, chainId)\r\n    const tokenOut = wrappedCurrency(currencyOut, chainId)\r\n    for (let i = 0; i < pairs.length; i++) {\r\n      const pair = pairs[i]\r\n      // pair irrelevant\r\n      if (!pair.token0.equals(amountIn.token) && !pair.token1.equals(amountIn.token)) continue\r\n      if (pair.reserve0.equalTo(ZERO) || pair.reserve1.equalTo(ZERO)) continue\r\n\r\n      let amountOut: TokenAmount\r\n      try {\r\n        ;[amountOut] = pair.getOutputAmount(amountIn)\r\n      } catch (error) {\r\n        // input too low\r\n        if (error.isInsufficientInputAmountError) {\r\n          continue\r\n        }\r\n        throw error\r\n      }\r\n      // we have arrived at the output token, so this is the final trade of one of the paths\r\n      if (amountOut.token.equals(tokenOut)) {\r\n        sortedInsert(\r\n          bestTrades,\r\n          new Trade(\r\n            new Route([...currentPairs, pair], originalAmountIn.currency, currencyOut),\r\n            originalAmountIn,\r\n            TradeType.EXACT_INPUT\r\n          ),\r\n          maxNumResults,\r\n          tradeComparator\r\n        )\r\n      } else if (maxHops > 1 && pairs.length > 1) {\r\n        const pairsExcludingThisPair = pairs.slice(0, i).concat(pairs.slice(i + 1, pairs.length))\r\n\r\n        // otherwise, consider all the other paths that lead from this token as long as we have not exceeded maxHops\r\n        Trade.bestTradeExactIn(\r\n          pairsExcludingThisPair,\r\n          amountOut,\r\n          currencyOut,\r\n          {\r\n            maxNumResults,\r\n            maxHops: maxHops - 1\r\n          },\r\n          [...currentPairs, pair],\r\n          originalAmountIn,\r\n          bestTrades\r\n        )\r\n      }\r\n    }\r\n\r\n    return bestTrades\r\n  }\r\n\r\n  /**\r\n   * similar to the above method but instead targets a fixed output amount\r\n   * given a list of pairs, and a fixed amount out, returns the top `maxNumResults` trades that go from an input token\r\n   * to an output token amount, making at most `maxHops` hops\r\n   * note this does not consider aggregation, as routes are linear. it's possible a better route exists by splitting\r\n   * the amount in among multiple routes.\r\n   * @param pairs the pairs to consider in finding the best trade\r\n   * @param currencyIn the currency to spend\r\n   * @param currencyAmountOut the exact amount of currency out\r\n   * @param maxNumResults maximum number of results to return\r\n   * @param maxHops maximum number of hops a returned trade can make, e.g. 1 hop goes through a single pair\r\n   * @param currentPairs used in recursion; the current list of pairs\r\n   * @param originalAmountOut used in recursion; the original value of the currencyAmountOut parameter\r\n   * @param bestTrades used in recursion; the current list of best trades\r\n   */\r\n  public static bestTradeExactOut(\r\n    pairs: Pair[],\r\n    currencyIn: Currency,\r\n    currencyAmountOut: CurrencyAmount,\r\n    { maxNumResults = 3, maxHops = 3 }: BestTradeOptions = {},\r\n    // used in recursion.\r\n    currentPairs: Pair[] = [],\r\n    originalAmountOut: CurrencyAmount = currencyAmountOut,\r\n    bestTrades: Trade[] = []\r\n  ): Trade[] {\r\n    invariant(pairs.length > 0, 'PAIRS')\r\n    invariant(maxHops > 0, 'MAX_HOPS')\r\n    invariant(originalAmountOut === currencyAmountOut || currentPairs.length > 0, 'INVALID_RECURSION')\r\n    const chainId: ChainId | undefined =\r\n      currencyAmountOut instanceof TokenAmount\r\n        ? currencyAmountOut.token.chainId\r\n        : currencyIn instanceof Token\r\n        ? currencyIn.chainId\r\n        : undefined\r\n    invariant(chainId !== undefined, 'CHAIN_ID')\r\n\r\n    const amountOut = wrappedAmount(currencyAmountOut, chainId)\r\n    const tokenIn = wrappedCurrency(currencyIn, chainId)\r\n    for (let i = 0; i < pairs.length; i++) {\r\n      const pair = pairs[i]\r\n      // pair irrelevant\r\n      if (!pair.token0.equals(amountOut.token) && !pair.token1.equals(amountOut.token)) continue\r\n      if (pair.reserve0.equalTo(ZERO) || pair.reserve1.equalTo(ZERO)) continue\r\n\r\n      let amountIn: TokenAmount\r\n      try {\r\n        ;[amountIn] = pair.getInputAmount(amountOut)\r\n      } catch (error) {\r\n        // not enough liquidity in this pair\r\n        if (error.isInsufficientReservesError) {\r\n          continue\r\n        }\r\n        throw error\r\n      }\r\n      // we have arrived at the input token, so this is the first trade of one of the paths\r\n      if (amountIn.token.equals(tokenIn)) {\r\n        sortedInsert(\r\n          bestTrades,\r\n          new Trade(\r\n            new Route([pair, ...currentPairs], currencyIn, originalAmountOut.currency),\r\n            originalAmountOut,\r\n            TradeType.EXACT_OUTPUT\r\n          ),\r\n          maxNumResults,\r\n          tradeComparator\r\n        )\r\n      } else if (maxHops > 1 && pairs.length > 1) {\r\n        const pairsExcludingThisPair = pairs.slice(0, i).concat(pairs.slice(i + 1, pairs.length))\r\n\r\n        // otherwise, consider all the other paths that arrive at this token as long as we have not exceeded maxHops\r\n        Trade.bestTradeExactOut(\r\n          pairsExcludingThisPair,\r\n          currencyIn,\r\n          amountIn,\r\n          {\r\n            maxNumResults,\r\n            maxHops: maxHops - 1\r\n          },\r\n          [pair, ...currentPairs],\r\n          originalAmountOut,\r\n          bestTrades\r\n        )\r\n      }\r\n    }\r\n\r\n    return bestTrades\r\n  }\r\n}\r\n","import { TradeType } from './constants'\r\nimport invariant from 'tiny-invariant'\r\nimport { validateAndParseAddress } from './utils'\r\nimport { CurrencyAmount, ETHER, Percent, Trade } from './entities'\r\n\r\n/**\r\n * Options for producing the arguments to send call to the router.\r\n */\r\nexport interface TradeOptions {\r\n  /**\r\n   * How much the execution price is allowed to move unfavorably from the trade execution price.\r\n   */\r\n  allowedSlippage: Percent\r\n  /**\r\n   * How long the swap is valid until it expires, in seconds.\r\n   * This will be used to produce a `deadline` parameter which is computed from when the swap call parameters\r\n   * are generated.\r\n   */\r\n  ttl: number\r\n  /**\r\n   * The account that should receive the output of the swap.\r\n   */\r\n  recipient: string\r\n\r\n  /**\r\n   * Whether any of the tokens in the path are fee on transfer tokens, which should be handled with special methods\r\n   */\r\n  feeOnTransfer?: boolean\r\n\r\n  isRouterFee?: boolean\r\n\r\n  amountFeeAddMore?: string\r\n}\r\n\r\nexport interface TradeOptionsDeadline extends Omit<TradeOptions, 'ttl'> {\r\n  /**\r\n   * When the transaction expires.\r\n   * This is an atlernate to specifying the ttl, for when you do not want to use local time.\r\n   */\r\n  deadline: number\r\n}\r\n\r\n/**\r\n * The parameters to use in the call to the Pancake Router to execute a trade.\r\n */\r\nexport interface SwapParameters {\r\n  /**\r\n   * The method to call on the Pancake Router.\r\n   */\r\n  methodName: string\r\n  /**\r\n   * The arguments to pass to the method, all hex encoded.\r\n   */\r\n  args: (string | string[])[]\r\n  /**\r\n   * The amount of wei to send in hex.\r\n   */\r\n  value: string\r\n}\r\n\r\nfunction toHex(currencyAmount: CurrencyAmount) {\r\n  return `0x${currencyAmount.raw.toString(16)}`\r\n}\r\n\r\nconst ZERO_HEX = '0x0'\r\n\r\n/**\r\n * Represents the Pancake Router, and has static methods for helping execute trades.\r\n */\r\nexport abstract class Router {\r\n  /**\r\n   * Cannot be constructed.\r\n   */\r\n  private constructor() { }\r\n  /**\r\n   * Produces the on-chain method name to call and the hex encoded parameters to pass as arguments for a given trade.\r\n   * @param trade to produce call parameters for\r\n   * @param options options for the call parameters\r\n   */\r\n  public static swapCallParameters(trade: Trade, options: TradeOptions | TradeOptionsDeadline): SwapParameters {\r\n    const etherIn = trade.inputAmount.currency === ETHER\r\n    const etherOut = trade.outputAmount.currency === ETHER\r\n    // the router does not support both ether in and out\r\n    invariant(!(etherIn && etherOut), 'ETHER_IN_OUT')\r\n    invariant(!('ttl' in options) || options.ttl > 0, 'TTL')\r\n\r\n    const to: string = validateAndParseAddress(options.recipient)\r\n    const amountIn: string = toHex(trade.maximumAmountIn(options.allowedSlippage))\r\n    const amountOut: string = toHex(trade.minimumAmountOut(options.allowedSlippage))\r\n    const path: string[] = trade.route.path.map((token) => token.address)\r\n    const deadline =\r\n      'ttl' in options\r\n        ? `0x${(Math.floor(new Date().getTime() / 1000) + options.ttl).toString(16)}`\r\n        : `0x${options.deadline.toString(16)}`\r\n\r\n    const useFeeOnTransfer = Boolean(options.feeOnTransfer)\r\n\r\n    let methodName: string\r\n    let args: (string | string[])[]\r\n    let value: string\r\n    switch (trade.tradeType) {\r\n      case TradeType.EXACT_INPUT:\r\n        if (etherIn) {\r\n          methodName = useFeeOnTransfer ? 'swapExactETHForTokensSupportingFeeOnTransferTokens' : 'swapExactETHForTokens'\r\n          // (uint amountOutMin, address[] calldata path, address to, uint deadline)\r\n          args = options.isRouterFee ? [amountOut, path, to, deadline, [options.amountFeeAddMore ?? \"0\"]] : [amountOut, path, to, deadline]\r\n          value = amountIn\r\n        } else if (etherOut) {\r\n          methodName = useFeeOnTransfer ? 'swapExactTokensForETHSupportingFeeOnTransferTokens' : 'swapExactTokensForETH'\r\n          // (uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\r\n          args = options.isRouterFee ? [amountIn, amountOut, path, to, deadline, [options.amountFeeAddMore ?? \"0\"]] : [amountIn, amountOut, path, to, deadline]\r\n          value = ZERO_HEX\r\n        } else {\r\n          methodName = useFeeOnTransfer\r\n            ? 'swapExactTokensForTokensSupportingFeeOnTransferTokens'\r\n            : 'swapExactTokensForTokens'\r\n          // (uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\r\n          args = options.isRouterFee ? [amountIn, amountOut, path, to, deadline, [options.amountFeeAddMore ?? \"0\"]] : [amountIn, amountOut, path, to, deadline]\r\n          value = ZERO_HEX\r\n        }\r\n        break\r\n      case TradeType.EXACT_OUTPUT:\r\n        invariant(!useFeeOnTransfer, 'EXACT_OUT_FOT')\r\n        if (etherIn) {\r\n          methodName = 'swapETHForExactTokens'\r\n          // (uint amountOut, address[] calldata path, address to, uint deadline)\r\n          args = options.isRouterFee ? [amountOut, path, to, deadline, [options.amountFeeAddMore ?? \"0\"]] : [amountOut, path, to, deadline]\r\n          value = amountIn\r\n        } else if (etherOut) {\r\n          methodName = 'swapTokensForExactETH'\r\n          // (uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\r\n          args = options.isRouterFee ? [amountOut, amountIn, path, to, deadline, [options.amountFeeAddMore ?? \"0\"]] : [amountOut, amountIn, path, to, deadline]\r\n          value = ZERO_HEX\r\n        } else {\r\n          methodName = 'swapTokensForExactTokens'\r\n          // (uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\r\n          args = options.isRouterFee ? [amountOut, amountIn, path, to, deadline, [options.amountFeeAddMore ?? \"0\"]] : [amountOut, amountIn, path, to, deadline]\r\n          value = ZERO_HEX\r\n        }\r\n        break\r\n    }\r\n    return {\r\n      methodName,\r\n      args,\r\n      value,\r\n    }\r\n  }\r\n}\r\n","import { Contract } from '@ethersproject/contracts'\r\nimport { getNetwork } from '@ethersproject/networks'\r\nimport { getDefaultProvider } from '@ethersproject/providers'\r\nimport { TokenAmount } from './entities/fractions/tokenAmount'\r\nimport { Pair } from './entities/pair'\r\nimport IPancakePair from '@pancakeswap-libs/pancake-swap-core/build/IPancakePair.json'\r\nimport invariant from 'tiny-invariant'\r\nimport ERC20 from './abis/ERC20.json'\r\nimport { ChainId } from './constants'\r\nimport { Token } from './entities/token'\r\n\r\nlet TOKEN_DECIMALS_CACHE: { [chainId: number]: { [address: string]: number } } = {\r\n  [ChainId.MAINNET]: {\r\n    '0xE0B7927c4aF23765Cb51314A0E0521A9645F0E2A': 9 // DGD\r\n  }\r\n}\r\n\r\n/**\r\n * Contains methods for constructing instances of pairs and tokens from on-chain data.\r\n */\r\nexport abstract class Fetcher {\r\n  /**\r\n   * Cannot be constructed.\r\n   */\r\n  private constructor() {}\r\n\r\n  /**\r\n   * Fetch information for a given token on the given chain, using the given ethers provider.\r\n   * @param chainId chain of the token\r\n   * @param address address of the token on the chain\r\n   * @param provider provider used to fetch the token\r\n   * @param symbol optional symbol of the token\r\n   * @param name optional name of the token\r\n   */\r\n  public static async fetchTokenData(\r\n    chainId: ChainId,\r\n    address: string,\r\n    provider = getDefaultProvider(getNetwork(chainId)),\r\n    symbol?: string,\r\n    name?: string\r\n  ): Promise<Token> {\r\n    const parsedDecimals =\r\n      typeof TOKEN_DECIMALS_CACHE?.[chainId]?.[address] === 'number'\r\n        ? TOKEN_DECIMALS_CACHE[chainId][address]\r\n        : await new Contract(address, ERC20, provider).decimals().then((decimals: number): number => {\r\n            TOKEN_DECIMALS_CACHE = {\r\n              ...TOKEN_DECIMALS_CACHE,\r\n              [chainId]: {\r\n                ...TOKEN_DECIMALS_CACHE?.[chainId],\r\n                [address]: decimals\r\n              }\r\n            }\r\n            return decimals\r\n          })\r\n    return new Token(chainId, address, parsedDecimals, symbol, name)\r\n  }\r\n\r\n  /**\r\n   * Fetches information about a pair and constructs a pair from the given two tokens.\r\n   * @param tokenA first token\r\n   * @param tokenB second token\r\n   * @param provider the provider to use to fetch the data\r\n   */\r\n  public static async fetchPairData(\r\n    tokenA: Token,\r\n    tokenB: Token,\r\n    provider = getDefaultProvider(getNetwork(tokenA.chainId))\r\n  ): Promise<Pair> {\r\n    invariant(tokenA.chainId === tokenB.chainId, 'CHAIN_ID')\r\n    const address = Pair.getAddress(tokenA, tokenB)\r\n    const [reserves0, reserves1] = await new Contract(address, IPancakePair.abi, provider).getReserves()\r\n    const balances = tokenA.sortsBefore(tokenB) ? [reserves0, reserves1] : [reserves1, reserves0]\r\n    return new Pair(new TokenAmount(tokenA, balances[0]), new TokenAmount(tokenB, balances[1]))\r\n  }\r\n}\r\n"],"names":["ChainId","TradeType","Rounding","SolidityType","INIT_CODE_HASH","MINIMUM_LIQUIDITY","JSBI","BigInt","ZERO","ONE","TWO","THREE","FIVE","TEN","_100","FEES_NUMERATOR","FEES_DENOMINATOR","SOLIDITY_TYPE_MAXIMA","_SOLIDITY_TYPE_MAXIMA","uint8","uint256","CAN_SET_PROTOTYPE","Object","InsufficientReservesError","_Error","_this","call","name","constructor","setPrototypeOf","_assertThisInitialized","prototype","_inheritsLoose","_wrapNativeSuper","Error","InsufficientInputAmountError","_Error2","_this2","validateSolidityTypeInstance","value","solidityType","greaterThanOrEqual","invariant","lessThanOrEqual","validateAndParseAddress","address","getAddress","error","parseBigintIsh","bigintIsh","toString","sqrt","y","x","z","greaterThan","add","divide","lessThan","notEqual","sortedInsert","items","maxSize","comparator","length","push","isFull","lo","hi","mid","splice","pop","Currency","decimals","symbol","this","ETHER","Token","_Currency","chainId","_proto","equals","other","sortsBefore","toLowerCase","currencyEquals","currencyA","currencyB","WETH","_WETH","MAINNET","TESTNET","Decimal","toFormat","_Decimal","Big","_Big","toSignificantRounding","_toSignificantRoundin","ROUND_DOWN","ROUND_HALF_UP","ROUND_UP","toFixedRounding","_toFixedRounding","Fraction","numerator","denominator","invert","otherParsed","equal","multiply","subtract","equalTo","toSignificant","significantDigits","format","rounding","groupSeparator","Number","isInteger","set","precision","quotient","div","toSignificantDigits","decimalPlaces","toFixed","DP","RM","_createClass","key","get","remainder","CurrencyAmount","_Fraction","currency","amount","parsedAmount","exponentiate","ether","raw","toExact","TokenAmount","_CurrencyAmount","token","Price","baseCurrency","quoteCurrency","scalar","fromRoute","route","_step","prices","_iterator","_createForOfIteratorHelperLoose","pairs","entries","done","_step$value","pair","path","token0","reserve0","reserve1","slice","reduce","accumulator","currentValue","fraction","quote","currencyAmount","adjusted","PAIR_ADDRESS_CACHE","Pair","tokenAmountA","tokenAmountB","tokenAmounts","liquidityToken","tokenA","tokenB","_PAIR_ADDRESS_CACHE2","_extends2","_extends3","tokens","undefined","_PAIR_ADDRESS_CACHE","_PAIR_ADDRESS_CACHE$t","_extends","getCreate2Address","keccak256","pack","involvesToken","token1","priceOf","token0Price","token1Price","reserveOf","getOutputAmount","inputAmount","inputReserve","outputReserve","inputAmountWithFee","outputAmount","getInputAmount","getLiquidityMinted","totalSupply","liquidity","amount0","amount1","getLiquidityValue","feeOn","kLast","totalSupplyAdjusted","kLastParsed","rootK","rootKLast","feeLiquidity","Route","input","output","every","currentInput","midPrice","_100_PERCENT","Percent","apply","arguments","inputOutputComparator","a","b","tradeComparator","ioComp","priceImpact","wrappedAmount","wrappedCurrency","Trade","tradeType","exactQuote","slippage","amounts","Array","nextPairs","EXACT_INPUT","i","_pair$getOutputAmount","nextPair","_pair$getInputAmount","EXACT_OUTPUT","executionPrice","nextMidPrice","exactIn","amountIn","exactOut","amountOut","minimumAmountOut","slippageTolerance","slippageAdjustedAmountOut","maximumAmountIn","slippageAdjustedAmountIn","bestTradeExactIn","currencyAmountIn","currencyOut","_temp","currentPairs","originalAmountIn","bestTrades","_ref$maxNumResults","_ref","maxNumResults","_ref$maxHops","maxHops","tokenOut","isInsufficientInputAmountError","concat","pairsExcludingThisPair","bestTradeExactOut","currencyIn","currencyAmountOut","_temp2","originalAmountOut","_ref2$maxNumResults","_ref2","_ref2$maxHops","tokenIn","isInsufficientReservesError","toHex","Router","swapCallParameters","trade","options","etherIn","etherOut","ttl","methodName","args","to","recipient","allowedSlippage","map","deadline","Math","floor","Date","getTime","useFeeOnTransfer","Boolean","feeOnTransfer","_options$amountFeeAdd","isRouterFee","amountFeeAddMore","_options$amountFeeAdd2","_options$amountFeeAdd3","_options$amountFeeAdd4","_options$amountFeeAdd5","_options$amountFeeAdd6","TOKEN_DECIMALS_CACHE","_TOKEN_DECIMALS_CACHE","0xE0B7927c4aF23765Cb51314A0E0521A9645F0E2A","Fetcher","fetchTokenData","provider","parsedDecimals","getDefaultProvider","getNetwork","_TOKEN_DECIMALS_CACHE2","_TOKEN_DECIMALS_CACHE3","Promise","resolve","Contract","ERC20","then","_TOKEN_DECIMALS_CACHE4","e","reject","fetchPairData","IPancakePair","abi","getReserves","reserves0","reserves1","balances"],"mappings":"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"}