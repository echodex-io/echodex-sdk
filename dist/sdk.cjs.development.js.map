{"version":3,"file":"sdk.cjs.development.js","sources":["../src/constants.ts","../src/errors.ts","../src/utils.ts","../src/entities/currency.ts","../src/entities/token.ts","../src/entities/fractions/fraction.ts","../src/entities/fractions/currencyAmount.ts","../src/entities/fractions/tokenAmount.ts","../src/entities/fractions/price.ts","../src/entities/pair.ts","../src/entities/route.ts","../src/entities/fractions/percent.ts","../src/entities/trade.ts","../src/router.ts","../src/fetcher.ts"],"sourcesContent":["import JSBI from 'jsbi'\r\n\r\n// exports for external consumption\r\nexport type BigintIsh = JSBI | bigint | string\r\n\r\nexport enum ChainId {\r\n  MAINNET = 56,\r\n  TESTNET = 59140,\r\n}\r\n\r\nexport enum TradeType {\r\n  EXACT_INPUT,\r\n  EXACT_OUTPUT\r\n}\r\n\r\nexport enum Rounding {\r\n  ROUND_DOWN,\r\n  ROUND_HALF_UP,\r\n  ROUND_UP\r\n}\r\n\r\nexport const FACTORY_ADDRESS = '0x9942Ebb843Dc4Aeb3c08D959da568E7b91B98e25'\r\n\r\nexport const INIT_CODE_HASH = '0x2c001d8abc93bf6c8a30ab1127438517436bc30472a8d6e5cd77a81c9839a1ed'\r\n\r\nexport const MINIMUM_LIQUIDITY = JSBI.BigInt(1000)\r\n\r\n// exports for internal consumption\r\nexport const ZERO = JSBI.BigInt(0)\r\nexport const ONE = JSBI.BigInt(1)\r\nexport const TWO = JSBI.BigInt(2)\r\nexport const THREE = JSBI.BigInt(3)\r\nexport const FIVE = JSBI.BigInt(5)\r\nexport const TEN = JSBI.BigInt(10)\r\nexport const _100 = JSBI.BigInt(100)\r\nexport const FEES_NUMERATOR = JSBI.BigInt(9975)\r\nexport const FEES_DENOMINATOR = JSBI.BigInt(10000)\r\n\r\nexport enum SolidityType {\r\n  uint8 = 'uint8',\r\n  uint256 = 'uint256'\r\n}\r\n\r\nexport const SOLIDITY_TYPE_MAXIMA = {\r\n  [SolidityType.uint8]: JSBI.BigInt('0xff'),\r\n  [SolidityType.uint256]: JSBI.BigInt('0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff')\r\n}\r\n","// see https://stackoverflow.com/a/41102306\r\nconst CAN_SET_PROTOTYPE = 'setPrototypeOf' in Object\r\n\r\n/**\r\n * Indicates that the pair has insufficient reserves for a desired output amount. I.e. the amount of output cannot be\r\n * obtained by sending any amount of input.\r\n */\r\nexport class InsufficientReservesError extends Error {\r\n  public readonly isInsufficientReservesError: true = true\r\n\r\n  public constructor() {\r\n    super()\r\n    this.name = this.constructor.name\r\n    if (CAN_SET_PROTOTYPE) Object.setPrototypeOf(this, new.target.prototype)\r\n  }\r\n}\r\n\r\n/**\r\n * Indicates that the input amount is too small to produce any amount of output. I.e. the amount of input sent is less\r\n * than the price of a single unit of output after fees.\r\n */\r\nexport class InsufficientInputAmountError extends Error {\r\n  public readonly isInsufficientInputAmountError: true = true\r\n\r\n  public constructor() {\r\n    super()\r\n    this.name = this.constructor.name\r\n    if (CAN_SET_PROTOTYPE) Object.setPrototypeOf(this, new.target.prototype)\r\n  }\r\n}\r\n","import invariant from 'tiny-invariant'\r\nimport warning from 'tiny-warning'\r\nimport JSBI from 'jsbi'\r\nimport { getAddress } from '@ethersproject/address'\r\n\r\nimport { BigintIsh, ZERO, ONE, TWO, THREE, SolidityType, SOLIDITY_TYPE_MAXIMA } from './constants'\r\n\r\nexport function validateSolidityTypeInstance(value: JSBI, solidityType: SolidityType): void {\r\n  invariant(JSBI.greaterThanOrEqual(value, ZERO), `${value} is not a ${solidityType}.`)\r\n  invariant(JSBI.lessThanOrEqual(value, SOLIDITY_TYPE_MAXIMA[solidityType]), `${value} is not a ${solidityType}.`)\r\n}\r\n\r\n// warns if addresses are not checksummed\r\nexport function validateAndParseAddress(address: string): string {\r\n  try {\r\n    const checksummedAddress = getAddress(address)\r\n    warning(address === checksummedAddress, `${address} is not checksummed.`)\r\n    return checksummedAddress\r\n  } catch (error) {\r\n    invariant(false, `${address} is not a valid address.`)\r\n  }\r\n}\r\n\r\nexport function parseBigintIsh(bigintIsh: BigintIsh): JSBI {\r\n  return bigintIsh instanceof JSBI\r\n    ? bigintIsh\r\n    : typeof bigintIsh === 'bigint'\r\n    ? JSBI.BigInt(bigintIsh.toString())\r\n    : JSBI.BigInt(bigintIsh)\r\n}\r\n\r\n// mock the on-chain sqrt function\r\nexport function sqrt(y: JSBI): JSBI {\r\n  validateSolidityTypeInstance(y, SolidityType.uint256)\r\n  let z: JSBI = ZERO\r\n  let x: JSBI\r\n  if (JSBI.greaterThan(y, THREE)) {\r\n    z = y\r\n    x = JSBI.add(JSBI.divide(y, TWO), ONE)\r\n    while (JSBI.lessThan(x, z)) {\r\n      z = x\r\n      x = JSBI.divide(JSBI.add(JSBI.divide(y, x), x), TWO)\r\n    }\r\n  } else if (JSBI.notEqual(y, ZERO)) {\r\n    z = ONE\r\n  }\r\n  return z\r\n}\r\n\r\n// given an array of items sorted by `comparator`, insert an item into its sort index and constrain the size to\r\n// `maxSize` by removing the last item\r\nexport function sortedInsert<T>(items: T[], add: T, maxSize: number, comparator: (a: T, b: T) => number): T | null {\r\n  invariant(maxSize > 0, 'MAX_SIZE_ZERO')\r\n  // this is an invariant because the interface cannot return multiple removed items if items.length exceeds maxSize\r\n  invariant(items.length <= maxSize, 'ITEMS_SIZE')\r\n\r\n  // short circuit first item add\r\n  if (items.length === 0) {\r\n    items.push(add)\r\n    return null\r\n  } else {\r\n    const isFull = items.length === maxSize\r\n    // short circuit if full and the additional item does not come before the last item\r\n    if (isFull && comparator(items[items.length - 1], add) <= 0) {\r\n      return add\r\n    }\r\n\r\n    let lo = 0,\r\n      hi = items.length\r\n\r\n    while (lo < hi) {\r\n      const mid = (lo + hi) >>> 1\r\n      if (comparator(items[mid], add) <= 0) {\r\n        lo = mid + 1\r\n      } else {\r\n        hi = mid\r\n      }\r\n    }\r\n    items.splice(lo, 0, add)\r\n    return isFull ? items.pop()! : null\r\n  }\r\n}\r\n","import JSBI from 'jsbi'\r\n\r\nimport { SolidityType } from '../constants'\r\nimport { validateSolidityTypeInstance } from '../utils'\r\n\r\n/**\r\n * A currency is any fungible financial instrument on Ethereum, including Ether and all ERC20 tokens.\r\n *\r\n * The only instance of the base class `Currency` is Ether.\r\n */\r\nexport class Currency {\r\n  public readonly decimals: number\r\n  public readonly symbol?: string\r\n  public readonly name?: string\r\n\r\n  /**\r\n   * The only instance of the base class `Currency`.\r\n   */\r\n  public static readonly ETHER: Currency = new Currency(18, 'ETH', 'ETH')\r\n\r\n  /**\r\n   * Constructs an instance of the base class `Currency`. The only instance of the base class `Currency` is `Currency.ETHER`.\r\n   * @param decimals decimals of the currency\r\n   * @param symbol symbol of the currency\r\n   * @param name of the currency\r\n   */\r\n  protected constructor(decimals: number, symbol?: string, name?: string) {\r\n    validateSolidityTypeInstance(JSBI.BigInt(decimals), SolidityType.uint8)\r\n\r\n    this.decimals = decimals\r\n    this.symbol = symbol\r\n    this.name = name\r\n  }\r\n}\r\n\r\nconst ETHER = Currency.ETHER\r\nexport { ETHER }\r\n","import invariant from 'tiny-invariant'\r\nimport { ChainId } from '../constants'\r\nimport { validateAndParseAddress } from '../utils'\r\nimport { Currency } from './currency'\r\n\r\n/**\r\n * Represents an ERC20 token with a unique address and some metadata.\r\n */\r\nexport class Token extends Currency {\r\n  public readonly chainId: ChainId\r\n  public readonly address: string\r\n\r\n  public constructor(chainId: ChainId, address: string, decimals: number, symbol?: string, name?: string) {\r\n    super(decimals, symbol, name)\r\n    this.chainId = chainId\r\n    this.address = validateAndParseAddress(address)\r\n  }\r\n\r\n  /**\r\n   * Returns true if the two tokens are equivalent, i.e. have the same chainId and address.\r\n   * @param other other token to compare\r\n   */\r\n  public equals(other: Token): boolean {\r\n    // short circuit on reference equality\r\n    if (this === other) {\r\n      return true\r\n    }\r\n    return this.chainId === other.chainId && this.address === other.address\r\n  }\r\n\r\n  /**\r\n   * Returns true if the address of this token sorts before the address of the other token\r\n   * @param other other token to compare\r\n   * @throws if the tokens have the same address\r\n   * @throws if the tokens are on different chains\r\n   */\r\n  public sortsBefore(other: Token): boolean {\r\n    invariant(this.chainId === other.chainId, 'CHAIN_IDS')\r\n    invariant(this.address !== other.address, 'ADDRESSES')\r\n    return this.address.toLowerCase() < other.address.toLowerCase()\r\n  }\r\n}\r\n\r\n/**\r\n * Compares two currencies for equality\r\n */\r\nexport function currencyEquals(currencyA: Currency, currencyB: Currency): boolean {\r\n  if (currencyA instanceof Token && currencyB instanceof Token) {\r\n    return currencyA.equals(currencyB)\r\n  } else if (currencyA instanceof Token) {\r\n    return false\r\n  } else if (currencyB instanceof Token) {\r\n    return false\r\n  } else {\r\n    return currencyA === currencyB\r\n  }\r\n}\r\n\r\nexport const WETH = {\r\n  [ChainId.MAINNET]: new Token(\r\n    ChainId.MAINNET,\r\n    '0xae13d989daC2f0dEbFf460aC112a837C89BAa7cd',\r\n    18,\r\n    'WBNB',\r\n    'Wrapped BNB'\r\n  ),\r\n  [ChainId.TESTNET]: new Token(ChainId.TESTNET, '0x2c1b868d6596a18e32e61b901e4060c872647b6c', 18, 'WETH', 'Wrapped ETH')\r\n}","import invariant from 'tiny-invariant'\r\nimport JSBI from 'jsbi'\r\nimport _Decimal from 'decimal.js-light'\r\nimport _Big, { RoundingMode } from 'big.js'\r\nimport toFormat from 'toformat'\r\n\r\nimport { BigintIsh, Rounding } from '../../constants'\r\nimport { ONE } from '../../constants'\r\nimport { parseBigintIsh } from '../../utils'\r\n\r\nconst Decimal = toFormat(_Decimal)\r\nconst Big = toFormat(_Big)\r\n\r\nconst toSignificantRounding = {\r\n  [Rounding.ROUND_DOWN]: Decimal.ROUND_DOWN,\r\n  [Rounding.ROUND_HALF_UP]: Decimal.ROUND_HALF_UP,\r\n  [Rounding.ROUND_UP]: Decimal.ROUND_UP\r\n}\r\n\r\nconst toFixedRounding = {\r\n  [Rounding.ROUND_DOWN]: RoundingMode.RoundDown,\r\n  [Rounding.ROUND_HALF_UP]: RoundingMode.RoundHalfUp,\r\n  [Rounding.ROUND_UP]: RoundingMode.RoundUp\r\n}\r\n\r\nexport class Fraction {\r\n  public readonly numerator: JSBI\r\n  public readonly denominator: JSBI\r\n\r\n  public constructor(numerator: BigintIsh, denominator: BigintIsh = ONE) {\r\n    this.numerator = parseBigintIsh(numerator)\r\n    this.denominator = parseBigintIsh(denominator)\r\n  }\r\n\r\n  // performs floor division\r\n  public get quotient(): JSBI {\r\n    return JSBI.divide(this.numerator, this.denominator)\r\n  }\r\n\r\n  // remainder after floor division\r\n  public get remainder(): Fraction {\r\n    return new Fraction(JSBI.remainder(this.numerator, this.denominator), this.denominator)\r\n  }\r\n\r\n  public invert(): Fraction {\r\n    return new Fraction(this.denominator, this.numerator)\r\n  }\r\n\r\n  public add(other: Fraction | BigintIsh): Fraction {\r\n    const otherParsed = other instanceof Fraction ? other : new Fraction(parseBigintIsh(other))\r\n    if (JSBI.equal(this.denominator, otherParsed.denominator)) {\r\n      return new Fraction(JSBI.add(this.numerator, otherParsed.numerator), this.denominator)\r\n    }\r\n    return new Fraction(\r\n      JSBI.add(\r\n        JSBI.multiply(this.numerator, otherParsed.denominator),\r\n        JSBI.multiply(otherParsed.numerator, this.denominator)\r\n      ),\r\n      JSBI.multiply(this.denominator, otherParsed.denominator)\r\n    )\r\n  }\r\n\r\n  public subtract(other: Fraction | BigintIsh): Fraction {\r\n    const otherParsed = other instanceof Fraction ? other : new Fraction(parseBigintIsh(other))\r\n    if (JSBI.equal(this.denominator, otherParsed.denominator)) {\r\n      return new Fraction(JSBI.subtract(this.numerator, otherParsed.numerator), this.denominator)\r\n    }\r\n    return new Fraction(\r\n      JSBI.subtract(\r\n        JSBI.multiply(this.numerator, otherParsed.denominator),\r\n        JSBI.multiply(otherParsed.numerator, this.denominator)\r\n      ),\r\n      JSBI.multiply(this.denominator, otherParsed.denominator)\r\n    )\r\n  }\r\n\r\n  public lessThan(other: Fraction | BigintIsh): boolean {\r\n    const otherParsed = other instanceof Fraction ? other : new Fraction(parseBigintIsh(other))\r\n    return JSBI.lessThan(\r\n      JSBI.multiply(this.numerator, otherParsed.denominator),\r\n      JSBI.multiply(otherParsed.numerator, this.denominator)\r\n    )\r\n  }\r\n\r\n  public equalTo(other: Fraction | BigintIsh): boolean {\r\n    const otherParsed = other instanceof Fraction ? other : new Fraction(parseBigintIsh(other))\r\n    return JSBI.equal(\r\n      JSBI.multiply(this.numerator, otherParsed.denominator),\r\n      JSBI.multiply(otherParsed.numerator, this.denominator)\r\n    )\r\n  }\r\n\r\n  public greaterThan(other: Fraction | BigintIsh): boolean {\r\n    const otherParsed = other instanceof Fraction ? other : new Fraction(parseBigintIsh(other))\r\n    return JSBI.greaterThan(\r\n      JSBI.multiply(this.numerator, otherParsed.denominator),\r\n      JSBI.multiply(otherParsed.numerator, this.denominator)\r\n    )\r\n  }\r\n\r\n  public multiply(other: Fraction | BigintIsh): Fraction {\r\n    const otherParsed = other instanceof Fraction ? other : new Fraction(parseBigintIsh(other))\r\n    return new Fraction(\r\n      JSBI.multiply(this.numerator, otherParsed.numerator),\r\n      JSBI.multiply(this.denominator, otherParsed.denominator)\r\n    )\r\n  }\r\n\r\n  public divide(other: Fraction | BigintIsh): Fraction {\r\n    const otherParsed = other instanceof Fraction ? other : new Fraction(parseBigintIsh(other))\r\n    return new Fraction(\r\n      JSBI.multiply(this.numerator, otherParsed.denominator),\r\n      JSBI.multiply(this.denominator, otherParsed.numerator)\r\n    )\r\n  }\r\n\r\n  public toSignificant(\r\n    significantDigits: number,\r\n    format: object = { groupSeparator: '' },\r\n    rounding: Rounding = Rounding.ROUND_HALF_UP\r\n  ): string {\r\n    invariant(Number.isInteger(significantDigits), `${significantDigits} is not an integer.`)\r\n    invariant(significantDigits > 0, `${significantDigits} is not positive.`)\r\n\r\n    Decimal.set({ precision: significantDigits + 1, rounding: toSignificantRounding[rounding] })\r\n    const quotient = new Decimal(this.numerator.toString())\r\n      .div(this.denominator.toString())\r\n      .toSignificantDigits(significantDigits)\r\n    return quotient.toFormat(quotient.decimalPlaces(), format)\r\n  }\r\n\r\n  public toFixed(\r\n    decimalPlaces: number,\r\n    format: object = { groupSeparator: '' },\r\n    rounding: Rounding = Rounding.ROUND_HALF_UP\r\n  ): string {\r\n    invariant(Number.isInteger(decimalPlaces), `${decimalPlaces} is not an integer.`)\r\n    invariant(decimalPlaces >= 0, `${decimalPlaces} is negative.`)\r\n\r\n    Big.DP = decimalPlaces\r\n    Big.RM = toFixedRounding[rounding]\r\n    return new Big(this.numerator.toString()).div(this.denominator.toString()).toFormat(decimalPlaces, format)\r\n  }\r\n}\r\n","import { currencyEquals } from '../token'\r\nimport { Currency, ETHER } from '../currency'\r\nimport invariant from 'tiny-invariant'\r\nimport JSBI from 'jsbi'\r\nimport _Big from 'big.js'\r\nimport toFormat from 'toformat'\r\n\r\nimport { BigintIsh, Rounding, TEN, SolidityType } from '../../constants'\r\nimport { parseBigintIsh, validateSolidityTypeInstance } from '../../utils'\r\nimport { Fraction } from './fraction'\r\n\r\nconst Big = toFormat(_Big)\r\n\r\nexport class CurrencyAmount extends Fraction {\r\n  public readonly currency: Currency\r\n\r\n  /**\r\n   * Helper that calls the constructor with the ETHER currency\r\n   * @param amount ether amount in wei\r\n   */\r\n  public static ether(amount: BigintIsh): CurrencyAmount {\r\n    return new CurrencyAmount(ETHER, amount)\r\n  }\r\n\r\n  // amount _must_ be raw, i.e. in the native representation\r\n  protected constructor(currency: Currency, amount: BigintIsh) {\r\n    const parsedAmount = parseBigintIsh(amount)\r\n    validateSolidityTypeInstance(parsedAmount, SolidityType.uint256)\r\n\r\n    super(parsedAmount, JSBI.exponentiate(TEN, JSBI.BigInt(currency.decimals)))\r\n    this.currency = currency\r\n  }\r\n\r\n  public get raw(): JSBI {\r\n    return this.numerator\r\n  }\r\n\r\n  public add(other: CurrencyAmount): CurrencyAmount {\r\n    invariant(currencyEquals(this.currency, other.currency), 'TOKEN')\r\n    return new CurrencyAmount(this.currency, JSBI.add(this.raw, other.raw))\r\n  }\r\n\r\n  public subtract(other: CurrencyAmount): CurrencyAmount {\r\n    invariant(currencyEquals(this.currency, other.currency), 'TOKEN')\r\n    return new CurrencyAmount(this.currency, JSBI.subtract(this.raw, other.raw))\r\n  }\r\n\r\n  public toSignificant(\r\n    significantDigits: number = 6,\r\n    format?: object,\r\n    rounding: Rounding = Rounding.ROUND_DOWN\r\n  ): string {\r\n    return super.toSignificant(significantDigits, format, rounding)\r\n  }\r\n\r\n  public toFixed(\r\n    decimalPlaces: number = this.currency.decimals,\r\n    format?: object,\r\n    rounding: Rounding = Rounding.ROUND_DOWN\r\n  ): string {\r\n    invariant(decimalPlaces <= this.currency.decimals, 'DECIMALS')\r\n    return super.toFixed(decimalPlaces, format, rounding)\r\n  }\r\n\r\n  public toExact(format: object = { groupSeparator: '' }): string {\r\n    Big.DP = this.currency.decimals\r\n    return new Big(this.numerator.toString()).div(this.denominator.toString()).toFormat(format)\r\n  }\r\n}\r\n","import { CurrencyAmount } from './currencyAmount'\r\nimport { Token } from '../token'\r\nimport invariant from 'tiny-invariant'\r\nimport JSBI from 'jsbi'\r\n\r\nimport { BigintIsh } from '../../constants'\r\n\r\nexport class TokenAmount extends CurrencyAmount {\r\n  public readonly token: Token\r\n\r\n  // amount _must_ be raw, i.e. in the native representation\r\n  public constructor(token: Token, amount: BigintIsh) {\r\n    super(token, amount)\r\n    this.token = token\r\n  }\r\n\r\n  public add(other: TokenAmount): TokenAmount {\r\n    invariant(this.token.equals(other.token), 'TOKEN')\r\n    return new TokenAmount(this.token, JSBI.add(this.raw, other.raw))\r\n  }\r\n\r\n  public subtract(other: TokenAmount): TokenAmount {\r\n    invariant(this.token.equals(other.token), 'TOKEN')\r\n    return new TokenAmount(this.token, JSBI.subtract(this.raw, other.raw))\r\n  }\r\n}\r\n","import { Token } from '../token'\r\nimport { TokenAmount } from './tokenAmount'\r\nimport { currencyEquals } from '../token'\r\nimport invariant from 'tiny-invariant'\r\nimport JSBI from 'jsbi'\r\n\r\nimport { BigintIsh, Rounding, TEN } from '../../constants'\r\nimport { Currency } from '../currency'\r\nimport { Route } from '../route'\r\nimport { Fraction } from './fraction'\r\nimport { CurrencyAmount } from './currencyAmount'\r\n\r\nexport class Price extends Fraction {\r\n  public readonly baseCurrency: Currency // input i.e. denominator\r\n  public readonly quoteCurrency: Currency // output i.e. numerator\r\n  public readonly scalar: Fraction // used to adjust the raw fraction w/r/t the decimals of the {base,quote}Token\r\n\r\n  public static fromRoute(route: Route): Price {\r\n    const prices: Price[] = []\r\n    for (const [i, pair] of route.pairs.entries()) {\r\n      prices.push(\r\n        route.path[i].equals(pair.token0)\r\n          ? new Price(pair.reserve0.currency, pair.reserve1.currency, pair.reserve0.raw, pair.reserve1.raw)\r\n          : new Price(pair.reserve1.currency, pair.reserve0.currency, pair.reserve1.raw, pair.reserve0.raw)\r\n      )\r\n    }\r\n    return prices.slice(1).reduce((accumulator, currentValue) => accumulator.multiply(currentValue), prices[0])\r\n  }\r\n\r\n  // denominator and numerator _must_ be raw, i.e. in the native representation\r\n  public constructor(baseCurrency: Currency, quoteCurrency: Currency, denominator: BigintIsh, numerator: BigintIsh) {\r\n    super(numerator, denominator)\r\n\r\n    this.baseCurrency = baseCurrency\r\n    this.quoteCurrency = quoteCurrency\r\n    this.scalar = new Fraction(\r\n      JSBI.exponentiate(TEN, JSBI.BigInt(baseCurrency.decimals)),\r\n      JSBI.exponentiate(TEN, JSBI.BigInt(quoteCurrency.decimals))\r\n    )\r\n  }\r\n\r\n  public get raw(): Fraction {\r\n    return new Fraction(this.numerator, this.denominator)\r\n  }\r\n\r\n  public get adjusted(): Fraction {\r\n    return super.multiply(this.scalar)\r\n  }\r\n\r\n  public invert(): Price {\r\n    return new Price(this.quoteCurrency, this.baseCurrency, this.numerator, this.denominator)\r\n  }\r\n\r\n  public multiply(other: Price): Price {\r\n    invariant(currencyEquals(this.quoteCurrency, other.baseCurrency), 'TOKEN')\r\n    const fraction = super.multiply(other)\r\n    return new Price(this.baseCurrency, other.quoteCurrency, fraction.denominator, fraction.numerator)\r\n  }\r\n\r\n  // performs floor division on overflow\r\n  public quote(currencyAmount: CurrencyAmount): CurrencyAmount {\r\n    invariant(currencyEquals(currencyAmount.currency, this.baseCurrency), 'TOKEN')\r\n    if (this.quoteCurrency instanceof Token) {\r\n      return new TokenAmount(this.quoteCurrency, super.multiply(currencyAmount.raw).quotient)\r\n    }\r\n    return CurrencyAmount.ether(super.multiply(currencyAmount.raw).quotient)\r\n  }\r\n\r\n  public toSignificant(significantDigits: number = 6, format?: object, rounding?: Rounding): string {\r\n    return this.adjusted.toSignificant(significantDigits, format, rounding)\r\n  }\r\n\r\n  public toFixed(decimalPlaces: number = 4, format?: object, rounding?: Rounding): string {\r\n    return this.adjusted.toFixed(decimalPlaces, format, rounding)\r\n  }\r\n}\r\n","import { Price } from './fractions/price'\r\nimport { TokenAmount } from './fractions/tokenAmount'\r\nimport invariant from 'tiny-invariant'\r\nimport JSBI from 'jsbi'\r\nimport { pack, keccak256 } from '@ethersproject/solidity'\r\nimport { getCreate2Address } from '@ethersproject/address'\r\n\r\nimport {\r\n  BigintIsh,\r\n  FACTORY_ADDRESS,\r\n  INIT_CODE_HASH,\r\n  MINIMUM_LIQUIDITY,\r\n  ZERO,\r\n  ONE,\r\n  FIVE,\r\n  ChainId,\r\n} from '../constants'\r\nimport { sqrt, parseBigintIsh } from '../utils'\r\nimport { InsufficientReservesError, InsufficientInputAmountError } from '../errors'\r\nimport { Token } from './token'\r\n\r\nlet PAIR_ADDRESS_CACHE: { [token0Address: string]: { [token1Address: string]: string } } = {}\r\n\r\nexport class Pair {\r\n  public readonly liquidityToken: Token\r\n  private readonly tokenAmounts: [TokenAmount, TokenAmount]\r\n\r\n  public static getAddress(tokenA: Token, tokenB: Token): string {\r\n    const tokens = tokenA.sortsBefore(tokenB) ? [tokenA, tokenB] : [tokenB, tokenA] // does safety checks\r\n\r\n    if (PAIR_ADDRESS_CACHE?.[tokens[0].address]?.[tokens[1].address] === undefined) {\r\n      PAIR_ADDRESS_CACHE = {\r\n        ...PAIR_ADDRESS_CACHE,\r\n        [tokens[0].address]: {\r\n          ...PAIR_ADDRESS_CACHE?.[tokens[0].address],\r\n          [tokens[1].address]: getCreate2Address(\r\n            FACTORY_ADDRESS,\r\n            keccak256(['bytes'], [pack(['address', 'address'], [tokens[0].address, tokens[1].address])]),\r\n            INIT_CODE_HASH\r\n          ),\r\n        },\r\n      }\r\n    }\r\n\r\n    return PAIR_ADDRESS_CACHE[tokens[0].address][tokens[1].address]\r\n  }\r\n\r\n  public constructor(tokenAmountA: TokenAmount, tokenAmountB: TokenAmount) {\r\n    const tokenAmounts = tokenAmountA.token.sortsBefore(tokenAmountB.token) // does safety checks\r\n      ? [tokenAmountA, tokenAmountB]\r\n      : [tokenAmountB, tokenAmountA]\r\n    this.liquidityToken = new Token(\r\n      tokenAmounts[0].token.chainId,\r\n      Pair.getAddress(tokenAmounts[0].token, tokenAmounts[1].token),\r\n      18,\r\n      'Echodex-LP',\r\n      'Echodex LPs'\r\n    )\r\n    this.tokenAmounts = tokenAmounts as [TokenAmount, TokenAmount]\r\n  }\r\n\r\n  /**\r\n   * Returns true if the token is either token0 or token1\r\n   * @param token to check\r\n   */\r\n  public involvesToken(token: Token): boolean {\r\n    return token.equals(this.token0) || token.equals(this.token1)\r\n  }\r\n\r\n  /**\r\n   * Returns the current mid price of the pair in terms of token0, i.e. the ratio of reserve1 to reserve0\r\n   */\r\n  public get token0Price(): Price {\r\n    return new Price(this.token0, this.token1, this.tokenAmounts[0].raw, this.tokenAmounts[1].raw)\r\n  }\r\n\r\n  /**\r\n   * Returns the current mid price of the pair in terms of token1, i.e. the ratio of reserve0 to reserve1\r\n   */\r\n  public get token1Price(): Price {\r\n    return new Price(this.token1, this.token0, this.tokenAmounts[1].raw, this.tokenAmounts[0].raw)\r\n  }\r\n\r\n  /**\r\n   * Return the price of the given token in terms of the other token in the pair.\r\n   * @param token token to return price of\r\n   */\r\n  public priceOf(token: Token): Price {\r\n    invariant(this.involvesToken(token), 'TOKEN')\r\n    return token.equals(this.token0) ? this.token0Price : this.token1Price\r\n  }\r\n\r\n  /**\r\n   * Returns the chain ID of the tokens in the pair.\r\n   */\r\n  public get chainId(): ChainId {\r\n    return this.token0.chainId\r\n  }\r\n\r\n  public get token0(): Token {\r\n    return this.tokenAmounts[0].token\r\n  }\r\n\r\n  public get token1(): Token {\r\n    return this.tokenAmounts[1].token\r\n  }\r\n\r\n  public get reserve0(): TokenAmount {\r\n    return this.tokenAmounts[0]\r\n  }\r\n\r\n  public get reserve1(): TokenAmount {\r\n    return this.tokenAmounts[1]\r\n  }\r\n\r\n  public reserveOf(token: Token): TokenAmount {\r\n    invariant(this.involvesToken(token), 'TOKEN')\r\n    return token.equals(this.token0) ? this.reserve0 : this.reserve1\r\n  }\r\n\r\n  public getOutputAmount(inputAmount: TokenAmount): [TokenAmount, Pair] {\r\n    invariant(this.involvesToken(inputAmount.token), 'TOKEN')\r\n    if (JSBI.equal(this.reserve0.raw, ZERO) || JSBI.equal(this.reserve1.raw, ZERO)) {\r\n      throw new InsufficientReservesError()\r\n    }\r\n    const inputReserve = this.reserveOf(inputAmount.token)\r\n    const outputReserve = this.reserveOf(inputAmount.token.equals(this.token0) ? this.token1 : this.token0)\r\n    const numerator = JSBI.multiply(inputAmount.raw, outputReserve.raw)\r\n    const denominator = JSBI.add(inputReserve.raw, inputAmount.raw)\r\n    const outputAmount = new TokenAmount(\r\n      inputAmount.token.equals(this.token0) ? this.token1 : this.token0,\r\n      JSBI.divide(numerator, denominator)\r\n    )\r\n    if (JSBI.equal(outputAmount.raw, ZERO)) {\r\n      throw new InsufficientInputAmountError()\r\n    }\r\n    return [outputAmount, new Pair(inputReserve.add(inputAmount), outputReserve.subtract(outputAmount))]\r\n  }\r\n\r\n  public getInputAmount(outputAmount: TokenAmount): [TokenAmount, Pair] {\r\n    invariant(this.involvesToken(outputAmount.token), 'TOKEN')\r\n    if (\r\n      JSBI.equal(this.reserve0.raw, ZERO) ||\r\n      JSBI.equal(this.reserve1.raw, ZERO) ||\r\n      JSBI.greaterThanOrEqual(outputAmount.raw, this.reserveOf(outputAmount.token).raw)\r\n    ) {\r\n      throw new InsufficientReservesError()\r\n    }\r\n\r\n    const outputReserve = this.reserveOf(outputAmount.token)\r\n    const inputReserve = this.reserveOf(outputAmount.token.equals(this.token0) ? this.token1 : this.token0)\r\n    const numerator = JSBI.multiply(inputReserve.raw, outputAmount.raw)\r\n    const denominator = JSBI.subtract(outputReserve.raw, outputAmount.raw)\r\n    const inputAmount = new TokenAmount(\r\n      outputAmount.token.equals(this.token0) ? this.token1 : this.token0,\r\n      JSBI.add(JSBI.divide(numerator, denominator), ONE)\r\n    )\r\n    return [inputAmount, new Pair(inputReserve.add(inputAmount), outputReserve.subtract(outputAmount))]\r\n  }\r\n\r\n  public getLiquidityMinted(\r\n    totalSupply: TokenAmount,\r\n    tokenAmountA: TokenAmount,\r\n    tokenAmountB: TokenAmount\r\n  ): TokenAmount {\r\n    invariant(totalSupply.token.equals(this.liquidityToken), 'LIQUIDITY')\r\n    const tokenAmounts = tokenAmountA.token.sortsBefore(tokenAmountB.token) // does safety checks\r\n      ? [tokenAmountA, tokenAmountB]\r\n      : [tokenAmountB, tokenAmountA]\r\n    invariant(tokenAmounts[0].token.equals(this.token0) && tokenAmounts[1].token.equals(this.token1), 'TOKEN')\r\n\r\n    let liquidity: JSBI\r\n    if (JSBI.equal(totalSupply.raw, ZERO)) {\r\n      liquidity = JSBI.subtract(sqrt(JSBI.multiply(tokenAmounts[0].raw, tokenAmounts[1].raw)), MINIMUM_LIQUIDITY)\r\n    } else {\r\n      const amount0 = JSBI.divide(JSBI.multiply(tokenAmounts[0].raw, totalSupply.raw), this.reserve0.raw)\r\n      const amount1 = JSBI.divide(JSBI.multiply(tokenAmounts[1].raw, totalSupply.raw), this.reserve1.raw)\r\n      liquidity = JSBI.lessThanOrEqual(amount0, amount1) ? amount0 : amount1\r\n    }\r\n    if (!JSBI.greaterThan(liquidity, ZERO)) {\r\n      throw new InsufficientInputAmountError()\r\n    }\r\n    return new TokenAmount(this.liquidityToken, liquidity)\r\n  }\r\n\r\n  public getLiquidityValue(\r\n    token: Token,\r\n    totalSupply: TokenAmount,\r\n    liquidity: TokenAmount,\r\n    feeOn: boolean = false,\r\n    kLast?: BigintIsh\r\n  ): TokenAmount {\r\n    invariant(this.involvesToken(token), 'TOKEN')\r\n    invariant(totalSupply.token.equals(this.liquidityToken), 'TOTAL_SUPPLY')\r\n    invariant(liquidity.token.equals(this.liquidityToken), 'LIQUIDITY')\r\n    invariant(JSBI.lessThanOrEqual(liquidity.raw, totalSupply.raw), 'LIQUIDITY')\r\n\r\n    let totalSupplyAdjusted: TokenAmount\r\n    if (!feeOn) {\r\n      totalSupplyAdjusted = totalSupply\r\n    } else {\r\n      invariant(!!kLast, 'K_LAST')\r\n      const kLastParsed = parseBigintIsh(kLast)\r\n      if (!JSBI.equal(kLastParsed, ZERO)) {\r\n        const rootK = sqrt(JSBI.multiply(this.reserve0.raw, this.reserve1.raw))\r\n        const rootKLast = sqrt(kLastParsed)\r\n        if (JSBI.greaterThan(rootK, rootKLast)) {\r\n          const numerator = JSBI.multiply(totalSupply.raw, JSBI.subtract(rootK, rootKLast))\r\n          const denominator = JSBI.add(JSBI.multiply(rootK, FIVE), rootKLast)\r\n          const feeLiquidity = JSBI.divide(numerator, denominator)\r\n          totalSupplyAdjusted = totalSupply.add(new TokenAmount(this.liquidityToken, feeLiquidity))\r\n        } else {\r\n          totalSupplyAdjusted = totalSupply\r\n        }\r\n      } else {\r\n        totalSupplyAdjusted = totalSupply\r\n      }\r\n    }\r\n\r\n    return new TokenAmount(\r\n      token,\r\n      JSBI.divide(JSBI.multiply(liquidity.raw, this.reserveOf(token).raw), totalSupplyAdjusted.raw)\r\n    )\r\n  }\r\n}\r\n","import { ChainId } from '../constants'\r\nimport invariant from 'tiny-invariant'\r\n\r\nimport { Currency, ETHER } from './currency'\r\nimport { Token, WETH } from './token'\r\nimport { Pair } from './pair'\r\nimport { Price } from './fractions/price'\r\n\r\nexport class Route {\r\n  public readonly pairs: Pair[]\r\n  public readonly path: Token[]\r\n  public readonly input: Currency\r\n  public readonly output: Currency\r\n  public readonly midPrice: Price\r\n\r\n  public constructor(pairs: Pair[], input: Currency, output?: Currency) {\r\n    invariant(pairs.length > 0, 'PAIRS')\r\n    invariant(\r\n      pairs.every(pair => pair.chainId === pairs[0].chainId),\r\n      'CHAIN_IDS'\r\n    )\r\n    invariant(\r\n      (input instanceof Token && pairs[0].involvesToken(input)) ||\r\n        (input === ETHER && pairs[0].involvesToken(WETH[pairs[0].chainId])),\r\n      'INPUT'\r\n    )\r\n    invariant(\r\n      typeof output === 'undefined' ||\r\n        (output instanceof Token && pairs[pairs.length - 1].involvesToken(output)) ||\r\n        (output === ETHER && pairs[pairs.length - 1].involvesToken(WETH[pairs[0].chainId])),\r\n      'OUTPUT'\r\n    )\r\n\r\n    const path: Token[] = [input instanceof Token ? input : WETH[pairs[0].chainId]]\r\n    for (const [i, pair] of pairs.entries()) {\r\n      const currentInput = path[i]\r\n      invariant(currentInput.equals(pair.token0) || currentInput.equals(pair.token1), 'PATH')\r\n      const output = currentInput.equals(pair.token0) ? pair.token1 : pair.token0\r\n      path.push(output)\r\n    }\r\n\r\n    this.pairs = pairs\r\n    this.path = path\r\n    this.midPrice = Price.fromRoute(this)\r\n    this.input = input\r\n    this.output = output ?? path[path.length - 1]\r\n  }\r\n\r\n  public get chainId(): ChainId {\r\n    return this.pairs[0].chainId\r\n  }\r\n}\r\n","import { Rounding, _100 } from '../../constants'\r\nimport { Fraction } from './fraction'\r\n\r\nconst _100_PERCENT = new Fraction(_100)\r\n\r\nexport class Percent extends Fraction {\r\n  public toSignificant(significantDigits: number = 5, format?: object, rounding?: Rounding): string {\r\n    return this.multiply(_100_PERCENT).toSignificant(significantDigits, format, rounding)\r\n  }\r\n\r\n  public toFixed(decimalPlaces: number = 2, format?: object, rounding?: Rounding): string {\r\n    return this.multiply(_100_PERCENT).toFixed(decimalPlaces, format, rounding)\r\n  }\r\n}\r\n","import invariant from 'tiny-invariant'\r\n\r\nimport { ChainId, ONE, TradeType, ZERO } from '../constants'\r\nimport { sortedInsert } from '../utils'\r\nimport { Currency, ETHER } from './currency'\r\nimport { CurrencyAmount } from './fractions/currencyAmount'\r\nimport { Fraction } from './fractions/fraction'\r\nimport { Percent } from './fractions/percent'\r\nimport { Price } from './fractions/price'\r\nimport { TokenAmount } from './fractions/tokenAmount'\r\nimport { Pair } from './pair'\r\nimport { Route } from './route'\r\nimport { currencyEquals, Token, WETH } from './token'\r\nimport JSBI from 'jsbi';\r\n\r\n/**\r\n * Returns the percent difference between the mid price and the execution price, i.e. price impact.\r\n * @param midPrice mid price before the trade\r\n * @param inputAmount the input amount of the trade\r\n * @param outputAmount the output amount of the trade\r\n */\r\nfunction computePriceImpact(midPrice: Price, inputAmount: CurrencyAmount, outputAmount: CurrencyAmount): Percent {\r\n  const exactQuote = midPrice.raw.multiply(inputAmount.raw)\r\n  // calculate slippage := (exactQuote - outputAmount) / exactQuote\r\n  const slippage = exactQuote.subtract(outputAmount.raw).divide(exactQuote)\r\n  return new Percent(slippage.numerator, slippage.denominator)\r\n}\r\n\r\n// minimal interface so the input output comparator may be shared across types\r\ninterface InputOutput {\r\n  readonly inputAmount: CurrencyAmount\r\n  readonly outputAmount: CurrencyAmount\r\n}\r\n\r\n// comparator function that allows sorting trades by their output amounts, in decreasing order, and then input amounts\r\n// in increasing order. i.e. the best trades have the most outputs for the least inputs and are sorted first\r\nexport function inputOutputComparator(a: InputOutput, b: InputOutput): number {\r\n  // must have same input and output token for comparison\r\n  invariant(currencyEquals(a.inputAmount.currency, b.inputAmount.currency), 'INPUT_CURRENCY')\r\n  invariant(currencyEquals(a.outputAmount.currency, b.outputAmount.currency), 'OUTPUT_CURRENCY')\r\n  if (a.outputAmount.equalTo(b.outputAmount)) {\r\n    if (a.inputAmount.equalTo(b.inputAmount)) {\r\n      return 0\r\n    }\r\n    // trade A requires less input than trade B, so A should come first\r\n    if (a.inputAmount.lessThan(b.inputAmount)) {\r\n      return -1\r\n    } else {\r\n      return 1\r\n    }\r\n  } else {\r\n    // tradeA has less output than trade B, so should come second\r\n    if (a.outputAmount.lessThan(b.outputAmount)) {\r\n      return 1\r\n    } else {\r\n      return -1\r\n    }\r\n  }\r\n}\r\n\r\n// extension of the input output comparator that also considers other dimensions of the trade in ranking them\r\nexport function tradeComparator(a: Trade, b: Trade) {\r\n  const ioComp = inputOutputComparator(a, b)\r\n  if (ioComp !== 0) {\r\n    return ioComp\r\n  }\r\n\r\n  // consider lowest slippage next, since these are less likely to fail\r\n  if (a.priceImpact.lessThan(b.priceImpact)) {\r\n    return -1\r\n  } else if (a.priceImpact.greaterThan(b.priceImpact)) {\r\n    return 1\r\n  }\r\n\r\n  // finally consider the number of hops since each hop costs gas\r\n  return a.route.path.length - b.route.path.length\r\n}\r\n\r\nexport interface BestTradeOptions {\r\n  // how many results to return\r\n  maxNumResults?: number\r\n  // the maximum number of hops a trade should contain\r\n  maxHops?: number\r\n}\r\n\r\n/**\r\n * Given a currency amount and a chain ID, returns the equivalent representation as the token amount.\r\n * In other words, if the currency is ETHER, returns the WETH token amount for the given chain. Otherwise, returns\r\n * the input currency amount.\r\n */\r\nfunction wrappedAmount(currencyAmount: CurrencyAmount, chainId: ChainId): TokenAmount {\r\n  if (currencyAmount instanceof TokenAmount) return currencyAmount\r\n  if (currencyAmount.currency === ETHER) return new TokenAmount(WETH[chainId], currencyAmount.raw)\r\n  invariant(false, 'CURRENCY')\r\n}\r\n\r\nfunction wrappedCurrency(currency: Currency, chainId: ChainId): Token {\r\n  if (currency instanceof Token) return currency\r\n  if (currency === ETHER) return WETH[chainId]\r\n  invariant(false, 'CURRENCY')\r\n}\r\n\r\n/**\r\n * Represents a trade executed against a list of pairs.\r\n * Does not account for slippage, i.e. trades that front run this trade and move the price.\r\n */\r\nexport class Trade {\r\n  /**\r\n   * The route of the trade, i.e. which pairs the trade goes through.\r\n   */\r\n  public readonly route: Route\r\n  /**\r\n   * The type of the trade, either exact in or exact out.\r\n   */\r\n  public readonly tradeType: TradeType\r\n  /**\r\n   * The input amount for the trade assuming no slippage.\r\n   */\r\n  public readonly inputAmount: CurrencyAmount\r\n  /**\r\n   * The output amount for the trade assuming no slippage.\r\n   */\r\n  public readonly outputAmount: CurrencyAmount\r\n  /**\r\n   * The price expressed in terms of output amount/input amount.\r\n   */\r\n  public readonly executionPrice: Price\r\n  /**\r\n   * The mid price after the trade executes assuming no slippage.\r\n   */\r\n  public readonly nextMidPrice: Price\r\n  /**\r\n   * The percent difference between the mid price before the trade and the trade execution price.\r\n   */\r\n  public readonly priceImpact: Percent\r\n\r\n  /**\r\n   * Constructs an exact in trade with the given amount in and route\r\n   * @param route route of the exact in trade\r\n   * @param amountIn the amount being passed in\r\n   */\r\n  public static exactIn(route: Route, amountIn: CurrencyAmount): Trade {\r\n    return new Trade(route, amountIn, TradeType.EXACT_INPUT)\r\n  }\r\n\r\n  /**\r\n   * Constructs an exact out trade with the given amount out and route\r\n   * @param route route of the exact out trade\r\n   * @param amountOut the amount returned by the trade\r\n   */\r\n  public static exactOut(route: Route, amountOut: CurrencyAmount): Trade {\r\n    return new Trade(route, amountOut, TradeType.EXACT_OUTPUT)\r\n  }\r\n\r\n  public constructor(route: Route, amount: CurrencyAmount, tradeType: TradeType) {\r\n    const amounts: TokenAmount[] = new Array(route.path.length)\r\n    const nextPairs: Pair[] = new Array(route.pairs.length)\r\n    if (tradeType === TradeType.EXACT_INPUT) {\r\n      invariant(currencyEquals(amount.currency, route.input), 'INPUT')\r\n      amounts[0] = wrappedAmount(amount, route.chainId)\r\n      for (let i = 0; i < route.path.length - 1; i++) {\r\n        const pair = route.pairs[i]\r\n        const [outputAmount, nextPair] = pair.getOutputAmount(amounts[i])\r\n        amounts[i + 1] = outputAmount\r\n        nextPairs[i] = nextPair\r\n      }\r\n    } else {\r\n      invariant(currencyEquals(amount.currency, route.output), 'OUTPUT')\r\n      amounts[amounts.length - 1] = wrappedAmount(amount, route.chainId)\r\n      for (let i = route.path.length - 1; i > 0; i--) {\r\n        const pair = route.pairs[i - 1]\r\n        const [inputAmount, nextPair] = pair.getInputAmount(amounts[i])\r\n        amounts[i - 1] = inputAmount\r\n        nextPairs[i - 1] = nextPair\r\n      }\r\n    }\r\n\r\n    this.route = route\r\n    this.tradeType = tradeType\r\n    this.inputAmount =\r\n      tradeType === TradeType.EXACT_INPUT\r\n        ? amount\r\n        : route.input === ETHER\r\n          ? CurrencyAmount.ether(amounts[0].raw)\r\n          : amounts[0]\r\n    this.outputAmount =\r\n      tradeType === TradeType.EXACT_OUTPUT\r\n        ? amount\r\n        : route.output === ETHER\r\n          ? CurrencyAmount.ether(amounts[amounts.length - 1].raw)\r\n          : amounts[amounts.length - 1]\r\n    this.executionPrice = new Price(\r\n      this.inputAmount.currency,\r\n      this.outputAmount.currency,\r\n      this.inputAmount.raw,\r\n      this.outputAmount.raw\r\n    )\r\n    this.nextMidPrice = Price.fromRoute(new Route(nextPairs, route.input))\r\n    this.priceImpact = computePriceImpact(route.midPrice, this.inputAmount, this.outputAmount)\r\n  }\r\n\r\n  /**\r\n   * Get the minimum amount that must be received from this trade for the given slippage tolerance\r\n   * @param slippageTolerance tolerance of unfavorable slippage from the execution price of this trade\r\n   */\r\n  public minimumAmountOut(slippageTolerance: Percent): CurrencyAmount {\r\n    invariant(!slippageTolerance.lessThan(ZERO), 'SLIPPAGE_TOLERANCE')\r\n    if (this.tradeType === TradeType.EXACT_OUTPUT) {\r\n      return this.outputAmount\r\n    } else {\r\n      const slippageAdjustedAmountOut = new Fraction(ONE)\r\n        .add(slippageTolerance)\r\n        .invert()\r\n        .multiply(this.outputAmount.raw).quotient\r\n      return this.outputAmount instanceof TokenAmount\r\n        ? new TokenAmount(this.outputAmount.token, slippageAdjustedAmountOut)\r\n        : CurrencyAmount.ether(slippageAdjustedAmountOut)\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get the maximum amount in that can be spent via this trade for the given slippage tolerance\r\n   * @param slippageTolerance tolerance of unfavorable slippage from the execution price of this trade\r\n   */\r\n  public maximumAmountIn(slippageTolerance: Percent): CurrencyAmount {\r\n    invariant(!slippageTolerance.lessThan(ZERO), 'SLIPPAGE_TOLERANCE')\r\n    if (this.tradeType === TradeType.EXACT_INPUT) {\r\n      return this.inputAmount\r\n    } else {\r\n      const slippageAdjustedAmountIn = new Fraction(ONE).add(slippageTolerance).multiply(this.inputAmount.raw).quotient\r\n      return this.inputAmount instanceof TokenAmount\r\n        ? new TokenAmount(this.inputAmount.token, slippageAdjustedAmountIn)\r\n        : CurrencyAmount.ether(slippageAdjustedAmountIn)\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Given a list of pairs, and a fixed amount in, returns the top `maxNumResults` trades that go from an input token\r\n   * amount to an output token, making at most `maxHops` hops.\r\n   * Note this does not consider aggregation, as routes are linear. It's possible a better route exists by splitting\r\n   * the amount in among multiple routes.\r\n   * @param pairs the pairs to consider in finding the best trade\r\n   * @param currencyAmountIn exact amount of input currency to spend\r\n   * @param currencyOut the desired currency out\r\n   * @param maxNumResults maximum number of results to return\r\n   * @param maxHops maximum number of hops a returned trade can make, e.g. 1 hop goes through a single pair\r\n   * @param currentPairs used in recursion; the current list of pairs\r\n   * @param originalAmountIn used in recursion; the original value of the currencyAmountIn parameter\r\n   * @param bestTrades used in recursion; the current list of best trades\r\n   */\r\n  public static bestTradeExactIn(\r\n    pairs: Pair[],\r\n    currencyAmountIn: CurrencyAmount,\r\n    currencyOut: Currency,\r\n    { maxNumResults = 3, maxHops = 3 }: BestTradeOptions = {},\r\n    // used in recursion.\r\n    currentPairs: Pair[] = [],\r\n    originalAmountIn: CurrencyAmount = currencyAmountIn,\r\n    bestTrades: Trade[] = []\r\n  ): Trade[] {\r\n    invariant(pairs.length > 0, 'PAIRS')\r\n    invariant(maxHops > 0, 'MAX_HOPS')\r\n    invariant(originalAmountIn === currencyAmountIn || currentPairs.length > 0, 'INVALID_RECURSION')\r\n    const chainId: ChainId | undefined =\r\n      currencyAmountIn instanceof TokenAmount\r\n        ? currencyAmountIn.token.chainId\r\n        : currencyOut instanceof Token\r\n          ? currencyOut.chainId\r\n          : undefined\r\n    invariant(chainId !== undefined, 'CHAIN_ID')\r\n\r\n    const amountIn = wrappedAmount(currencyAmountIn, chainId)\r\n    const tokenOut = wrappedCurrency(currencyOut, chainId)\r\n    for (let i = 0; i < pairs.length; i++) {\r\n      const pair = pairs[i]\r\n      // pair irrelevant\r\n      if (!pair.token0.equals(amountIn.token) && !pair.token1.equals(amountIn.token)) continue\r\n      if (pair.reserve0.equalTo(ZERO) || pair.reserve1.equalTo(ZERO)) continue\r\n\r\n      let amountOut: TokenAmount\r\n      try {\r\n        ;[amountOut] = pair.getOutputAmount(amountIn)\r\n      } catch (error) {\r\n        // input too low\r\n        if (error.isInsufficientInputAmountError) {\r\n          continue\r\n        }\r\n        throw error\r\n      }\r\n      // we have arrived at the output token, so this is the final trade of one of the paths\r\n      if (amountOut.token.equals(tokenOut)) {\r\n        sortedInsert(\r\n          bestTrades,\r\n          new Trade(\r\n            new Route([...currentPairs, pair], originalAmountIn.currency, currencyOut),\r\n            originalAmountIn,\r\n            TradeType.EXACT_INPUT\r\n          ),\r\n          maxNumResults,\r\n          tradeComparator\r\n        )\r\n      } else if (maxHops > 1 && pairs.length > 1) {\r\n        const pairsExcludingThisPair = pairs.slice(0, i).concat(pairs.slice(i + 1, pairs.length))\r\n\r\n        // otherwise, consider all the other paths that lead from this token as long as we have not exceeded maxHops\r\n        Trade.bestTradeExactIn(\r\n          pairsExcludingThisPair,\r\n          amountOut,\r\n          currencyOut,\r\n          {\r\n            maxNumResults,\r\n            maxHops: maxHops - 1\r\n          },\r\n          [...currentPairs, pair],\r\n          originalAmountIn,\r\n          bestTrades\r\n        )\r\n      }\r\n    }\r\n\r\n    return bestTrades\r\n  }\r\n\r\n  /**\r\n   * similar to the above method but instead targets a fixed output amount\r\n   * given a list of pairs, and a fixed amount out, returns the top `maxNumResults` trades that go from an input token\r\n   * to an output token amount, making at most `maxHops` hops\r\n   * note this does not consider aggregation, as routes are linear. it's possible a better route exists by splitting\r\n   * the amount in among multiple routes.\r\n   * @param pairs the pairs to consider in finding the best trade\r\n   * @param currencyIn the currency to spend\r\n   * @param currencyAmountOut the exact amount of currency out\r\n   * @param maxNumResults maximum number of results to return\r\n   * @param maxHops maximum number of hops a returned trade can make, e.g. 1 hop goes through a single pair\r\n   * @param currentPairs used in recursion; the current list of pairs\r\n   * @param originalAmountOut used in recursion; the original value of the currencyAmountOut parameter\r\n   * @param bestTrades used in recursion; the current list of best trades\r\n   */\r\n  public static bestTradeExactOut(\r\n    pairs: Pair[],\r\n    currencyIn: Currency,\r\n    currencyAmountOut: CurrencyAmount,\r\n    { maxNumResults = 3, maxHops = 3 }: BestTradeOptions = {},\r\n    // used in recursion.\r\n    currentPairs: Pair[] = [],\r\n    originalAmountOut: CurrencyAmount = currencyAmountOut,\r\n    bestTrades: Trade[] = []\r\n  ): Trade[] {\r\n    invariant(pairs.length > 0, 'PAIRS')\r\n    invariant(maxHops > 0, 'MAX_HOPS')\r\n    invariant(originalAmountOut === currencyAmountOut || currentPairs.length > 0, 'INVALID_RECURSION')\r\n    const chainId: ChainId | undefined =\r\n      currencyAmountOut instanceof TokenAmount\r\n        ? currencyAmountOut.token.chainId\r\n        : currencyIn instanceof Token\r\n          ? currencyIn.chainId\r\n          : undefined\r\n    invariant(chainId !== undefined, 'CHAIN_ID')\r\n\r\n    const amountOut = wrappedAmount(currencyAmountOut, chainId)\r\n    const tokenIn = wrappedCurrency(currencyIn, chainId)\r\n    for (let i = 0; i < pairs.length; i++) {\r\n      const pair = pairs[i]\r\n      // pair irrelevant\r\n      if (!pair.token0.equals(amountOut.token) && !pair.token1.equals(amountOut.token)) continue\r\n      if (pair.reserve0.equalTo(ZERO) || pair.reserve1.equalTo(ZERO)) continue\r\n\r\n      let amountIn: TokenAmount\r\n      try {\r\n        ;[amountIn] = pair.getInputAmount(amountOut)\r\n      } catch (error) {\r\n        // not enough liquidity in this pair\r\n        if (error.isInsufficientReservesError) {\r\n          continue\r\n        }\r\n        throw error\r\n      }\r\n      // we have arrived at the input token, so this is the first trade of one of the paths\r\n      if (amountIn.token.equals(tokenIn)) {\r\n        sortedInsert(\r\n          bestTrades,\r\n          new Trade(\r\n            new Route([pair, ...currentPairs], currencyIn, originalAmountOut.currency),\r\n            originalAmountOut,\r\n            TradeType.EXACT_OUTPUT\r\n          ),\r\n          maxNumResults,\r\n          tradeComparator\r\n        )\r\n      } else if (maxHops > 1 && pairs.length > 1) {\r\n        const pairsExcludingThisPair = pairs.slice(0, i).concat(pairs.slice(i + 1, pairs.length))\r\n\r\n        // otherwise, consider all the other paths that arrive at this token as long as we have not exceeded maxHops\r\n        Trade.bestTradeExactOut(\r\n          pairsExcludingThisPair,\r\n          currencyIn,\r\n          amountIn,\r\n          {\r\n            maxNumResults,\r\n            maxHops: maxHops - 1\r\n          },\r\n          [pair, ...currentPairs],\r\n          originalAmountOut,\r\n          bestTrades\r\n        )\r\n      }\r\n    }\r\n\r\n    return bestTrades\r\n  }\r\n\r\n  public static amountFeeAddMore(chainId: ChainId, currentFee: string, pairsFee: Pair[], amountOut: CurrencyAmount): JSBI {\r\n    const amountFee: TokenAmount[] = new Array(pairsFee.length + 1)\r\n    amountFee[0] = wrappedAmount(amountOut, chainId)\r\n\r\n    for (let i = 0; i < pairsFee.length; i++) {\r\n      const pair = pairsFee[i]\r\n      const [outputAmount,] = pair.getOutputAmount(amountFee[i])\r\n      amountFee[i + 1] = outputAmount\r\n    }\r\n\r\n    return JSBI.subtract(amountFee[amountFee.length - 1].raw, JSBI.BigInt(currentFee))\r\n  }\r\n}","import { TradeType } from './constants'\r\nimport invariant from 'tiny-invariant'\r\nimport { validateAndParseAddress } from './utils'\r\nimport { CurrencyAmount, ETHER, Percent, Trade } from './entities'\r\n\r\n/**\r\n * Options for producing the arguments to send call to the router.\r\n */\r\nexport interface TradeOptions {\r\n  /**\r\n   * How much the execution price is allowed to move unfavorably from the trade execution price.\r\n   */\r\n  allowedSlippage: Percent\r\n  /**\r\n   * How long the swap is valid until it expires, in seconds.\r\n   * This will be used to produce a `deadline` parameter which is computed from when the swap call parameters\r\n   * are generated.\r\n   */\r\n  ttl: number\r\n  /**\r\n   * The account that should receive the output of the swap.\r\n   */\r\n  recipient: string\r\n\r\n  /**\r\n   * Whether any of the tokens in the path are fee on transfer tokens, which should be handled with special methods\r\n   */\r\n  feeOnTransfer?: boolean\r\n\r\n  isRouterFee?: boolean\r\n\r\n  amountFeeAddMore?: string\r\n}\r\n\r\nexport interface TradeOptionsDeadline extends Omit<TradeOptions, 'ttl'> {\r\n  /**\r\n   * When the transaction expires.\r\n   * This is an atlernate to specifying the ttl, for when you do not want to use local time.\r\n   */\r\n  deadline: number\r\n}\r\n\r\n/**\r\n * The parameters to use in the call to the Pancake Router to execute a trade.\r\n */\r\nexport interface SwapParameters {\r\n  /**\r\n   * The method to call on the Pancake Router.\r\n   */\r\n  methodName: string\r\n  /**\r\n   * The arguments to pass to the method, all hex encoded.\r\n   */\r\n  args: (string | string[])[]\r\n  /**\r\n   * The amount of wei to send in hex.\r\n   */\r\n  value: string\r\n}\r\n\r\nfunction toHex(currencyAmount: CurrencyAmount) {\r\n  return `0x${currencyAmount.raw.toString(16)}`\r\n}\r\n\r\nconst ZERO_HEX = '0x0'\r\n\r\n/**\r\n * Represents the Pancake Router, and has static methods for helping execute trades.\r\n */\r\nexport abstract class Router {\r\n  /**\r\n   * Cannot be constructed.\r\n   */\r\n  private constructor() { }\r\n  /**\r\n   * Produces the on-chain method name to call and the hex encoded parameters to pass as arguments for a given trade.\r\n   * @param trade to produce call parameters for\r\n   * @param options options for the call parameters\r\n   */\r\n  public static swapCallParameters(trade: Trade, options: TradeOptions | TradeOptionsDeadline): SwapParameters {\r\n    const etherIn = trade.inputAmount.currency === ETHER\r\n    const etherOut = trade.outputAmount.currency === ETHER\r\n    // the router does not support both ether in and out\r\n    invariant(!(etherIn && etherOut), 'ETHER_IN_OUT')\r\n    invariant(!('ttl' in options) || options.ttl > 0, 'TTL')\r\n\r\n    const to: string = validateAndParseAddress(options.recipient)\r\n    const amountIn: string = toHex(trade.maximumAmountIn(options.allowedSlippage))\r\n    const amountOut: string = toHex(trade.minimumAmountOut(options.allowedSlippage))\r\n    const path: string[] = trade.route.path.map((token) => token.address)\r\n    const deadline =\r\n      'ttl' in options\r\n        ? `0x${(Math.floor(new Date().getTime() / 1000) + options.ttl).toString(16)}`\r\n        : `0x${options.deadline.toString(16)}`\r\n\r\n    const useFeeOnTransfer = Boolean(options.feeOnTransfer)\r\n\r\n    let methodName: string\r\n    let args: (string | string[])[]\r\n    let value: string\r\n    switch (trade.tradeType) {\r\n      case TradeType.EXACT_INPUT:\r\n        if (etherIn) {\r\n          methodName = useFeeOnTransfer ? 'swapExactETHForTokensSupportingFeeOnTransferTokens' : 'swapExactETHForTokens'\r\n          // (uint amountOutMin, address[] calldata path, address to, uint deadline)\r\n          args = options.isRouterFee ? [amountOut, path, to, deadline, [options.amountFeeAddMore ?? \"0\"]] : [amountOut, path, to, deadline]\r\n          value = amountIn\r\n        } else if (etherOut) {\r\n          methodName = useFeeOnTransfer ? 'swapExactTokensForETHSupportingFeeOnTransferTokens' : 'swapExactTokensForETH'\r\n          // (uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\r\n          args = options.isRouterFee ? [amountIn, amountOut, path, to, deadline, [options.amountFeeAddMore ?? \"0\"]] : [amountIn, amountOut, path, to, deadline]\r\n          value = ZERO_HEX\r\n        } else {\r\n          methodName = useFeeOnTransfer\r\n            ? 'swapExactTokensForTokensSupportingFeeOnTransferTokens'\r\n            : 'swapExactTokensForTokens'\r\n          // (uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\r\n          args = options.isRouterFee ? [amountIn, amountOut, path, to, deadline, [options.amountFeeAddMore ?? \"0\"]] : [amountIn, amountOut, path, to, deadline]\r\n          value = ZERO_HEX\r\n        }\r\n        break\r\n      case TradeType.EXACT_OUTPUT:\r\n        invariant(!useFeeOnTransfer, 'EXACT_OUT_FOT')\r\n        if (etherIn) {\r\n          methodName = 'swapETHForExactTokens'\r\n          // (uint amountOut, address[] calldata path, address to, uint deadline)\r\n          args = options.isRouterFee ? [amountOut, path, to, deadline, [options.amountFeeAddMore ?? \"0\"]] : [amountOut, path, to, deadline]\r\n          value = amountIn\r\n        } else if (etherOut) {\r\n          methodName = 'swapTokensForExactETH'\r\n          // (uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\r\n          args = options.isRouterFee ? [amountOut, amountIn, path, to, deadline, [options.amountFeeAddMore ?? \"0\"]] : [amountOut, amountIn, path, to, deadline]\r\n          value = ZERO_HEX\r\n        } else {\r\n          methodName = 'swapTokensForExactTokens'\r\n          // (uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\r\n          args = options.isRouterFee ? [amountOut, amountIn, path, to, deadline, [options.amountFeeAddMore ?? \"0\"]] : [amountOut, amountIn, path, to, deadline]\r\n          value = ZERO_HEX\r\n        }\r\n        break\r\n    }\r\n    return {\r\n      methodName,\r\n      args,\r\n      value,\r\n    }\r\n  }\r\n}\r\n","import { Contract } from '@ethersproject/contracts'\r\nimport { getNetwork } from '@ethersproject/networks'\r\nimport { getDefaultProvider } from '@ethersproject/providers'\r\nimport { TokenAmount } from './entities/fractions/tokenAmount'\r\nimport { Pair } from './entities/pair'\r\nimport IPancakePair from '@pancakeswap-libs/pancake-swap-core/build/IPancakePair.json'\r\nimport invariant from 'tiny-invariant'\r\nimport ERC20 from './abis/ERC20.json'\r\nimport { ChainId } from './constants'\r\nimport { Token } from './entities/token'\r\n\r\nlet TOKEN_DECIMALS_CACHE: { [chainId: number]: { [address: string]: number } } = {\r\n  [ChainId.MAINNET]: {\r\n    '0xE0B7927c4aF23765Cb51314A0E0521A9645F0E2A': 9 // DGD\r\n  }\r\n}\r\n\r\n/**\r\n * Contains methods for constructing instances of pairs and tokens from on-chain data.\r\n */\r\nexport abstract class Fetcher {\r\n  /**\r\n   * Cannot be constructed.\r\n   */\r\n  private constructor() {}\r\n\r\n  /**\r\n   * Fetch information for a given token on the given chain, using the given ethers provider.\r\n   * @param chainId chain of the token\r\n   * @param address address of the token on the chain\r\n   * @param provider provider used to fetch the token\r\n   * @param symbol optional symbol of the token\r\n   * @param name optional name of the token\r\n   */\r\n  public static async fetchTokenData(\r\n    chainId: ChainId,\r\n    address: string,\r\n    provider = getDefaultProvider(getNetwork(chainId)),\r\n    symbol?: string,\r\n    name?: string\r\n  ): Promise<Token> {\r\n    const parsedDecimals =\r\n      typeof TOKEN_DECIMALS_CACHE?.[chainId]?.[address] === 'number'\r\n        ? TOKEN_DECIMALS_CACHE[chainId][address]\r\n        : await new Contract(address, ERC20, provider).decimals().then((decimals: number): number => {\r\n            TOKEN_DECIMALS_CACHE = {\r\n              ...TOKEN_DECIMALS_CACHE,\r\n              [chainId]: {\r\n                ...TOKEN_DECIMALS_CACHE?.[chainId],\r\n                [address]: decimals\r\n              }\r\n            }\r\n            return decimals\r\n          })\r\n    return new Token(chainId, address, parsedDecimals, symbol, name)\r\n  }\r\n\r\n  /**\r\n   * Fetches information about a pair and constructs a pair from the given two tokens.\r\n   * @param tokenA first token\r\n   * @param tokenB second token\r\n   * @param provider the provider to use to fetch the data\r\n   */\r\n  public static async fetchPairData(\r\n    tokenA: Token,\r\n    tokenB: Token,\r\n    provider = getDefaultProvider(getNetwork(tokenA.chainId))\r\n  ): Promise<Pair> {\r\n    invariant(tokenA.chainId === tokenB.chainId, 'CHAIN_ID')\r\n    const address = Pair.getAddress(tokenA, tokenB)\r\n    const [reserves0, reserves1] = await new Contract(address, IPancakePair.abi, provider).getReserves()\r\n    const balances = tokenA.sortsBefore(tokenB) ? [reserves0, reserves1] : [reserves1, reserves0]\r\n    return new Pair(new TokenAmount(tokenA, balances[0]), new TokenAmount(tokenB, balances[1]))\r\n  }\r\n}\r\n"],"names":["ChainId","TradeType","Rounding","FACTORY_ADDRESS","INIT_CODE_HASH","MINIMUM_LIQUIDITY","JSBI","BigInt","ZERO","ONE","TWO","THREE","FIVE","TEN","_100","SolidityType","SOLIDITY_TYPE_MAXIMA","_SOLIDITY_TYPE_MAXIMA","uint8","uint256","CAN_SET_PROTOTYPE","Object","InsufficientReservesError","_Error","_inheritsLoose","_this","call","name","constructor","setPrototypeOf","_assertThisInitialized","prototype","_wrapNativeSuper","Error","InsufficientInputAmountError","_Error2","_this2","validateSolidityTypeInstance","value","solidityType","greaterThanOrEqual","process","invariant","lessThanOrEqual","validateAndParseAddress","address","checksummedAddress","getAddress","warning","error","parseBigintIsh","bigintIsh","toString","sqrt","y","z","x","greaterThan","add","divide","lessThan","notEqual","sortedInsert","items","maxSize","comparator","length","push","isFull","lo","hi","mid","splice","pop","Currency","decimals","symbol","ETHER","Token","_Currency","chainId","_proto","equals","other","sortsBefore","toLowerCase","currencyEquals","currencyA","currencyB","WETH","_WETH","MAINNET","TESTNET","Decimal","toFormat","_Decimal","Big","_Big","toSignificantRounding","_toSignificantRoundin","ROUND_DOWN","ROUND_HALF_UP","ROUND_UP","toFixedRounding","_toFixedRounding","Fraction","numerator","denominator","invert","otherParsed","equal","multiply","subtract","equalTo","toSignificant","significantDigits","format","rounding","groupSeparator","Number","isInteger","set","precision","quotient","div","toSignificantDigits","decimalPlaces","toFixed","DP","RM","_createClass","key","get","remainder","CurrencyAmount","_Fraction","currency","amount","parsedAmount","exponentiate","ether","raw","toExact","TokenAmount","_CurrencyAmount","token","Price","baseCurrency","quoteCurrency","scalar","fromRoute","route","prices","_iterator","_createForOfIteratorHelperLoose","pairs","entries","_step","done","_step$value","i","pair","path","token0","reserve0","reserve1","slice","reduce","accumulator","currentValue","fraction","quote","currencyAmount","adjusted","PAIR_ADDRESS_CACHE","Pair","tokenAmountA","tokenAmountB","tokenAmounts","liquidityToken","tokenA","tokenB","tokens","_PAIR_ADDRESS_CACHE","_PAIR_ADDRESS_CACHE$t","undefined","_PAIR_ADDRESS_CACHE2","_extends2","_extends3","_extends","getCreate2Address","keccak256","pack","involvesToken","token1","priceOf","token0Price","token1Price","reserveOf","getOutputAmount","inputAmount","inputReserve","outputReserve","outputAmount","getInputAmount","getLiquidityMinted","totalSupply","liquidity","amount0","amount1","getLiquidityValue","feeOn","kLast","totalSupplyAdjusted","kLastParsed","rootK","rootKLast","feeLiquidity","Route","input","output","every","currentInput","midPrice","_100_PERCENT","Percent","apply","arguments","computePriceImpact","exactQuote","slippage","inputOutputComparator","a","b","tradeComparator","ioComp","priceImpact","wrappedAmount","wrappedCurrency","Trade","tradeType","amounts","Array","nextPairs","EXACT_INPUT","_pair$getOutputAmount","nextPair","_pair$getInputAmount","EXACT_OUTPUT","executionPrice","nextMidPrice","exactIn","amountIn","exactOut","amountOut","minimumAmountOut","slippageTolerance","slippageAdjustedAmountOut","maximumAmountIn","slippageAdjustedAmountIn","bestTradeExactIn","currencyAmountIn","currencyOut","_temp","currentPairs","originalAmountIn","bestTrades","_ref$maxNumResults","_ref","maxNumResults","_ref$maxHops","maxHops","tokenOut","_pair$getOutputAmount2","isInsufficientInputAmountError","concat","pairsExcludingThisPair","bestTradeExactOut","currencyIn","currencyAmountOut","_temp2","originalAmountOut","_ref2$maxNumResults","_ref2","_ref2$maxHops","tokenIn","_pair$getInputAmount2","isInsufficientReservesError","amountFeeAddMore","currentFee","pairsFee","amountFee","_pair$getOutputAmount3","toHex","ZERO_HEX","Router","swapCallParameters","trade","options","etherIn","etherOut","ttl","to","recipient","allowedSlippage","map","deadline","Math","floor","Date","getTime","useFeeOnTransfer","Boolean","feeOnTransfer","methodName","args","_options$amountFeeAdd","isRouterFee","_options$amountFeeAdd2","_options$amountFeeAdd3","_options$amountFeeAdd4","_options$amountFeeAdd5","_options$amountFeeAdd6","TOKEN_DECIMALS_CACHE","_TOKEN_DECIMALS_CACHE","Fetcher","fetchTokenData","provider","parsedDecimals","getDefaultProvider","getNetwork","_TOKEN_DECIMALS_CACHE2","_TOKEN_DECIMALS_CACHE3","Promise","resolve","Contract","ERC20","then","_TOKEN_DECIMALS_CACHE4","e","reject","fetchPairData","IPancakePair","abi","getReserves","reserves0","reserves1","balances"],"mappings":";;;;;;;;;;;;;;;;;;;;AAKA,WAAYA,OAAO;EACjBA,4CAAY;EACZA,+CAAe;AACjB,CAAC,EAHWA,eAAO,KAAPA,eAAO;AAKnB,WAAYC,SAAS;EACnBA,uDAAW;EACXA,yDAAY;AACd,CAAC,EAHWA,iBAAS,KAATA,iBAAS;AAKrB,WAAYC,QAAQ;EAClBA,mDAAU;EACVA,yDAAa;EACbA,+CAAQ;AACV,CAAC,EAJWA,gBAAQ,KAARA,gBAAQ;IAMPC,eAAe,GAAG;IAElBC,cAAc,GAAG;IAEjBC,iBAAiB,gBAAGC,IAAI,CAACC,MAAM,CAAC,IAAI;AAEjD;AACO,IAAMC,IAAI,gBAAGF,IAAI,CAACC,MAAM,CAAC,CAAC,CAAC;AAC3B,IAAME,GAAG,gBAAGH,IAAI,CAACC,MAAM,CAAC,CAAC,CAAC;AAC1B,IAAMG,GAAG,gBAAGJ,IAAI,CAACC,MAAM,CAAC,CAAC,CAAC;AAC1B,IAAMI,KAAK,gBAAGL,IAAI,CAACC,MAAM,CAAC,CAAC,CAAC;AAC5B,IAAMK,IAAI,gBAAGN,IAAI,CAACC,MAAM,CAAC,CAAC,CAAC;AAC3B,IAAMM,GAAG,gBAAGP,IAAI,CAACC,MAAM,CAAC,EAAE,CAAC;AAC3B,IAAMO,IAAI,gBAAGR,IAAI,CAACC,MAAM,CAAC,GAAG,CAAC;AAIpC,IAAYQ,YAGX;AAHD,WAAYA,YAAY;EACtBA,+BAAe;EACfA,mCAAmB;AACrB,CAAC,EAHWA,YAAY,KAAZA,YAAY;AAKjB,IAAMC,oBAAoB,IAAAC,qBAAA,OAAAA,qBAAA,CAC9BF,YAAY,CAACG,KAAK,iBAAGZ,IAAI,CAACC,MAAM,CAAC,MAAM,CAAC,EAAAU,qBAAA,CACxCF,YAAY,CAACI,OAAO,iBAAGb,IAAI,CAACC,MAAM,CAAC,oEAAoE,CAAC,EAAAU,qBAAA,CAC1G;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC9CD;AACA,IAAMG,iBAAiB,IAAG,gBAAgB,IAAIC,MAAM;AAEpD;;;;AAIA,IAAaC,yBAA0B,0BAAAC,MAAA;EAAAC,cAAA,CAAAF,yBAAA,EAAAC,MAAA;EAGrC,SAAAD;;IACEG,KAAA,GAAAF,MAAA,CAAAG,IAAA,MAAO;IAHOD,KAAA,4BAA2B,GAAS,IAAI;IAItDA,KAAA,CAAKE,IAAI,GAAGF,KAAA,CAAKG,WAAW,CAACD,IAAI;IACjC,IAAIP,iBAAiB,EAAEC,MAAM,CAACQ,cAAc,CAAAC,sBAAA,CAAAL,KAAA,GAAO,iBAAAH,yBAAA,QAAAM,WAAA,WAAWG,SAAS,CAAC;IAAA,OAAAN,KAAA;;EACzE,OAAAH,yBAAA;AAAA,gBAAAU,gBAAA,CAP4CC,KAAK;AAUpD;;;;AAIA,IAAaC,4BAA6B,0BAAAC,OAAA;EAAAX,cAAA,CAAAU,4BAAA,EAAAC,OAAA;EAGxC,SAAAD;;IACEE,MAAA,GAAAD,OAAA,CAAAT,IAAA,MAAO;IAHOU,MAAA,+BAA8B,GAAS,IAAI;IAIzDA,MAAA,CAAKT,IAAI,GAAGS,MAAA,CAAKR,WAAW,CAACD,IAAI;IACjC,IAAIP,iBAAiB,EAAEC,MAAM,CAACQ,cAAc,CAAAC,sBAAA,CAAAM,MAAA,GAAO,iBAAAF,4BAAA,QAAAN,WAAA,WAAWG,SAAS,CAAC;IAAA,OAAAK,MAAA;;EACzE,OAAAF,4BAAA;AAAA,gBAAAF,gBAAA,CAP+CC,KAAK;;SCdvCI,4BAA4BA,CAACC,KAAW,EAAEC,YAA0B;EAClF,CAAUjC,IAAI,CAACkC,kBAAkB,CAACF,KAAK,EAAE9B,IAAI,CAAC,GAAAiC,CAA9CC,SAAS,QAA0CJ,KAAK,kBAAaC,YAAY;EACjF,CAAUjC,IAAI,CAACqC,eAAe,CAACL,KAAK,EAAEtB,oBAAoB,CAACuB,YAAY,CAAC,CAAC,GAAAE,CAAzEC,SAAS,QAAqEJ,KAAK,kBAAaC,YAAY;AAC9G;AAEA;AACA,SAAgBK,uBAAuBA,CAACC,SAAe;EACrD,IAAI;IACF,IAAMC,kBAAkB,GAAGC,kBAAU,CAACF,SAAO,CAAC;IAC9CJ,aAAA,oBAAAO,OAAO,CAACH,SAAO,KAAKC,kBAAkB,EAAKD,SAAO,yBAAsB,CAAC;IACzE,OAAOC,kBAAkB;GAC1B,CAAC,OAAOG,KAAK,EAAE;IACd,CAAeR,CAAfC,SAAS,QAAWG,SAAO;;AAE/B;AAEA,SAAgBK,cAAcA,CAACC,SAAoB;EACjD,OAAOA,SAAS,YAAY7C,IAAI,GAC5B6C,SAAS,GACT,OAAOA,SAAS,KAAK,QAAQ,GAC7B7C,IAAI,CAACC,MAAM,CAAC4C,SAAS,CAACC,QAAQ,EAAE,CAAC,GACjC9C,IAAI,CAACC,MAAM,CAAC4C,SAAS,CAAC;AAC5B;AAEA;AACA,SAAgBE,IAAIA,CAACC,CAAO;EAC1BjB,4BAA4B,CAACiB,CAAC,EAAEvC,YAAY,CAACI,OAAO,CAAC;EACrD,IAAIoC,CAAC,GAAS/C,IAAI;EAClB,IAAIgD,CAAO;EACX,IAAIlD,IAAI,CAACmD,WAAW,CAACH,CAAC,EAAE3C,KAAK,CAAC,EAAE;IAC9B4C,CAAC,GAAGD,CAAC;IACLE,CAAC,GAAGlD,IAAI,CAACoD,GAAG,CAACpD,IAAI,CAACqD,MAAM,CAACL,CAAC,EAAE5C,GAAG,CAAC,EAAED,GAAG,CAAC;IACtC,OAAOH,IAAI,CAACsD,QAAQ,CAACJ,CAAC,EAAED,CAAC,CAAC,EAAE;MAC1BA,CAAC,GAAGC,CAAC;MACLA,CAAC,GAAGlD,IAAI,CAACqD,MAAM,CAACrD,IAAI,CAACoD,GAAG,CAACpD,IAAI,CAACqD,MAAM,CAACL,CAAC,EAAEE,CAAC,CAAC,EAAEA,CAAC,CAAC,EAAE9C,GAAG,CAAC;;GAEvD,MAAM,IAAIJ,IAAI,CAACuD,QAAQ,CAACP,CAAC,EAAE9C,IAAI,CAAC,EAAE;IACjC+C,CAAC,GAAG9C,GAAG;;EAET,OAAO8C,CAAC;AACV;AAEA;AACA;AACA,SAAgBO,YAAYA,CAAIC,KAAU,EAAEL,GAAM,EAAEM,OAAe,EAAEC,UAAkC;EACrG,EAAUD,OAAO,GAAG,CAAC,IAAAvB,CAArBC,SAAS,QAAc,eAAe;;EAEtC,EAAUqB,KAAK,CAACG,MAAM,IAAIF,OAAO,IAAAvB,CAAjCC,SAAS,QAA0B,YAAY;;EAG/C,IAAIqB,KAAK,CAACG,MAAM,KAAK,CAAC,EAAE;IACtBH,KAAK,CAACI,IAAI,CAACT,GAAG,CAAC;IACf,OAAO,IAAI;GACZ,MAAM;IACL,IAAMU,MAAM,GAAGL,KAAK,CAACG,MAAM,KAAKF,OAAO;;IAEvC,IAAII,MAAM,IAAIH,UAAU,CAACF,KAAK,CAACA,KAAK,CAACG,MAAM,GAAG,CAAC,CAAC,EAAER,GAAG,CAAC,IAAI,CAAC,EAAE;MAC3D,OAAOA,GAAG;;IAGZ,IAAIW,EAAE,GAAG,CAAC;MACRC,EAAE,GAAGP,KAAK,CAACG,MAAM;IAEnB,OAAOG,EAAE,GAAGC,EAAE,EAAE;MACd,IAAMC,GAAG,GAAIF,EAAE,GAAGC,EAAE,KAAM,CAAC;MAC3B,IAAIL,UAAU,CAACF,KAAK,CAACQ,GAAG,CAAC,EAAEb,GAAG,CAAC,IAAI,CAAC,EAAE;QACpCW,EAAE,GAAGE,GAAG,GAAG,CAAC;OACb,MAAM;QACLD,EAAE,GAAGC,GAAG;;;IAGZR,KAAK,CAACS,MAAM,CAACH,EAAE,EAAE,CAAC,EAAEX,GAAG,CAAC;IACxB,OAAOU,MAAM,GAAGL,KAAK,CAACU,GAAG,EAAG,GAAG,IAAI;;AAEvC;;AC5EA;;;;;AAKA,IAAaC,QAAQ;AAUnB;;;;;;AAMA,SAAAA,SAAsBC,QAAgB,EAAEC,MAAe,EAAEjD,IAAa;EACpEU,4BAA4B,CAAC/B,IAAI,CAACC,MAAM,CAACoE,QAAQ,CAAC,EAAE5D,YAAY,CAACG,KAAK,CAAC;EAEvE,IAAI,CAACyD,QAAQ,GAAGA,QAAQ;EACxB,IAAI,CAACC,MAAM,GAAGA,MAAM;EACpB,IAAI,CAACjD,IAAI,GAAGA,IAAI;AAClB,CAAC;AAjBD;;;AAGuB+C,cAAK,gBAAa,IAAIA,QAAQ,CAAC,EAAE,EAAE,KAAK,EAAE,KAAK,CAAC;AAiBzE,IAAMG,KAAK,GAAGH,QAAQ,CAACG,KAAK;;;ACnC5B,AAKA;;;AAGA,IAAaC,KAAM,0BAAAC,SAAA;EAAAvD,cAAA,CAAAsD,KAAA,EAAAC,SAAA;EAIjB,SAAAD,MAAmBE,OAAgB,EAAEnC,OAAe,EAAE8B,QAAgB,EAAEC,MAAe,EAAEjD,IAAa;;IACpGF,KAAA,GAAAsD,SAAA,CAAArD,IAAA,OAAMiD,QAAQ,EAAEC,MAAM,EAAEjD,IAAI,CAAC;IAC7BF,KAAA,CAAKuD,OAAO,GAAGA,OAAO;IACtBvD,KAAA,CAAKoB,OAAO,GAAGD,uBAAuB,CAACC,OAAO,CAAC;IAAA,OAAApB,KAAA;;;;;;EAGjD,IAAAwD,MAAA,GAAAH,KAAA,CAAA/C,SAAA;EAAAkD,MAAA,CAIOC,MAAM,GAAN,SAAAA,OAAOC,KAAY;;IAExB,IAAI,IAAI,KAAKA,KAAK,EAAE;MAClB,OAAO,IAAI;;IAEb,OAAO,IAAI,CAACH,OAAO,KAAKG,KAAK,CAACH,OAAO,IAAI,IAAI,CAACnC,OAAO,KAAKsC,KAAK,CAACtC,OAAO;;;;;;;;EAGzEoC,MAAA,CAMOG,WAAW,GAAX,SAAAA,YAAYD,KAAY;IAC7B,EAAU,IAAI,CAACH,OAAO,KAAKG,KAAK,CAACH,OAAO,IAAAvC,CAAxCC,SAAS,QAAiC,WAAW;IACrD,EAAU,IAAI,CAACG,OAAO,KAAKsC,KAAK,CAACtC,OAAO,IAAAJ,CAAxCC,SAAS,QAAiC,WAAW;IACrD,OAAO,IAAI,CAACG,OAAO,CAACwC,WAAW,EAAE,GAAGF,KAAK,CAACtC,OAAO,CAACwC,WAAW,EAAE;GAChE;EAAA,OAAAP,KAAA;AAAA,EAhCwBJ,QAAQ;AAmCnC;;;AAGA,SAAgBY,cAAcA,CAACC,SAAmB,EAAEC,SAAmB;EACrE,IAAID,SAAS,YAAYT,KAAK,IAAIU,SAAS,YAAYV,KAAK,EAAE;IAC5D,OAAOS,SAAS,CAACL,MAAM,CAACM,SAAS,CAAC;GACnC,MAAM,IAAID,SAAS,YAAYT,KAAK,EAAE;IACrC,OAAO,KAAK;GACb,MAAM,IAAIU,SAAS,YAAYV,KAAK,EAAE;IACrC,OAAO,KAAK;GACb,MAAM;IACL,OAAOS,SAAS,KAAKC,SAAS;;AAElC;AAEA,IAAaC,IAAI,IAAAC,KAAA,OAAAA,KAAA,CACd1F,eAAO,CAAC2F,OAAO,iBAAG,IAAIb,KAAK,CAC1B9E,eAAO,CAAC2F,OAAO,EACf,4CAA4C,EAC5C,EAAE,EACF,MAAM,EACN,aAAa,CACd,EAAAD,KAAA,CACA1F,eAAO,CAAC4F,OAAO,iBAAG,IAAId,KAAK,CAAC9E,eAAO,CAAC4F,OAAO,EAAE,4CAA4C,EAAE,EAAE,EAAE,MAAM,EAAE,aAAa,CAAC,EAAAF,KAAA,CACvH;;;ACnED,AAUA,IAAMG,OAAO,gBAAGC,QAAQ,CAACC,QAAQ,CAAC;AAClC,IAAMC,GAAG,gBAAGF,QAAQ,CAACG,IAAI,CAAC;AAE1B,IAAMC,qBAAqB,IAAAC,qBAAA,OAAAA,qBAAA,CACxBjG,gBAAQ,CAACkG,UAAU,IAAGP,OAAO,CAACO,UAAU,EAAAD,qBAAA,CACxCjG,gBAAQ,CAACmG,aAAa,IAAGR,OAAO,CAACQ,aAAa,EAAAF,qBAAA,CAC9CjG,gBAAQ,CAACoG,QAAQ,IAAGT,OAAO,CAACS,QAAQ,EAAAH,qBAAA,CACtC;AAED,IAAMI,eAAe,IAAAC,gBAAA,OAAAA,gBAAA,CAClBtG,gBAAQ,CAACkG,UAAU,wBACnBlG,gBAAQ,CAACmG,aAAa,wBACtBnG,gBAAQ,CAACoG,QAAQ,wBACnB;AAED,IAAaG,QAAQ;EAInB,SAAAA,SAAmBC,SAAoB,EAAEC;QAAAA;MAAAA,cAAyBlG,GAAG;;IACnE,IAAI,CAACiG,SAAS,GAAGxD,cAAc,CAACwD,SAAS,CAAC;IAC1C,IAAI,CAACC,WAAW,GAAGzD,cAAc,CAACyD,WAAW,CAAC;;;EAGhD,IAAA1B,MAAA,GAAAwB,QAAA,CAAA1E,SAAA;EAAAkD,MAAA,CAUO2B,MAAM,GAAN,SAAAA;IACL,OAAO,IAAIH,QAAQ,CAAC,IAAI,CAACE,WAAW,EAAE,IAAI,CAACD,SAAS,CAAC;GACtD;EAAAzB,MAAA,CAEMvB,GAAG,GAAH,SAAAA,IAAIyB,KAA2B;IACpC,IAAM0B,WAAW,GAAG1B,KAAK,YAAYsB,QAAQ,GAAGtB,KAAK,GAAG,IAAIsB,QAAQ,CAACvD,cAAc,CAACiC,KAAK,CAAC,CAAC;IAC3F,IAAI7E,IAAI,CAACwG,KAAK,CAAC,IAAI,CAACH,WAAW,EAAEE,WAAW,CAACF,WAAW,CAAC,EAAE;MACzD,OAAO,IAAIF,QAAQ,CAACnG,IAAI,CAACoD,GAAG,CAAC,IAAI,CAACgD,SAAS,EAAEG,WAAW,CAACH,SAAS,CAAC,EAAE,IAAI,CAACC,WAAW,CAAC;;IAExF,OAAO,IAAIF,QAAQ,CACjBnG,IAAI,CAACoD,GAAG,CACNpD,IAAI,CAACyG,QAAQ,CAAC,IAAI,CAACL,SAAS,EAAEG,WAAW,CAACF,WAAW,CAAC,EACtDrG,IAAI,CAACyG,QAAQ,CAACF,WAAW,CAACH,SAAS,EAAE,IAAI,CAACC,WAAW,CAAC,CACvD,EACDrG,IAAI,CAACyG,QAAQ,CAAC,IAAI,CAACJ,WAAW,EAAEE,WAAW,CAACF,WAAW,CAAC,CACzD;GACF;EAAA1B,MAAA,CAEM+B,QAAQ,GAAR,SAAAA,SAAS7B,KAA2B;IACzC,IAAM0B,WAAW,GAAG1B,KAAK,YAAYsB,QAAQ,GAAGtB,KAAK,GAAG,IAAIsB,QAAQ,CAACvD,cAAc,CAACiC,KAAK,CAAC,CAAC;IAC3F,IAAI7E,IAAI,CAACwG,KAAK,CAAC,IAAI,CAACH,WAAW,EAAEE,WAAW,CAACF,WAAW,CAAC,EAAE;MACzD,OAAO,IAAIF,QAAQ,CAACnG,IAAI,CAAC0G,QAAQ,CAAC,IAAI,CAACN,SAAS,EAAEG,WAAW,CAACH,SAAS,CAAC,EAAE,IAAI,CAACC,WAAW,CAAC;;IAE7F,OAAO,IAAIF,QAAQ,CACjBnG,IAAI,CAAC0G,QAAQ,CACX1G,IAAI,CAACyG,QAAQ,CAAC,IAAI,CAACL,SAAS,EAAEG,WAAW,CAACF,WAAW,CAAC,EACtDrG,IAAI,CAACyG,QAAQ,CAACF,WAAW,CAACH,SAAS,EAAE,IAAI,CAACC,WAAW,CAAC,CACvD,EACDrG,IAAI,CAACyG,QAAQ,CAAC,IAAI,CAACJ,WAAW,EAAEE,WAAW,CAACF,WAAW,CAAC,CACzD;GACF;EAAA1B,MAAA,CAEMrB,QAAQ,GAAR,SAAAA,SAASuB,KAA2B;IACzC,IAAM0B,WAAW,GAAG1B,KAAK,YAAYsB,QAAQ,GAAGtB,KAAK,GAAG,IAAIsB,QAAQ,CAACvD,cAAc,CAACiC,KAAK,CAAC,CAAC;IAC3F,OAAO7E,IAAI,CAACsD,QAAQ,CAClBtD,IAAI,CAACyG,QAAQ,CAAC,IAAI,CAACL,SAAS,EAAEG,WAAW,CAACF,WAAW,CAAC,EACtDrG,IAAI,CAACyG,QAAQ,CAACF,WAAW,CAACH,SAAS,EAAE,IAAI,CAACC,WAAW,CAAC,CACvD;GACF;EAAA1B,MAAA,CAEMgC,OAAO,GAAP,SAAAA,QAAQ9B,KAA2B;IACxC,IAAM0B,WAAW,GAAG1B,KAAK,YAAYsB,QAAQ,GAAGtB,KAAK,GAAG,IAAIsB,QAAQ,CAACvD,cAAc,CAACiC,KAAK,CAAC,CAAC;IAC3F,OAAO7E,IAAI,CAACwG,KAAK,CACfxG,IAAI,CAACyG,QAAQ,CAAC,IAAI,CAACL,SAAS,EAAEG,WAAW,CAACF,WAAW,CAAC,EACtDrG,IAAI,CAACyG,QAAQ,CAACF,WAAW,CAACH,SAAS,EAAE,IAAI,CAACC,WAAW,CAAC,CACvD;GACF;EAAA1B,MAAA,CAEMxB,WAAW,GAAX,SAAAA,YAAY0B,KAA2B;IAC5C,IAAM0B,WAAW,GAAG1B,KAAK,YAAYsB,QAAQ,GAAGtB,KAAK,GAAG,IAAIsB,QAAQ,CAACvD,cAAc,CAACiC,KAAK,CAAC,CAAC;IAC3F,OAAO7E,IAAI,CAACmD,WAAW,CACrBnD,IAAI,CAACyG,QAAQ,CAAC,IAAI,CAACL,SAAS,EAAEG,WAAW,CAACF,WAAW,CAAC,EACtDrG,IAAI,CAACyG,QAAQ,CAACF,WAAW,CAACH,SAAS,EAAE,IAAI,CAACC,WAAW,CAAC,CACvD;GACF;EAAA1B,MAAA,CAEM8B,QAAQ,GAAR,SAAAA,SAAS5B,KAA2B;IACzC,IAAM0B,WAAW,GAAG1B,KAAK,YAAYsB,QAAQ,GAAGtB,KAAK,GAAG,IAAIsB,QAAQ,CAACvD,cAAc,CAACiC,KAAK,CAAC,CAAC;IAC3F,OAAO,IAAIsB,QAAQ,CACjBnG,IAAI,CAACyG,QAAQ,CAAC,IAAI,CAACL,SAAS,EAAEG,WAAW,CAACH,SAAS,CAAC,EACpDpG,IAAI,CAACyG,QAAQ,CAAC,IAAI,CAACJ,WAAW,EAAEE,WAAW,CAACF,WAAW,CAAC,CACzD;GACF;EAAA1B,MAAA,CAEMtB,MAAM,GAAN,SAAAA,OAAOwB,KAA2B;IACvC,IAAM0B,WAAW,GAAG1B,KAAK,YAAYsB,QAAQ,GAAGtB,KAAK,GAAG,IAAIsB,QAAQ,CAACvD,cAAc,CAACiC,KAAK,CAAC,CAAC;IAC3F,OAAO,IAAIsB,QAAQ,CACjBnG,IAAI,CAACyG,QAAQ,CAAC,IAAI,CAACL,SAAS,EAAEG,WAAW,CAACF,WAAW,CAAC,EACtDrG,IAAI,CAACyG,QAAQ,CAAC,IAAI,CAACJ,WAAW,EAAEE,WAAW,CAACH,SAAS,CAAC,CACvD;GACF;EAAAzB,MAAA,CAEMiC,aAAa,GAAb,SAAAA,cACLC,iBAAyB,EACzBC,QACAC;QADAD;MAAAA,SAAiB;QAAEE,cAAc,EAAE;OAAI;;IAAA,IACvCD;MAAAA,WAAqBnH,gBAAQ,CAACmG,aAAa;;IAE3C,CAAUkB,MAAM,CAACC,SAAS,CAACL,iBAAiB,CAAC,GAAA1E,CAA7CC,SAAS,QAAyCyE,iBAAiB;IACnE,EAAUA,iBAAiB,GAAG,CAAC,IAAA1E,CAA/BC,SAAS,QAA2ByE,iBAAiB;IAErDtB,OAAO,CAAC4B,GAAG,CAAC;MAAEC,SAAS,EAAEP,iBAAiB,GAAG,CAAC;MAAEE,QAAQ,EAAEnB,qBAAqB,CAACmB,QAAQ;KAAG,CAAC;IAC5F,IAAMM,QAAQ,GAAG,IAAI9B,OAAO,CAAC,IAAI,CAACa,SAAS,CAACtD,QAAQ,EAAE,CAAC,CACpDwE,GAAG,CAAC,IAAI,CAACjB,WAAW,CAACvD,QAAQ,EAAE,CAAC,CAChCyE,mBAAmB,CAACV,iBAAiB,CAAC;IACzC,OAAOQ,QAAQ,CAAC7B,QAAQ,CAAC6B,QAAQ,CAACG,aAAa,EAAE,EAAEV,MAAM,CAAC;GAC3D;EAAAnC,MAAA,CAEM8C,OAAO,GAAP,SAAAA,QACLD,aAAqB,EACrBV,QACAC;QADAD;MAAAA,SAAiB;QAAEE,cAAc,EAAE;OAAI;;IAAA,IACvCD;MAAAA,WAAqBnH,gBAAQ,CAACmG,aAAa;;IAE3C,CAAUkB,MAAM,CAACC,SAAS,CAACM,aAAa,CAAC,GAAArF,CAAzCC,SAAS,QAAqCoF,aAAa;IAC3D,EAAUA,aAAa,IAAI,CAAC,IAAArF,CAA5BC,SAAS,QAAwBoF,aAAa;IAE9C9B,GAAG,CAACgC,EAAE,GAAGF,aAAa;IACtB9B,GAAG,CAACiC,EAAE,GAAG1B,eAAe,CAACc,QAAQ,CAAC;IAClC,OAAO,IAAIrB,GAAG,CAAC,IAAI,CAACU,SAAS,CAACtD,QAAQ,EAAE,CAAC,CAACwE,GAAG,CAAC,IAAI,CAACjB,WAAW,CAACvD,QAAQ,EAAE,CAAC,CAAC0C,QAAQ,CAACgC,aAAa,EAAEV,MAAM,CAAC;GAC3G;EAAAc,YAAA,CAAAzB,QAAA;IAAA0B,GAAA;IAAAC,GAAA,EA3GD,SAAAA;MACE,OAAO9H,IAAI,CAACqD,MAAM,CAAC,IAAI,CAAC+C,SAAS,EAAE,IAAI,CAACC,WAAW,CAAC;;;;IAGtDwB,GAAA;IAAAC,GAAA,EACA,SAAAA;MACE,OAAO,IAAI3B,QAAQ,CAACnG,IAAI,CAAC+H,SAAS,CAAC,IAAI,CAAC3B,SAAS,EAAE,IAAI,CAACC,WAAW,CAAC,EAAE,IAAI,CAACA,WAAW,CAAC;;;EACxF,OAAAF,QAAA;AAAA;;AC/BH,IAAMT,KAAG,gBAAGF,QAAQ,CAACG,IAAI,CAAC;AAE1B,IAAaqC,cAAe,0BAAAC,SAAA;EAAA/G,cAAA,CAAA8G,cAAA,EAAAC,SAAA;;EAY1B,SAAAD,eAAsBE,QAAkB,EAAEC,MAAiB;;IACzD,IAAMC,YAAY,GAAGxF,cAAc,CAACuF,MAAM,CAAC;IAC3CpG,4BAA4B,CAACqG,YAAY,EAAE3H,YAAY,CAACI,OAAO,CAAC;IAEhEM,KAAA,GAAA8G,SAAA,CAAA7G,IAAA,OAAMgH,YAAY,EAAEpI,IAAI,CAACqI,YAAY,CAAC9H,GAAG,EAAEP,IAAI,CAACC,MAAM,CAACiI,QAAQ,CAAC7D,QAAQ,CAAC,CAAC,CAAC;IAC3ElD,KAAA,CAAK+G,QAAQ,GAAGA,QAAQ;IAAA,OAAA/G,KAAA;;;;;;EAd1B6G,cAAA,CAIcM,KAAK,GAAZ,SAAAA,MAAaH,MAAiB;IACnC,OAAO,IAAIH,cAAc,CAACzD,KAAK,EAAE4D,MAAM,CAAC;GACzC;EAAA,IAAAxD,MAAA,GAAAqD,cAAA,CAAAvG,SAAA;EAAAkD,MAAA,CAeMvB,GAAG,GAAH,SAAAA,IAAIyB,KAAqB;IAC9B,CAAUG,cAAc,CAAC,IAAI,CAACkD,QAAQ,EAAErD,KAAK,CAACqD,QAAQ,CAAC,GAAA/F,CAAvDC,SAAS,QAAgD,OAAO;IAChE,OAAO,IAAI4F,cAAc,CAAC,IAAI,CAACE,QAAQ,EAAElI,IAAI,CAACoD,GAAG,CAAC,IAAI,CAACmF,GAAG,EAAE1D,KAAK,CAAC0D,GAAG,CAAC,CAAC;GACxE;EAAA5D,MAAA,CAEM+B,QAAQ,GAAR,SAAAA,SAAS7B,KAAqB;IACnC,CAAUG,cAAc,CAAC,IAAI,CAACkD,QAAQ,EAAErD,KAAK,CAACqD,QAAQ,CAAC,GAAA/F,CAAvDC,SAAS,QAAgD,OAAO;IAChE,OAAO,IAAI4F,cAAc,CAAC,IAAI,CAACE,QAAQ,EAAElI,IAAI,CAAC0G,QAAQ,CAAC,IAAI,CAAC6B,GAAG,EAAE1D,KAAK,CAAC0D,GAAG,CAAC,CAAC;GAC7E;EAAA5D,MAAA,CAEMiC,aAAa,GAAb,SAAAA,cACLC,mBACAC,MAAe,EACfC;QAFAF;MAAAA,oBAA4B,CAAC;;IAAA,IAE7BE;MAAAA,WAAqBnH,gBAAQ,CAACkG,UAAU;;IAExC,OAAAmC,SAAA,CAAAxG,SAAA,CAAamF,aAAa,CAAAxF,IAAA,OAACyF,iBAAiB,EAAEC,MAAM,EAAEC,QAAQ;GAC/D;EAAApC,MAAA,CAEM8C,OAAO,GAAP,SAAAA,QACLD,eACAV,MAAe,EACfC;QAFAS;MAAAA,gBAAwB,IAAI,CAACU,QAAQ,CAAC7D,QAAQ;;IAAA,IAE9C0C;MAAAA,WAAqBnH,gBAAQ,CAACkG,UAAU;;IAExC,EAAU0B,aAAa,IAAI,IAAI,CAACU,QAAQ,CAAC7D,QAAQ,IAAAlC,CAAjDC,SAAS,QAA0C,UAAU;IAC7D,OAAA6F,SAAA,CAAAxG,SAAA,CAAagG,OAAO,CAAArG,IAAA,OAACoG,aAAa,EAAEV,MAAM,EAAEC,QAAQ;GACrD;EAAApC,MAAA,CAEM6D,OAAO,GAAP,SAAAA,QAAQ1B;QAAAA;MAAAA,SAAiB;QAAEE,cAAc,EAAE;OAAI;;IACpDtB,KAAG,CAACgC,EAAE,GAAG,IAAI,CAACQ,QAAQ,CAAC7D,QAAQ;IAC/B,OAAO,IAAIqB,KAAG,CAAC,IAAI,CAACU,SAAS,CAACtD,QAAQ,EAAE,CAAC,CAACwE,GAAG,CAAC,IAAI,CAACjB,WAAW,CAACvD,QAAQ,EAAE,CAAC,CAAC0C,QAAQ,CAACsB,MAAM,CAAC;GAC5F;EAAAc,YAAA,CAAAI,cAAA;IAAAH,GAAA;IAAAC,GAAA,EAlCD,SAAAA;MACE,OAAO,IAAI,CAAC1B,SAAS;;;EACtB,OAAA4B,cAAA;AAAA,EAtBiC7B,QAAQ;;ICN/BsC,WAAY,0BAAAC,eAAA;EAAAxH,cAAA,CAAAuH,WAAA,EAAAC,eAAA;;EAIvB,SAAAD,YAAmBE,KAAY,EAAER,MAAiB;;IAChDhH,KAAA,GAAAuH,eAAA,CAAAtH,IAAA,OAAMuH,KAAK,EAAER,MAAM,CAAC;IACpBhH,KAAA,CAAKwH,KAAK,GAAGA,KAAK;IAAA,OAAAxH,KAAA;;EACnB,IAAAwD,MAAA,GAAA8D,WAAA,CAAAhH,SAAA;EAAAkD,MAAA,CAEMvB,GAAG,GAAH,SAAAA,IAAIyB,KAAkB;IAC3B,CAAU,IAAI,CAAC8D,KAAK,CAAC/D,MAAM,CAACC,KAAK,CAAC8D,KAAK,CAAC,GAAAxG,CAAxCC,SAAS,QAAiC,OAAO;IACjD,OAAO,IAAIqG,WAAW,CAAC,IAAI,CAACE,KAAK,EAAE3I,IAAI,CAACoD,GAAG,CAAC,IAAI,CAACmF,GAAG,EAAE1D,KAAK,CAAC0D,GAAG,CAAC,CAAC;GAClE;EAAA5D,MAAA,CAEM+B,QAAQ,GAAR,SAAAA,SAAS7B,KAAkB;IAChC,CAAU,IAAI,CAAC8D,KAAK,CAAC/D,MAAM,CAACC,KAAK,CAAC8D,KAAK,CAAC,GAAAxG,CAAxCC,SAAS,QAAiC,OAAO;IACjD,OAAO,IAAIqG,WAAW,CAAC,IAAI,CAACE,KAAK,EAAE3I,IAAI,CAAC0G,QAAQ,CAAC,IAAI,CAAC6B,GAAG,EAAE1D,KAAK,CAAC0D,GAAG,CAAC,CAAC;GACvE;EAAA,OAAAE,WAAA;AAAA,EAjB8BT,cAAc;;ICKlCY,KAAM,0BAAAX,SAAA;EAAA/G,cAAA,CAAA0H,KAAA,EAAAX,SAAA;;EAkBjB,SAAAW,MAAmBC,YAAsB,EAAEC,aAAuB,EAAEzC,WAAsB,EAAED,SAAoB;;IAC9GjF,KAAA,GAAA8G,SAAA,CAAA7G,IAAA,OAAMgF,SAAS,EAAEC,WAAW,CAAC;IAE7BlF,KAAA,CAAK0H,YAAY,GAAGA,YAAY;IAChC1H,KAAA,CAAK2H,aAAa,GAAGA,aAAa;IAClC3H,KAAA,CAAK4H,MAAM,GAAG,IAAI5C,QAAQ,CACxBnG,IAAI,CAACqI,YAAY,CAAC9H,GAAG,EAAEP,IAAI,CAACC,MAAM,CAAC4I,YAAY,CAACxE,QAAQ,CAAC,CAAC,EAC1DrE,IAAI,CAACqI,YAAY,CAAC9H,GAAG,EAAEP,IAAI,CAACC,MAAM,CAAC6I,aAAa,CAACzE,QAAQ,CAAC,CAAC,CAC5D;IAAA,OAAAlD,KAAA;;EACFyH,KAAA,CAtBaI,SAAS,GAAhB,SAAAA,UAAiBC,KAAY;IAClC,IAAMC,MAAM,GAAY,EAAE;IAC1B,SAAAC,SAAA,GAAAC,+BAAA,CAAwBH,KAAK,CAACI,KAAK,CAACC,OAAO,EAAE,GAAAC,KAAA,IAAAA,KAAA,GAAAJ,SAAA,IAAAK,IAAA,GAAE;MAAA,IAAAC,WAAA,GAAAF,KAAA,CAAAvH,KAAA;QAAnC0H,CAAC,GAAAD,WAAA;QAAEE,IAAI,GAAAF,WAAA;MACjBP,MAAM,CAACrF,IAAI,CACToF,KAAK,CAACW,IAAI,CAACF,CAAC,CAAC,CAAC9E,MAAM,CAAC+E,IAAI,CAACE,MAAM,CAAC,GAC7B,IAAIjB,KAAK,CAACe,IAAI,CAACG,QAAQ,CAAC5B,QAAQ,EAAEyB,IAAI,CAACI,QAAQ,CAAC7B,QAAQ,EAAEyB,IAAI,CAACG,QAAQ,CAACvB,GAAG,EAAEoB,IAAI,CAACI,QAAQ,CAACxB,GAAG,CAAC,GAC/F,IAAIK,KAAK,CAACe,IAAI,CAACI,QAAQ,CAAC7B,QAAQ,EAAEyB,IAAI,CAACG,QAAQ,CAAC5B,QAAQ,EAAEyB,IAAI,CAACI,QAAQ,CAACxB,GAAG,EAAEoB,IAAI,CAACG,QAAQ,CAACvB,GAAG,CAAC,CACpG;;IAEH,OAAOW,MAAM,CAACc,KAAK,CAAC,CAAC,CAAC,CAACC,MAAM,CAAC,UAACC,WAAW,EAAEC,YAAY;MAAA,OAAKD,WAAW,CAACzD,QAAQ,CAAC0D,YAAY,CAAC;OAAEjB,MAAM,CAAC,CAAC,CAAC,CAAC;GAC5G;EAAA,IAAAvE,MAAA,GAAAiE,KAAA,CAAAnH,SAAA;EAAAkD,MAAA,CAsBM2B,MAAM,GAAN,SAAAA;IACL,OAAO,IAAIsC,KAAK,CAAC,IAAI,CAACE,aAAa,EAAE,IAAI,CAACD,YAAY,EAAE,IAAI,CAACzC,SAAS,EAAE,IAAI,CAACC,WAAW,CAAC;GAC1F;EAAA1B,MAAA,CAEM8B,QAAQ,GAAR,SAAAA,SAAS5B,KAAY;IAC1B,CAAUG,cAAc,CAAC,IAAI,CAAC8D,aAAa,EAAEjE,KAAK,CAACgE,YAAY,CAAC,GAAA1G,CAAhEC,SAAS,QAAyD,OAAO;IACzE,IAAMgI,QAAQ,GAAAnC,SAAA,CAAAxG,SAAA,CAASgF,QAAQ,CAAArF,IAAA,OAACyD,KAAK,CAAC;IACtC,OAAO,IAAI+D,KAAK,CAAC,IAAI,CAACC,YAAY,EAAEhE,KAAK,CAACiE,aAAa,EAAEsB,QAAQ,CAAC/D,WAAW,EAAE+D,QAAQ,CAAChE,SAAS,CAAC;;;;EAGpGzB,MAAA,CACO0F,KAAK,GAAL,SAAAA,MAAMC,cAA8B;IACzC,CAAUtF,cAAc,CAACsF,cAAc,CAACpC,QAAQ,EAAE,IAAI,CAACW,YAAY,CAAC,GAAA1G,CAApEC,SAAS,QAA6D,OAAO;IAC7E,IAAI,IAAI,CAAC0G,aAAa,YAAYtE,KAAK,EAAE;MACvC,OAAO,IAAIiE,WAAW,CAAC,IAAI,CAACK,aAAa,EAAEb,SAAA,CAAAxG,SAAA,CAAMgF,QAAQ,CAAArF,IAAA,OAACkJ,cAAc,CAAC/B,GAAG,EAAElB,QAAQ,CAAC;;IAEzF,OAAOW,cAAc,CAACM,KAAK,CAACL,SAAA,CAAAxG,SAAA,CAAMgF,QAAQ,CAAArF,IAAA,OAACkJ,cAAc,CAAC/B,GAAG,EAAElB,QAAQ,CAAC;GACzE;EAAA1C,MAAA,CAEMiC,aAAa,GAAb,SAAAA,cAAcC,mBAA+BC,MAAe,EAAEC,QAAmB;QAAnEF;MAAAA,oBAA4B,CAAC;;IAChD,OAAO,IAAI,CAAC0D,QAAQ,CAAC3D,aAAa,CAACC,iBAAiB,EAAEC,MAAM,EAAEC,QAAQ,CAAC;GACxE;EAAApC,MAAA,CAEM8C,OAAO,GAAP,SAAAA,QAAQD,eAA2BV,MAAe,EAAEC,QAAmB;QAA/DS;MAAAA,gBAAwB,CAAC;;IACtC,OAAO,IAAI,CAAC+C,QAAQ,CAAC9C,OAAO,CAACD,aAAa,EAAEV,MAAM,EAAEC,QAAQ,CAAC;GAC9D;EAAAa,YAAA,CAAAgB,KAAA;IAAAf,GAAA;IAAAC,GAAA,EAjCD,SAAAA;MACE,OAAO,IAAI3B,QAAQ,CAAC,IAAI,CAACC,SAAS,EAAE,IAAI,CAACC,WAAW,CAAC;;;IACtDwB,GAAA;IAAAC,GAAA,EAED,SAAAA;MACE,OAAAG,SAAA,CAAAxG,SAAA,CAAagF,QAAQ,CAAArF,IAAA,OAAC,IAAI,CAAC2H,MAAM;;;EAClC,OAAAH,KAAA;AAAA,EAnCwBzC,QAAQ;;ACSnC,IAAIqE,kBAAkB,GAAqE,EAAE;AAE7F,IAAaC,IAAI;EAwBf,SAAAA,KAAmBC,YAAyB,EAAEC,YAAyB;IACrE,IAAMC,YAAY,GAAGF,YAAY,CAAC/B,KAAK,CAAC7D,WAAW,CAAC6F,YAAY,CAAChC,KAAK,CAAC;MACnE,CAAC+B,YAAY,EAAEC,YAAY,CAAC,GAC5B,CAACA,YAAY,EAAED,YAAY,CAAC;IAChC,IAAI,CAACG,cAAc,GAAG,IAAIrG,KAAK,CAC7BoG,YAAY,CAAC,CAAC,CAAC,CAACjC,KAAK,CAACjE,OAAO,EAC7B+F,IAAI,CAAChI,UAAU,CAACmI,YAAY,CAAC,CAAC,CAAC,CAACjC,KAAK,EAAEiC,YAAY,CAAC,CAAC,CAAC,CAACjC,KAAK,CAAC,EAC7D,EAAE,EACF,YAAY,EACZ,aAAa,CACd;IACD,IAAI,CAACiC,YAAY,GAAGA,YAA0C;;EAC/DH,IAAA,CAhCahI,UAAU,GAAjB,SAAAA,WAAkBqI,MAAa,EAAEC,MAAa;;IACnD,IAAMC,MAAM,GAAGF,MAAM,CAAChG,WAAW,CAACiG,MAAM,CAAC,GAAG,CAACD,MAAM,EAAEC,MAAM,CAAC,GAAG,CAACA,MAAM,EAAED,MAAM,CAAC,CAAA;IAE/E,IAAI,EAAAG,mBAAA,GAAAT,kBAAkB,cAAAS,mBAAA,wBAAAC,qBAAA,GAAlBD,mBAAA,CAAqBD,MAAM,CAAC,CAAC,CAAC,CAACzI,OAAO,CAAC,cAAA2I,qBAAA,uBAAvCA,qBAAA,CAA0CF,MAAM,CAAC,CAAC,CAAC,CAACzI,OAAO,CAAC,MAAK4I,SAAS,EAAE;MAAA,IAAAC,oBAAA,EAAAC,SAAA,EAAAC,SAAA;MAC9Ed,kBAAkB,GAAAe,QAAA,KACbf,kBAAkB,GAAAc,SAAA,OAAAA,SAAA,CACpBN,MAAM,CAAC,CAAC,CAAC,CAACzI,OAAO,IAAAgJ,QAAA,MAAAH,oBAAA,GACbZ,kBAAkB,cAAAY,oBAAA,uBAAlBA,oBAAA,CAAqBJ,MAAM,CAAC,CAAC,CAAC,CAACzI,OAAO,CAAC,GAAA8I,SAAA,OAAAA,SAAA,CACzCL,MAAM,CAAC,CAAC,CAAC,CAACzI,OAAO,IAAGiJ,yBAAiB,CACpC3L,eAAe,EACf4L,kBAAS,CAAC,CAAC,OAAO,CAAC,EAAE,CAACC,aAAI,CAAC,CAAC,SAAS,EAAE,SAAS,CAAC,EAAE,CAACV,MAAM,CAAC,CAAC,CAAC,CAACzI,OAAO,EAAEyI,MAAM,CAAC,CAAC,CAAC,CAACzI,OAAO,CAAC,CAAC,CAAC,CAAC,EAC5FzC,cAAc,CACf,EAAAuL,SAAA,IAAAC,SAAA,EAEJ;;IAGH,OAAOd,kBAAkB,CAACQ,MAAM,CAAC,CAAC,CAAC,CAACzI,OAAO,CAAC,CAACyI,MAAM,CAAC,CAAC,CAAC,CAACzI,OAAO,CAAC;;;;;;EAiBjE,IAAAoC,MAAA,GAAA8F,IAAA,CAAAhJ,SAAA;EAAAkD,MAAA,CAIOgH,aAAa,GAAb,SAAAA,cAAchD,KAAY;IAC/B,OAAOA,KAAK,CAAC/D,MAAM,CAAC,IAAI,CAACiF,MAAM,CAAC,IAAIlB,KAAK,CAAC/D,MAAM,CAAC,IAAI,CAACgH,MAAM,CAAC;;;;;;;;;EAiB/DjH,MAAA,CAIOkH,OAAO,GAAP,SAAAA,QAAQlD,KAAY;IACzB,CAAU,IAAI,CAACgD,aAAa,CAAChD,KAAK,CAAC,GAAAxG,CAAnCC,SAAS,QAA4B,OAAO;IAC5C,OAAOuG,KAAK,CAAC/D,MAAM,CAAC,IAAI,CAACiF,MAAM,CAAC,GAAG,IAAI,CAACiC,WAAW,GAAG,IAAI,CAACC,WAAW;;;;;EAGxEpH,MAAA,CAuBOqH,SAAS,GAAT,SAAAA,UAAUrD,KAAY;IAC3B,CAAU,IAAI,CAACgD,aAAa,CAAChD,KAAK,CAAC,GAAAxG,CAAnCC,SAAS,QAA4B,OAAO;IAC5C,OAAOuG,KAAK,CAAC/D,MAAM,CAAC,IAAI,CAACiF,MAAM,CAAC,GAAG,IAAI,CAACC,QAAQ,GAAG,IAAI,CAACC,QAAQ;GACjE;EAAApF,MAAA,CAEMsH,eAAe,GAAf,SAAAA,gBAAgBC,WAAwB;IAC7C,CAAU,IAAI,CAACP,aAAa,CAACO,WAAW,CAACvD,KAAK,CAAC,GAAAxG,CAA/CC,SAAS,QAAwC,OAAO;IACxD,IAAIpC,IAAI,CAACwG,KAAK,CAAC,IAAI,CAACsD,QAAQ,CAACvB,GAAG,EAAErI,IAAI,CAAC,IAAIF,IAAI,CAACwG,KAAK,CAAC,IAAI,CAACuD,QAAQ,CAACxB,GAAG,EAAErI,IAAI,CAAC,EAAE;MAC9E,MAAM,IAAIc,yBAAyB,EAAE;;IAEvC,IAAMmL,YAAY,GAAG,IAAI,CAACH,SAAS,CAACE,WAAW,CAACvD,KAAK,CAAC;IACtD,IAAMyD,aAAa,GAAG,IAAI,CAACJ,SAAS,CAACE,WAAW,CAACvD,KAAK,CAAC/D,MAAM,CAAC,IAAI,CAACiF,MAAM,CAAC,GAAG,IAAI,CAAC+B,MAAM,GAAG,IAAI,CAAC/B,MAAM,CAAC;IACvG,IAAMzD,SAAS,GAAGpG,IAAI,CAACyG,QAAQ,CAACyF,WAAW,CAAC3D,GAAG,EAAE6D,aAAa,CAAC7D,GAAG,CAAC;IACnE,IAAMlC,WAAW,GAAGrG,IAAI,CAACoD,GAAG,CAAC+I,YAAY,CAAC5D,GAAG,EAAE2D,WAAW,CAAC3D,GAAG,CAAC;IAC/D,IAAM8D,YAAY,GAAG,IAAI5D,WAAW,CAClCyD,WAAW,CAACvD,KAAK,CAAC/D,MAAM,CAAC,IAAI,CAACiF,MAAM,CAAC,GAAG,IAAI,CAAC+B,MAAM,GAAG,IAAI,CAAC/B,MAAM,EACjE7J,IAAI,CAACqD,MAAM,CAAC+C,SAAS,EAAEC,WAAW,CAAC,CACpC;IACD,IAAIrG,IAAI,CAACwG,KAAK,CAAC6F,YAAY,CAAC9D,GAAG,EAAErI,IAAI,CAAC,EAAE;MACtC,MAAM,IAAI0B,4BAA4B,EAAE;;IAE1C,OAAO,CAACyK,YAAY,EAAE,IAAI5B,IAAI,CAAC0B,YAAY,CAAC/I,GAAG,CAAC8I,WAAW,CAAC,EAAEE,aAAa,CAAC1F,QAAQ,CAAC2F,YAAY,CAAC,CAAC,CAAC;GACrG;EAAA1H,MAAA,CAEM2H,cAAc,GAAd,SAAAA,eAAeD,YAAyB;IAC7C,CAAU,IAAI,CAACV,aAAa,CAACU,YAAY,CAAC1D,KAAK,CAAC,GAAAxG,CAAhDC,SAAS,QAAyC,OAAO;IACzD,IACEpC,IAAI,CAACwG,KAAK,CAAC,IAAI,CAACsD,QAAQ,CAACvB,GAAG,EAAErI,IAAI,CAAC,IACnCF,IAAI,CAACwG,KAAK,CAAC,IAAI,CAACuD,QAAQ,CAACxB,GAAG,EAAErI,IAAI,CAAC,IACnCF,IAAI,CAACkC,kBAAkB,CAACmK,YAAY,CAAC9D,GAAG,EAAE,IAAI,CAACyD,SAAS,CAACK,YAAY,CAAC1D,KAAK,CAAC,CAACJ,GAAG,CAAC,EACjF;MACA,MAAM,IAAIvH,yBAAyB,EAAE;;IAGvC,IAAMoL,aAAa,GAAG,IAAI,CAACJ,SAAS,CAACK,YAAY,CAAC1D,KAAK,CAAC;IACxD,IAAMwD,YAAY,GAAG,IAAI,CAACH,SAAS,CAACK,YAAY,CAAC1D,KAAK,CAAC/D,MAAM,CAAC,IAAI,CAACiF,MAAM,CAAC,GAAG,IAAI,CAAC+B,MAAM,GAAG,IAAI,CAAC/B,MAAM,CAAC;IACvG,IAAMzD,SAAS,GAAGpG,IAAI,CAACyG,QAAQ,CAAC0F,YAAY,CAAC5D,GAAG,EAAE8D,YAAY,CAAC9D,GAAG,CAAC;IACnE,IAAMlC,WAAW,GAAGrG,IAAI,CAAC0G,QAAQ,CAAC0F,aAAa,CAAC7D,GAAG,EAAE8D,YAAY,CAAC9D,GAAG,CAAC;IACtE,IAAM2D,WAAW,GAAG,IAAIzD,WAAW,CACjC4D,YAAY,CAAC1D,KAAK,CAAC/D,MAAM,CAAC,IAAI,CAACiF,MAAM,CAAC,GAAG,IAAI,CAAC+B,MAAM,GAAG,IAAI,CAAC/B,MAAM,EAClE7J,IAAI,CAACoD,GAAG,CAACpD,IAAI,CAACqD,MAAM,CAAC+C,SAAS,EAAEC,WAAW,CAAC,EAAElG,GAAG,CAAC,CACnD;IACD,OAAO,CAAC+L,WAAW,EAAE,IAAIzB,IAAI,CAAC0B,YAAY,CAAC/I,GAAG,CAAC8I,WAAW,CAAC,EAAEE,aAAa,CAAC1F,QAAQ,CAAC2F,YAAY,CAAC,CAAC,CAAC;GACpG;EAAA1H,MAAA,CAEM4H,kBAAkB,GAAlB,SAAAA,mBACLC,WAAwB,EACxB9B,YAAyB,EACzBC,YAAyB;IAEzB,CAAU6B,WAAW,CAAC7D,KAAK,CAAC/D,MAAM,CAAC,IAAI,CAACiG,cAAc,CAAC,GAAA1I,CAAvDC,SAAS,QAAgD,WAAW;IACpE,IAAMwI,YAAY,GAAGF,YAAY,CAAC/B,KAAK,CAAC7D,WAAW,CAAC6F,YAAY,CAAChC,KAAK,CAAC;MACnE,CAAC+B,YAAY,EAAEC,YAAY,CAAC,GAC5B,CAACA,YAAY,EAAED,YAAY,CAAC;IAChC,EAAUE,YAAY,CAAC,CAAC,CAAC,CAACjC,KAAK,CAAC/D,MAAM,CAAC,IAAI,CAACiF,MAAM,CAAC,IAAIe,YAAY,CAAC,CAAC,CAAC,CAACjC,KAAK,CAAC/D,MAAM,CAAC,IAAI,CAACgH,MAAM,CAAC,IAAAzJ,CAAhGC,SAAS,QAAyF,OAAO;IAEzG,IAAIqK,SAAe;IACnB,IAAIzM,IAAI,CAACwG,KAAK,CAACgG,WAAW,CAACjE,GAAG,EAAErI,IAAI,CAAC,EAAE;MACrCuM,SAAS,GAAGzM,IAAI,CAAC0G,QAAQ,CAAC3D,IAAI,CAAC/C,IAAI,CAACyG,QAAQ,CAACmE,YAAY,CAAC,CAAC,CAAC,CAACrC,GAAG,EAAEqC,YAAY,CAAC,CAAC,CAAC,CAACrC,GAAG,CAAC,CAAC,EAAExI,iBAAiB,CAAC;KAC5G,MAAM;MACL,IAAM2M,OAAO,GAAG1M,IAAI,CAACqD,MAAM,CAACrD,IAAI,CAACyG,QAAQ,CAACmE,YAAY,CAAC,CAAC,CAAC,CAACrC,GAAG,EAAEiE,WAAW,CAACjE,GAAG,CAAC,EAAE,IAAI,CAACuB,QAAQ,CAACvB,GAAG,CAAC;MACnG,IAAMoE,OAAO,GAAG3M,IAAI,CAACqD,MAAM,CAACrD,IAAI,CAACyG,QAAQ,CAACmE,YAAY,CAAC,CAAC,CAAC,CAACrC,GAAG,EAAEiE,WAAW,CAACjE,GAAG,CAAC,EAAE,IAAI,CAACwB,QAAQ,CAACxB,GAAG,CAAC;MACnGkE,SAAS,GAAGzM,IAAI,CAACqC,eAAe,CAACqK,OAAO,EAAEC,OAAO,CAAC,GAAGD,OAAO,GAAGC,OAAO;;IAExE,IAAI,CAAC3M,IAAI,CAACmD,WAAW,CAACsJ,SAAS,EAAEvM,IAAI,CAAC,EAAE;MACtC,MAAM,IAAI0B,4BAA4B,EAAE;;IAE1C,OAAO,IAAI6G,WAAW,CAAC,IAAI,CAACoC,cAAc,EAAE4B,SAAS,CAAC;GACvD;EAAA9H,MAAA,CAEMiI,iBAAiB,GAAjB,SAAAA,kBACLjE,KAAY,EACZ6D,WAAwB,EACxBC,SAAsB,EACtBI,OACAC,KAAiB;QADjBD;MAAAA,QAAiB,KAAK;;IAGtB,CAAU,IAAI,CAAClB,aAAa,CAAChD,KAAK,CAAC,GAAAxG,CAAnCC,SAAS,QAA4B,OAAO;IAC5C,CAAUoK,WAAW,CAAC7D,KAAK,CAAC/D,MAAM,CAAC,IAAI,CAACiG,cAAc,CAAC,GAAA1I,CAAvDC,SAAS,QAAgD,cAAc;IACvE,CAAUqK,SAAS,CAAC9D,KAAK,CAAC/D,MAAM,CAAC,IAAI,CAACiG,cAAc,CAAC,GAAA1I,CAArDC,SAAS,QAA8C,WAAW;IAClE,CAAUpC,IAAI,CAACqC,eAAe,CAACoK,SAAS,CAAClE,GAAG,EAAEiE,WAAW,CAACjE,GAAG,CAAC,GAAApG,CAA9DC,SAAS,QAAuD,WAAW;IAE3E,IAAI2K,mBAAgC;IACpC,IAAI,CAACF,KAAK,EAAE;MACVE,mBAAmB,GAAGP,WAAW;KAClC,MAAM;MACL,CAAU,CAAC,CAACM,KAAK,GAAA3K,CAAjBC,SAAS,QAAU,QAAQ;MAC3B,IAAM4K,WAAW,GAAGpK,cAAc,CAACkK,KAAK,CAAC;MACzC,IAAI,CAAC9M,IAAI,CAACwG,KAAK,CAACwG,WAAW,EAAE9M,IAAI,CAAC,EAAE;QAClC,IAAM+M,KAAK,GAAGlK,IAAI,CAAC/C,IAAI,CAACyG,QAAQ,CAAC,IAAI,CAACqD,QAAQ,CAACvB,GAAG,EAAE,IAAI,CAACwB,QAAQ,CAACxB,GAAG,CAAC,CAAC;QACvE,IAAM2E,SAAS,GAAGnK,IAAI,CAACiK,WAAW,CAAC;QACnC,IAAIhN,IAAI,CAACmD,WAAW,CAAC8J,KAAK,EAAEC,SAAS,CAAC,EAAE;UACtC,IAAM9G,SAAS,GAAGpG,IAAI,CAACyG,QAAQ,CAAC+F,WAAW,CAACjE,GAAG,EAAEvI,IAAI,CAAC0G,QAAQ,CAACuG,KAAK,EAAEC,SAAS,CAAC,CAAC;UACjF,IAAM7G,WAAW,GAAGrG,IAAI,CAACoD,GAAG,CAACpD,IAAI,CAACyG,QAAQ,CAACwG,KAAK,EAAE3M,IAAI,CAAC,EAAE4M,SAAS,CAAC;UACnE,IAAMC,YAAY,GAAGnN,IAAI,CAACqD,MAAM,CAAC+C,SAAS,EAAEC,WAAW,CAAC;UACxD0G,mBAAmB,GAAGP,WAAW,CAACpJ,GAAG,CAAC,IAAIqF,WAAW,CAAC,IAAI,CAACoC,cAAc,EAAEsC,YAAY,CAAC,CAAC;SAC1F,MAAM;UACLJ,mBAAmB,GAAGP,WAAW;;OAEpC,MAAM;QACLO,mBAAmB,GAAGP,WAAW;;;IAIrC,OAAO,IAAI/D,WAAW,CACpBE,KAAK,EACL3I,IAAI,CAACqD,MAAM,CAACrD,IAAI,CAACyG,QAAQ,CAACgG,SAAS,CAAClE,GAAG,EAAE,IAAI,CAACyD,SAAS,CAACrD,KAAK,CAAC,CAACJ,GAAG,CAAC,EAAEwE,mBAAmB,CAACxE,GAAG,CAAC,CAC9F;GACF;EAAAX,YAAA,CAAA6C,IAAA;IAAA5C,GAAA;IAAAC,GAAA,EAvJD,SAAAA;MACE,OAAO,IAAIc,KAAK,CAAC,IAAI,CAACiB,MAAM,EAAE,IAAI,CAAC+B,MAAM,EAAE,IAAI,CAAChB,YAAY,CAAC,CAAC,CAAC,CAACrC,GAAG,EAAE,IAAI,CAACqC,YAAY,CAAC,CAAC,CAAC,CAACrC,GAAG,CAAC;;;;;;IAGhGV,GAAA;IAAAC,GAAA,EAGA,SAAAA;MACE,OAAO,IAAIc,KAAK,CAAC,IAAI,CAACgD,MAAM,EAAE,IAAI,CAAC/B,MAAM,EAAE,IAAI,CAACe,YAAY,CAAC,CAAC,CAAC,CAACrC,GAAG,EAAE,IAAI,CAACqC,YAAY,CAAC,CAAC,CAAC,CAACrC,GAAG,CAAC;;;IAC/FV,GAAA;IAAAC,GAAA,EAcD,SAAAA;MACE,OAAO,IAAI,CAAC+B,MAAM,CAACnF,OAAO;;;IAC3BmD,GAAA;IAAAC,GAAA,EAED,SAAAA;MACE,OAAO,IAAI,CAAC8C,YAAY,CAAC,CAAC,CAAC,CAACjC,KAAK;;;IAClCd,GAAA;IAAAC,GAAA,EAED,SAAAA;MACE,OAAO,IAAI,CAAC8C,YAAY,CAAC,CAAC,CAAC,CAACjC,KAAK;;;IAClCd,GAAA;IAAAC,GAAA,EAED,SAAAA;MACE,OAAO,IAAI,CAAC8C,YAAY,CAAC,CAAC,CAAC;;;IAC5B/C,GAAA;IAAAC,GAAA,EAED,SAAAA;MACE,OAAO,IAAI,CAAC8C,YAAY,CAAC,CAAC,CAAC;;;EAC5B,OAAAH,IAAA;AAAA;;ICzGU2C,KAAK;EAOhB,SAAAA,MAAmB/D,KAAa,EAAEgE,KAAe,EAAEC,MAAiB;IAClE,EAAUjE,KAAK,CAACzF,MAAM,GAAG,CAAC,IAAAzB,CAA1BC,SAAS,QAAmB,OAAO;IACnC,CACEiH,KAAK,CAACkE,KAAK,CAAC,UAAA5D,IAAI;MAAA,OAAIA,IAAI,CAACjF,OAAO,KAAK2E,KAAK,CAAC,CAAC,CAAC,CAAC3E,OAAO;MAAC,GAAAvC,CADxDC,SAAS,QAEP,WAAW;IAEb,EACGiL,KAAK,YAAY7I,KAAK,IAAI6E,KAAK,CAAC,CAAC,CAAC,CAACsC,aAAa,CAAC0B,KAAK,CAAC,IACrDA,KAAK,KAAK9I,KAAK,IAAI8E,KAAK,CAAC,CAAC,CAAC,CAACsC,aAAa,CAACxG,IAAI,CAACkE,KAAK,CAAC,CAAC,CAAC,CAAC3E,OAAO,CAAC,CAAE,IAAAvC,CAFvEC,SAAS,QAGP,OAAO;IAET,EACE,OAAOkL,MAAM,KAAK,WAAW,IAC1BA,MAAM,YAAY9I,KAAK,IAAI6E,KAAK,CAACA,KAAK,CAACzF,MAAM,GAAG,CAAC,CAAC,CAAC+H,aAAa,CAAC2B,MAAM,CAAE,IACzEA,MAAM,KAAK/I,KAAK,IAAI8E,KAAK,CAACA,KAAK,CAACzF,MAAM,GAAG,CAAC,CAAC,CAAC+H,aAAa,CAACxG,IAAI,CAACkE,KAAK,CAAC,CAAC,CAAC,CAAC3E,OAAO,CAAC,CAAE,IAAAvC,CAHvFC,SAAS,QAIP,QAAQ;IAGV,IAAMwH,IAAI,GAAY,CAACyD,KAAK,YAAY7I,KAAK,GAAG6I,KAAK,GAAGlI,IAAI,CAACkE,KAAK,CAAC,CAAC,CAAC,CAAC3E,OAAO,CAAC,CAAC;IAC/E,SAAAyE,SAAA,GAAAC,+BAAA,CAAwBC,KAAK,CAACC,OAAO,EAAE,GAAAC,KAAA,IAAAA,KAAA,GAAAJ,SAAA,IAAAK,IAAA,GAAE;MAAA,IAAAC,WAAA,GAAAF,KAAA,CAAAvH,KAAA;QAA7B0H,CAAC,GAAAD,WAAA;QAAEE,IAAI,GAAAF,WAAA;MACjB,IAAM+D,YAAY,GAAG5D,IAAI,CAACF,CAAC,CAAC;MAC5B,EAAU8D,YAAY,CAAC5I,MAAM,CAAC+E,IAAI,CAACE,MAAM,CAAC,IAAI2D,YAAY,CAAC5I,MAAM,CAAC+E,IAAI,CAACiC,MAAM,CAAC,IAAAzJ,CAA9EC,SAAS,QAAuE,MAAM;MACtF,IAAMkL,OAAM,GAAGE,YAAY,CAAC5I,MAAM,CAAC+E,IAAI,CAACE,MAAM,CAAC,GAAGF,IAAI,CAACiC,MAAM,GAAGjC,IAAI,CAACE,MAAM;MAC3ED,IAAI,CAAC/F,IAAI,CAACyJ,OAAM,CAAC;;IAGnB,IAAI,CAACjE,KAAK,GAAGA,KAAK;IAClB,IAAI,CAACO,IAAI,GAAGA,IAAI;IAChB,IAAI,CAAC6D,QAAQ,GAAG7E,KAAK,CAACI,SAAS,CAAC,IAAI,CAAC;IACrC,IAAI,CAACqE,KAAK,GAAGA,KAAK;IAClB,IAAI,CAACC,MAAM,GAAGA,MAAM,aAANA,MAAM,cAANA,MAAM,GAAI1D,IAAI,CAACA,IAAI,CAAChG,MAAM,GAAG,CAAC,CAAC;;EAC9CgE,YAAA,CAAAwF,KAAA;IAAAvF,GAAA;IAAAC,GAAA,EAED,SAAAA;MACE,OAAO,IAAI,CAACuB,KAAK,CAAC,CAAC,CAAC,CAAC3E,OAAO;;;EAC7B,OAAA0I,KAAA;AAAA;;AC/CH,IAAMM,YAAY,gBAAG,IAAIvH,QAAQ,CAAC3F,IAAI,CAAC;AAEvC,IAAamN,OAAQ,0BAAA1F,SAAA;EAAA/G,cAAA,CAAAyM,OAAA,EAAA1F,SAAA;EAAA,SAAA0F;IAAA,OAAA1F,SAAA,CAAA2F,KAAA,OAAAC,SAAA;;EAAA,IAAAlJ,MAAA,GAAAgJ,OAAA,CAAAlM,SAAA;EAAAkD,MAAA,CACZiC,aAAa,GAAb,SAAAA,cAAcC,mBAA+BC,MAAe,EAAEC,QAAmB;QAAnEF;MAAAA,oBAA4B,CAAC;;IAChD,OAAO,IAAI,CAACJ,QAAQ,CAACiH,YAAY,CAAC,CAAC9G,aAAa,CAACC,iBAAiB,EAAEC,MAAM,EAAEC,QAAQ,CAAC;GACtF;EAAApC,MAAA,CAEM8C,OAAO,GAAP,SAAAA,QAAQD,eAA2BV,MAAe,EAAEC,QAAmB;QAA/DS;MAAAA,gBAAwB,CAAC;;IACtC,OAAO,IAAI,CAACf,QAAQ,CAACiH,YAAY,CAAC,CAACjG,OAAO,CAACD,aAAa,EAAEV,MAAM,EAAEC,QAAQ,CAAC;GAC5E;EAAA,OAAA4G,OAAA;AAAA,EAP0BxH,QAAQ;;ACUrC;;;;;;AAMA,SAAS2H,kBAAkBA,CAACL,QAAe,EAAEvB,WAA2B,EAAEG,YAA4B;EACpG,IAAM0B,UAAU,GAAGN,QAAQ,CAAClF,GAAG,CAAC9B,QAAQ,CAACyF,WAAW,CAAC3D,GAAG,CAAC;;EAEzD,IAAMyF,QAAQ,GAAGD,UAAU,CAACrH,QAAQ,CAAC2F,YAAY,CAAC9D,GAAG,CAAC,CAAClF,MAAM,CAAC0K,UAAU,CAAC;EACzE,OAAO,IAAIJ,OAAO,CAACK,QAAQ,CAAC5H,SAAS,EAAE4H,QAAQ,CAAC3H,WAAW,CAAC;AAC9D;AAQA;AACA;AACA,SAAgB4H,qBAAqBA,CAACC,CAAc,EAAEC,CAAc;;EAElE,CAAUnJ,cAAc,CAACkJ,CAAC,CAAChC,WAAW,CAAChE,QAAQ,EAAEiG,CAAC,CAACjC,WAAW,CAAChE,QAAQ,CAAC,GAAA/F,CAAxEC,SAAS,QAAiE,gBAAgB;EAC1F,CAAU4C,cAAc,CAACkJ,CAAC,CAAC7B,YAAY,CAACnE,QAAQ,EAAEiG,CAAC,CAAC9B,YAAY,CAACnE,QAAQ,CAAC,GAAA/F,CAA1EC,SAAS,QAAmE,iBAAiB;EAC7F,IAAI8L,CAAC,CAAC7B,YAAY,CAAC1F,OAAO,CAACwH,CAAC,CAAC9B,YAAY,CAAC,EAAE;IAC1C,IAAI6B,CAAC,CAAChC,WAAW,CAACvF,OAAO,CAACwH,CAAC,CAACjC,WAAW,CAAC,EAAE;MACxC,OAAO,CAAC;;;IAGV,IAAIgC,CAAC,CAAChC,WAAW,CAAC5I,QAAQ,CAAC6K,CAAC,CAACjC,WAAW,CAAC,EAAE;MACzC,OAAO,CAAC,CAAC;KACV,MAAM;MACL,OAAO,CAAC;;GAEX,MAAM;;IAEL,IAAIgC,CAAC,CAAC7B,YAAY,CAAC/I,QAAQ,CAAC6K,CAAC,CAAC9B,YAAY,CAAC,EAAE;MAC3C,OAAO,CAAC;KACT,MAAM;MACL,OAAO,CAAC,CAAC;;;AAGf;AAEA;AACA,SAAgB+B,eAAeA,CAACF,CAAQ,EAAEC,CAAQ;EAChD,IAAME,MAAM,GAAGJ,qBAAqB,CAACC,CAAC,EAAEC,CAAC,CAAC;EAC1C,IAAIE,MAAM,KAAK,CAAC,EAAE;IAChB,OAAOA,MAAM;;;EAIf,IAAIH,CAAC,CAACI,WAAW,CAAChL,QAAQ,CAAC6K,CAAC,CAACG,WAAW,CAAC,EAAE;IACzC,OAAO,CAAC,CAAC;GACV,MAAM,IAAIJ,CAAC,CAACI,WAAW,CAACnL,WAAW,CAACgL,CAAC,CAACG,WAAW,CAAC,EAAE;IACnD,OAAO,CAAC;;;EAIV,OAAOJ,CAAC,CAACjF,KAAK,CAACW,IAAI,CAAChG,MAAM,GAAGuK,CAAC,CAAClF,KAAK,CAACW,IAAI,CAAChG,MAAM;AAClD;AASA;;;;;AAKA,SAAS2K,aAAaA,CAACjE,cAA8B,EAAE5F,OAAgB;EACrE,IAAI4F,cAAc,YAAY7B,WAAW,EAAE,OAAO6B,cAAc;EAChE,IAAIA,cAAc,CAACpC,QAAQ,KAAK3D,KAAK,EAAE,OAAO,IAAIkE,WAAW,CAACtD,IAAI,CAACT,OAAO,CAAC,EAAE4F,cAAc,CAAC/B,GAAG,CAAC;EAChG,CAAepG,CAAfC,SAAS,QAAQ,UAAU;AAC7B;AAEA,SAASoM,eAAeA,CAACtG,QAAkB,EAAExD,OAAgB;EAC3D,IAAIwD,QAAQ,YAAY1D,KAAK,EAAE,OAAO0D,QAAQ;EAC9C,IAAIA,QAAQ,KAAK3D,KAAK,EAAE,OAAOY,IAAI,CAACT,OAAO,CAAC;EAC5C,CAAevC,CAAfC,SAAS,QAAQ,UAAU;AAC7B;AAEA;;;;AAIA,IAAaqM,KAAK;EAgDhB,SAAAA,MAAmBxF,KAAY,EAAEd,MAAsB,EAAEuG,SAAoB;IAC3E,IAAMC,OAAO,GAAkB,IAAIC,KAAK,CAAC3F,KAAK,CAACW,IAAI,CAAChG,MAAM,CAAC;IAC3D,IAAMiL,SAAS,GAAW,IAAID,KAAK,CAAC3F,KAAK,CAACI,KAAK,CAACzF,MAAM,CAAC;IACvD,IAAI8K,SAAS,KAAK/O,iBAAS,CAACmP,WAAW,EAAE;MACvC,CAAU9J,cAAc,CAACmD,MAAM,CAACD,QAAQ,EAAEe,KAAK,CAACoE,KAAK,CAAC,GAAAlL,CAAtDC,SAAS,QAA+C,OAAO;MAC/DuM,OAAO,CAAC,CAAC,CAAC,GAAGJ,aAAa,CAACpG,MAAM,EAAEc,KAAK,CAACvE,OAAO,CAAC;MACjD,KAAK,IAAIgF,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGT,KAAK,CAACW,IAAI,CAAChG,MAAM,GAAG,CAAC,EAAE8F,CAAC,EAAE,EAAE;QAC9C,IAAMC,IAAI,GAAGV,KAAK,CAACI,KAAK,CAACK,CAAC,CAAC;QAC3B,IAAAqF,qBAAA,GAAiCpF,IAAI,CAACsC,eAAe,CAAC0C,OAAO,CAACjF,CAAC,CAAC,CAAC;UAA1D2C,YAAY,GAAA0C,qBAAA;UAAEC,QAAQ,GAAAD,qBAAA;QAC7BJ,OAAO,CAACjF,CAAC,GAAG,CAAC,CAAC,GAAG2C,YAAY;QAC7BwC,SAAS,CAACnF,CAAC,CAAC,GAAGsF,QAAQ;;KAE1B,MAAM;MACL,CAAUhK,cAAc,CAACmD,MAAM,CAACD,QAAQ,EAAEe,KAAK,CAACqE,MAAM,CAAC,GAAAnL,CAAvDC,SAAS,QAAgD,QAAQ;MACjEuM,OAAO,CAACA,OAAO,CAAC/K,MAAM,GAAG,CAAC,CAAC,GAAG2K,aAAa,CAACpG,MAAM,EAAEc,KAAK,CAACvE,OAAO,CAAC;MAClE,KAAK,IAAIgF,EAAC,GAAGT,KAAK,CAACW,IAAI,CAAChG,MAAM,GAAG,CAAC,EAAE8F,EAAC,GAAG,CAAC,EAAEA,EAAC,EAAE,EAAE;QAC9C,IAAMC,KAAI,GAAGV,KAAK,CAACI,KAAK,CAACK,EAAC,GAAG,CAAC,CAAC;QAC/B,IAAAuF,oBAAA,GAAgCtF,KAAI,CAAC2C,cAAc,CAACqC,OAAO,CAACjF,EAAC,CAAC,CAAC;UAAxDwC,WAAW,GAAA+C,oBAAA;UAAED,SAAQ,GAAAC,oBAAA;QAC5BN,OAAO,CAACjF,EAAC,GAAG,CAAC,CAAC,GAAGwC,WAAW;QAC5B2C,SAAS,CAACnF,EAAC,GAAG,CAAC,CAAC,GAAGsF,SAAQ;;;IAI/B,IAAI,CAAC/F,KAAK,GAAGA,KAAK;IAClB,IAAI,CAACyF,SAAS,GAAGA,SAAS;IAC1B,IAAI,CAACxC,WAAW,GACdwC,SAAS,KAAK/O,iBAAS,CAACmP,WAAW,GAC/B3G,MAAM,GACNc,KAAK,CAACoE,KAAK,KAAK9I,KAAK,GACnByD,cAAc,CAACM,KAAK,CAACqG,OAAO,CAAC,CAAC,CAAC,CAACpG,GAAG,CAAC,GACpCoG,OAAO,CAAC,CAAC,CAAC;IAClB,IAAI,CAACtC,YAAY,GACfqC,SAAS,KAAK/O,iBAAS,CAACuP,YAAY,GAChC/G,MAAM,GACNc,KAAK,CAACqE,MAAM,KAAK/I,KAAK,GACpByD,cAAc,CAACM,KAAK,CAACqG,OAAO,CAACA,OAAO,CAAC/K,MAAM,GAAG,CAAC,CAAC,CAAC2E,GAAG,CAAC,GACrDoG,OAAO,CAACA,OAAO,CAAC/K,MAAM,GAAG,CAAC,CAAC;IACnC,IAAI,CAACuL,cAAc,GAAG,IAAIvG,KAAK,CAC7B,IAAI,CAACsD,WAAW,CAAChE,QAAQ,EACzB,IAAI,CAACmE,YAAY,CAACnE,QAAQ,EAC1B,IAAI,CAACgE,WAAW,CAAC3D,GAAG,EACpB,IAAI,CAAC8D,YAAY,CAAC9D,GAAG,CACtB;IACD,IAAI,CAAC6G,YAAY,GAAGxG,KAAK,CAACI,SAAS,CAAC,IAAIoE,KAAK,CAACyB,SAAS,EAAE5F,KAAK,CAACoE,KAAK,CAAC,CAAC;IACtE,IAAI,CAACiB,WAAW,GAAGR,kBAAkB,CAAC7E,KAAK,CAACwE,QAAQ,EAAE,IAAI,CAACvB,WAAW,EAAE,IAAI,CAACG,YAAY,CAAC;;;;;;;EA9D5FoC,KAAA,CAKcY,OAAO,GAAd,SAAAA,QAAepG,KAAY,EAAEqG,QAAwB;IAC1D,OAAO,IAAIb,KAAK,CAACxF,KAAK,EAAEqG,QAAQ,EAAE3P,iBAAS,CAACmP,WAAW,CAAC;;;;;;;EAG1DL,KAAA,CAKcc,QAAQ,GAAf,SAAAA,SAAgBtG,KAAY,EAAEuG,SAAyB;IAC5D,OAAO,IAAIf,KAAK,CAACxF,KAAK,EAAEuG,SAAS,EAAE7P,iBAAS,CAACuP,YAAY,CAAC;;;;;;EAkD5D,IAAAvK,MAAA,GAAA8J,KAAA,CAAAhN,SAAA;EAAAkD,MAAA,CAIO8K,gBAAgB,GAAhB,SAAAA,iBAAiBC,iBAA0B;IAChD,CAAU,CAACA,iBAAiB,CAACpM,QAAQ,CAACpD,IAAI,CAAC,GAAAiC,CAA3CC,SAAS,QAAoC,oBAAoB;IACjE,IAAI,IAAI,CAACsM,SAAS,KAAK/O,iBAAS,CAACuP,YAAY,EAAE;MAC7C,OAAO,IAAI,CAAC7C,YAAY;KACzB,MAAM;MACL,IAAMsD,yBAAyB,GAAG,IAAIxJ,QAAQ,CAAChG,GAAG,CAAC,CAChDiD,GAAG,CAACsM,iBAAiB,CAAC,CACtBpJ,MAAM,EAAE,CACRG,QAAQ,CAAC,IAAI,CAAC4F,YAAY,CAAC9D,GAAG,CAAC,CAAClB,QAAQ;MAC3C,OAAO,IAAI,CAACgF,YAAY,YAAY5D,WAAW,GAC3C,IAAIA,WAAW,CAAC,IAAI,CAAC4D,YAAY,CAAC1D,KAAK,EAAEgH,yBAAyB,CAAC,GACnE3H,cAAc,CAACM,KAAK,CAACqH,yBAAyB,CAAC;;;;;;;EAIvDhL,MAAA,CAIOiL,eAAe,GAAf,SAAAA,gBAAgBF,iBAA0B;IAC/C,CAAU,CAACA,iBAAiB,CAACpM,QAAQ,CAACpD,IAAI,CAAC,GAAAiC,CAA3CC,SAAS,QAAoC,oBAAoB;IACjE,IAAI,IAAI,CAACsM,SAAS,KAAK/O,iBAAS,CAACmP,WAAW,EAAE;MAC5C,OAAO,IAAI,CAAC5C,WAAW;KACxB,MAAM;MACL,IAAM2D,wBAAwB,GAAG,IAAI1J,QAAQ,CAAChG,GAAG,CAAC,CAACiD,GAAG,CAACsM,iBAAiB,CAAC,CAACjJ,QAAQ,CAAC,IAAI,CAACyF,WAAW,CAAC3D,GAAG,CAAC,CAAClB,QAAQ;MACjH,OAAO,IAAI,CAAC6E,WAAW,YAAYzD,WAAW,GAC1C,IAAIA,WAAW,CAAC,IAAI,CAACyD,WAAW,CAACvD,KAAK,EAAEkH,wBAAwB,CAAC,GACjE7H,cAAc,CAACM,KAAK,CAACuH,wBAAwB,CAAC;;;;;;;;;;;;;;;;;EAItDpB,KAAA,CAccqB,gBAAgB,GAAvB,SAAAA,iBACLzG,KAAa,EACb0G,gBAAgC,EAChCC,WAAqB,EAAAC,KAAA;;EAGrBC,cACAC,kBACAC;kCAJuD,EAAE,GAAAH,KAAA;MAAAI,kBAAA,GAAAC,IAAA,CAAvDC,aAAa;MAAbA,aAAa,GAAAF,kBAAA,cAAG,CAAC,GAAAA,kBAAA;MAAAG,YAAA,GAAAF,IAAA,CAAEG,OAAO;MAAPA,OAAO,GAAAD,YAAA,cAAG,CAAC,GAAAA,YAAA;IAAA,IAEhCN;MAAAA,eAAuB,EAAE;;IAAA,IACzBC;MAAAA,mBAAmCJ,gBAAgB;;IAAA,IACnDK;MAAAA,aAAsB,EAAE;;IAExB,EAAU/G,KAAK,CAACzF,MAAM,GAAG,CAAC,IAAAzB,CAA1BC,SAAS,QAAmB,OAAO;IACnC,EAAUqO,OAAO,GAAG,CAAC,IAAAtO,CAArBC,SAAS,QAAc,UAAU;IACjC,EAAU+N,gBAAgB,KAAKJ,gBAAgB,IAAIG,YAAY,CAACtM,MAAM,GAAG,CAAC,IAAAzB,CAA1EC,SAAS,QAAmE,mBAAmB;IAC/F,IAAMsC,OAAO,GACXqL,gBAAgB,YAAYtH,WAAW,GACnCsH,gBAAgB,CAACpH,KAAK,CAACjE,OAAO,GAC9BsL,WAAW,YAAYxL,KAAK,GAC1BwL,WAAW,CAACtL,OAAO,GACnByG,SAAS;IACjB,EAAUzG,OAAO,KAAKyG,SAAS,IAAAhJ,CAA/BC,SAAS,QAAwB,UAAU;IAE3C,IAAMkN,QAAQ,GAAGf,aAAa,CAACwB,gBAAgB,EAAErL,OAAO,CAAC;IACzD,IAAMgM,QAAQ,GAAGlC,eAAe,CAACwB,WAAW,EAAEtL,OAAO,CAAC;IACtD,KAAK,IAAIgF,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGL,KAAK,CAACzF,MAAM,EAAE8F,CAAC,EAAE,EAAE;MACrC,IAAMC,IAAI,GAAGN,KAAK,CAACK,CAAC,CAAC;;MAErB,IAAI,CAACC,IAAI,CAACE,MAAM,CAACjF,MAAM,CAAC0K,QAAQ,CAAC3G,KAAK,CAAC,IAAI,CAACgB,IAAI,CAACiC,MAAM,CAAChH,MAAM,CAAC0K,QAAQ,CAAC3G,KAAK,CAAC,EAAE;MAChF,IAAIgB,IAAI,CAACG,QAAQ,CAACnD,OAAO,CAACzG,IAAI,CAAC,IAAIyJ,IAAI,CAACI,QAAQ,CAACpD,OAAO,CAACzG,IAAI,CAAC,EAAE;MAEhE,IAAIsP,SAAsB;MAC1B,IAAI;QACF;QAAC,IAAAmB,sBAAA,GAAchH,IAAI,CAACsC,eAAe,CAACqD,QAAQ,CAAC;QAA3CE,SAAS,GAAAmB,sBAAA;OACZ,CAAC,OAAOhO,KAAK,EAAE;;QAEd,IAAIA,KAAK,CAACiO,8BAA8B,EAAE;UACxC;;QAEF,MAAMjO,KAAK;;;MAGb,IAAI6M,SAAS,CAAC7G,KAAK,CAAC/D,MAAM,CAAC8L,QAAQ,CAAC,EAAE;QACpClN,YAAY,CACV4M,UAAU,EACV,IAAI3B,KAAK,CACP,IAAIrB,KAAK,IAAAyD,MAAA,CAAKX,YAAY,GAAEvG,IAAI,IAAGwG,gBAAgB,CAACjI,QAAQ,EAAE8H,WAAW,CAAC,EAC1EG,gBAAgB,EAChBxQ,iBAAS,CAACmP,WAAW,CACtB,EACDyB,aAAa,EACbnC,eAAe,CAChB;OACF,MAAM,IAAIqC,OAAO,GAAG,CAAC,IAAIpH,KAAK,CAACzF,MAAM,GAAG,CAAC,EAAE;QAC1C,IAAMkN,sBAAsB,GAAGzH,KAAK,CAACW,KAAK,CAAC,CAAC,EAAEN,CAAC,CAAC,CAACmH,MAAM,CAACxH,KAAK,CAACW,KAAK,CAACN,CAAC,GAAG,CAAC,EAAEL,KAAK,CAACzF,MAAM,CAAC,CAAC;;QAGzF6K,KAAK,CAACqB,gBAAgB,CACpBgB,sBAAsB,EACtBtB,SAAS,EACTQ,WAAW,EACX;UACEO,aAAa,EAAbA,aAAa;UACbE,OAAO,EAAEA,OAAO,GAAG;SACpB,KAAAI,MAAA,CACGX,YAAY,GAAEvG,IAAI,IACtBwG,gBAAgB,EAChBC,UAAU,CACX;;;IAIL,OAAOA,UAAU;;;;;;;;;;;;;;;;;EAGnB3B,KAAA,CAecsC,iBAAiB,GAAxB,SAAAA,kBACL1H,KAAa,EACb2H,UAAoB,EACpBC,iBAAiC,EAAAC,MAAA;;EAGjChB,cACAiB,mBACAf;oCAJuD,EAAE,GAAAc,MAAA;MAAAE,mBAAA,GAAAC,KAAA,CAAvDd,aAAa;MAAbA,aAAa,GAAAa,mBAAA,cAAG,CAAC,GAAAA,mBAAA;MAAAE,aAAA,GAAAD,KAAA,CAAEZ,OAAO;MAAPA,OAAO,GAAAa,aAAA,cAAG,CAAC,GAAAA,aAAA;IAAA,IAEhCpB;MAAAA,eAAuB,EAAE;;IAAA,IACzBiB;MAAAA,oBAAoCF,iBAAiB;;IAAA,IACrDb;MAAAA,aAAsB,EAAE;;IAExB,EAAU/G,KAAK,CAACzF,MAAM,GAAG,CAAC,IAAAzB,CAA1BC,SAAS,QAAmB,OAAO;IACnC,EAAUqO,OAAO,GAAG,CAAC,IAAAtO,CAArBC,SAAS,QAAc,UAAU;IACjC,EAAU+O,iBAAiB,KAAKF,iBAAiB,IAAIf,YAAY,CAACtM,MAAM,GAAG,CAAC,IAAAzB,CAA5EC,SAAS,QAAqE,mBAAmB;IACjG,IAAMsC,OAAO,GACXuM,iBAAiB,YAAYxI,WAAW,GACpCwI,iBAAiB,CAACtI,KAAK,CAACjE,OAAO,GAC/BsM,UAAU,YAAYxM,KAAK,GACzBwM,UAAU,CAACtM,OAAO,GAClByG,SAAS;IACjB,EAAUzG,OAAO,KAAKyG,SAAS,IAAAhJ,CAA/BC,SAAS,QAAwB,UAAU;IAE3C,IAAMoN,SAAS,GAAGjB,aAAa,CAAC0C,iBAAiB,EAAEvM,OAAO,CAAC;IAC3D,IAAM6M,OAAO,GAAG/C,eAAe,CAACwC,UAAU,EAAEtM,OAAO,CAAC;IACpD,KAAK,IAAIgF,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGL,KAAK,CAACzF,MAAM,EAAE8F,CAAC,EAAE,EAAE;MACrC,IAAMC,IAAI,GAAGN,KAAK,CAACK,CAAC,CAAC;;MAErB,IAAI,CAACC,IAAI,CAACE,MAAM,CAACjF,MAAM,CAAC4K,SAAS,CAAC7G,KAAK,CAAC,IAAI,CAACgB,IAAI,CAACiC,MAAM,CAAChH,MAAM,CAAC4K,SAAS,CAAC7G,KAAK,CAAC,EAAE;MAClF,IAAIgB,IAAI,CAACG,QAAQ,CAACnD,OAAO,CAACzG,IAAI,CAAC,IAAIyJ,IAAI,CAACI,QAAQ,CAACpD,OAAO,CAACzG,IAAI,CAAC,EAAE;MAEhE,IAAIoP,QAAqB;MACzB,IAAI;QACF;QAAC,IAAAkC,qBAAA,GAAa7H,IAAI,CAAC2C,cAAc,CAACkD,SAAS,CAAC;QAA1CF,QAAQ,GAAAkC,qBAAA;OACX,CAAC,OAAO7O,KAAK,EAAE;;QAEd,IAAIA,KAAK,CAAC8O,2BAA2B,EAAE;UACrC;;QAEF,MAAM9O,KAAK;;;MAGb,IAAI2M,QAAQ,CAAC3G,KAAK,CAAC/D,MAAM,CAAC2M,OAAO,CAAC,EAAE;QAClC/N,YAAY,CACV4M,UAAU,EACV,IAAI3B,KAAK,CACP,IAAIrB,KAAK,EAAEzD,IAAI,EAAAkH,MAAA,CAAKX,YAAY,GAAGc,UAAU,EAAEG,iBAAiB,CAACjJ,QAAQ,CAAC,EAC1EiJ,iBAAiB,EACjBxR,iBAAS,CAACuP,YAAY,CACvB,EACDqB,aAAa,EACbnC,eAAe,CAChB;OACF,MAAM,IAAIqC,OAAO,GAAG,CAAC,IAAIpH,KAAK,CAACzF,MAAM,GAAG,CAAC,EAAE;QAC1C,IAAMkN,sBAAsB,GAAGzH,KAAK,CAACW,KAAK,CAAC,CAAC,EAAEN,CAAC,CAAC,CAACmH,MAAM,CAACxH,KAAK,CAACW,KAAK,CAACN,CAAC,GAAG,CAAC,EAAEL,KAAK,CAACzF,MAAM,CAAC,CAAC;;QAGzF6K,KAAK,CAACsC,iBAAiB,CACrBD,sBAAsB,EACtBE,UAAU,EACV1B,QAAQ,EACR;UACEiB,aAAa,EAAbA,aAAa;UACbE,OAAO,EAAEA,OAAO,GAAG;SACpB,GACA9G,IAAI,EAAAkH,MAAA,CAAKX,YAAY,GACtBiB,iBAAiB,EACjBf,UAAU,CACX;;;IAIL,OAAOA,UAAU;GAClB;EAAA3B,KAAA,CAEaiD,gBAAgB,GAAvB,SAAAA,iBAAwBhN,OAAgB,EAAEiN,UAAkB,EAAEC,QAAgB,EAAEpC,SAAyB;IAC9G,IAAMqC,SAAS,GAAkB,IAAIjD,KAAK,CAACgD,QAAQ,CAAChO,MAAM,GAAG,CAAC,CAAC;IAC/DiO,SAAS,CAAC,CAAC,CAAC,GAAGtD,aAAa,CAACiB,SAAS,EAAE9K,OAAO,CAAC;IAEhD,KAAK,IAAIgF,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGkI,QAAQ,CAAChO,MAAM,EAAE8F,CAAC,EAAE,EAAE;MACxC,IAAMC,IAAI,GAAGiI,QAAQ,CAAClI,CAAC,CAAC;MACxB,IAAAoI,sBAAA,GAAwBnI,IAAI,CAACsC,eAAe,CAAC4F,SAAS,CAACnI,CAAC,CAAC,CAAC;QAAnD2C,YAAY,GAAAyF,sBAAA;MACnBD,SAAS,CAACnI,CAAC,GAAG,CAAC,CAAC,GAAG2C,YAAY;;IAGjC,OAAOrM,IAAI,CAAC0G,QAAQ,CAACmL,SAAS,CAACA,SAAS,CAACjO,MAAM,GAAG,CAAC,CAAC,CAAC2E,GAAG,EAAEvI,IAAI,CAACC,MAAM,CAAC0R,UAAU,CAAC,CAAC;GACnF;EAAA,OAAAlD,KAAA;AAAA;;AC1WH,SAASsD,KAAKA,CAACzH,cAA8B;EAC3C,cAAYA,cAAc,CAAC/B,GAAG,CAACzF,QAAQ,CAAC,EAAE,CAAC;AAC7C;AAEA,IAAMkP,QAAQ,GAAG,KAAK;AAEtB;;;AAGA,IAAsBC,MAAM;;;;EAI1B,SAAAA;;;;;;EACAA,MAAA,CAKcC,kBAAkB,GAAzB,SAAAA,mBAA0BC,KAAY,EAAEC,OAA4C;IACzF,IAAMC,OAAO,GAAGF,KAAK,CAACjG,WAAW,CAAChE,QAAQ,KAAK3D,KAAK;IACpD,IAAM+N,QAAQ,GAAGH,KAAK,CAAC9F,YAAY,CAACnE,QAAQ,KAAK3D,KAAK;;IAEtD,CAAU,EAAE8N,OAAO,IAAIC,QAAQ,CAAC,GAAAnQ,CAAhCC,SAAS,QAAyB,cAAc;IAChD,EAAU,EAAE,KAAK,IAAIgQ,OAAO,CAAC,IAAIA,OAAO,CAACG,GAAG,GAAG,CAAC,IAAApQ,CAAhDC,SAAS,QAAyC,KAAK;IAEvD,IAAMoQ,EAAE,GAAWlQ,uBAAuB,CAAC8P,OAAO,CAACK,SAAS,CAAC;IAC7D,IAAMnD,QAAQ,GAAWyC,KAAK,CAACI,KAAK,CAACvC,eAAe,CAACwC,OAAO,CAACM,eAAe,CAAC,CAAC;IAC9E,IAAMlD,SAAS,GAAWuC,KAAK,CAACI,KAAK,CAAC1C,gBAAgB,CAAC2C,OAAO,CAACM,eAAe,CAAC,CAAC;IAChF,IAAM9I,IAAI,GAAauI,KAAK,CAAClJ,KAAK,CAACW,IAAI,CAAC+I,GAAG,CAAC,UAAChK,KAAK;MAAA,OAAKA,KAAK,CAACpG,OAAO;MAAC;IACrE,IAAMqQ,QAAQ,GACZ,KAAK,IAAIR,OAAO,UACP,CAACS,IAAI,CAACC,KAAK,CAAC,IAAIC,IAAI,EAAE,CAACC,OAAO,EAAE,GAAG,IAAI,CAAC,GAAGZ,OAAO,CAACG,GAAG,EAAEzP,QAAQ,CAAC,EAAE,CAAC,UACpEsP,OAAO,CAACQ,QAAQ,CAAC9P,QAAQ,CAAC,EAAE,CAAG;IAE1C,IAAMmQ,gBAAgB,GAAGC,OAAO,CAACd,OAAO,CAACe,aAAa,CAAC;IAEvD,IAAIC,UAAkB;IACtB,IAAIC,IAA2B;IAC/B,IAAIrR,KAAa;IACjB,QAAQmQ,KAAK,CAACzD,SAAS;MACrB,KAAK/O,iBAAS,CAACmP,WAAW;QACxB,IAAIuD,OAAO,EAAE;UAAA,IAAAiB,qBAAA;UACXF,UAAU,GAAGH,gBAAgB,GAAG,oDAAoD,GAAG,uBAAuB;;UAE9GI,IAAI,GAAGjB,OAAO,CAACmB,WAAW,GAAG,CAAC/D,SAAS,EAAE5F,IAAI,EAAE4I,EAAE,EAAEI,QAAQ,EAAE,EAAAU,qBAAA,GAAClB,OAAO,CAACV,gBAAgB,cAAA4B,qBAAA,cAAAA,qBAAA,GAAI,GAAG,CAAC,CAAC,GAAG,CAAC9D,SAAS,EAAE5F,IAAI,EAAE4I,EAAE,EAAEI,QAAQ,CAAC;UACjI5Q,KAAK,GAAGsN,QAAQ;SACjB,MAAM,IAAIgD,QAAQ,EAAE;UAAA,IAAAkB,sBAAA;UACnBJ,UAAU,GAAGH,gBAAgB,GAAG,oDAAoD,GAAG,uBAAuB;;UAE9GI,IAAI,GAAGjB,OAAO,CAACmB,WAAW,GAAG,CAACjE,QAAQ,EAAEE,SAAS,EAAE5F,IAAI,EAAE4I,EAAE,EAAEI,QAAQ,EAAE,EAAAY,sBAAA,GAACpB,OAAO,CAACV,gBAAgB,cAAA8B,sBAAA,cAAAA,sBAAA,GAAI,GAAG,CAAC,CAAC,GAAG,CAAClE,QAAQ,EAAEE,SAAS,EAAE5F,IAAI,EAAE4I,EAAE,EAAEI,QAAQ,CAAC;UACrJ5Q,KAAK,GAAGgQ,QAAQ;SACjB,MAAM;UAAA,IAAAyB,sBAAA;UACLL,UAAU,GAAGH,gBAAgB,GACzB,uDAAuD,GACvD,0BAA0B;;UAE9BI,IAAI,GAAGjB,OAAO,CAACmB,WAAW,GAAG,CAACjE,QAAQ,EAAEE,SAAS,EAAE5F,IAAI,EAAE4I,EAAE,EAAEI,QAAQ,EAAE,EAAAa,sBAAA,GAACrB,OAAO,CAACV,gBAAgB,cAAA+B,sBAAA,cAAAA,sBAAA,GAAI,GAAG,CAAC,CAAC,GAAG,CAACnE,QAAQ,EAAEE,SAAS,EAAE5F,IAAI,EAAE4I,EAAE,EAAEI,QAAQ,CAAC;UACrJ5Q,KAAK,GAAGgQ,QAAQ;;QAElB;MACF,KAAKrS,iBAAS,CAACuP,YAAY;QACzB,CAAU,CAAC+D,gBAAgB,GAAA9Q,CAA3BC,SAAS,QAAoB,eAAe;QAC5C,IAAIiQ,OAAO,EAAE;UAAA,IAAAqB,sBAAA;UACXN,UAAU,GAAG,uBAAuB;;UAEpCC,IAAI,GAAGjB,OAAO,CAACmB,WAAW,GAAG,CAAC/D,SAAS,EAAE5F,IAAI,EAAE4I,EAAE,EAAEI,QAAQ,EAAE,EAAAc,sBAAA,GAACtB,OAAO,CAACV,gBAAgB,cAAAgC,sBAAA,cAAAA,sBAAA,GAAI,GAAG,CAAC,CAAC,GAAG,CAAClE,SAAS,EAAE5F,IAAI,EAAE4I,EAAE,EAAEI,QAAQ,CAAC;UACjI5Q,KAAK,GAAGsN,QAAQ;SACjB,MAAM,IAAIgD,QAAQ,EAAE;UAAA,IAAAqB,sBAAA;UACnBP,UAAU,GAAG,uBAAuB;;UAEpCC,IAAI,GAAGjB,OAAO,CAACmB,WAAW,GAAG,CAAC/D,SAAS,EAAEF,QAAQ,EAAE1F,IAAI,EAAE4I,EAAE,EAAEI,QAAQ,EAAE,EAAAe,sBAAA,GAACvB,OAAO,CAACV,gBAAgB,cAAAiC,sBAAA,cAAAA,sBAAA,GAAI,GAAG,CAAC,CAAC,GAAG,CAACnE,SAAS,EAAEF,QAAQ,EAAE1F,IAAI,EAAE4I,EAAE,EAAEI,QAAQ,CAAC;UACrJ5Q,KAAK,GAAGgQ,QAAQ;SACjB,MAAM;UAAA,IAAA4B,sBAAA;UACLR,UAAU,GAAG,0BAA0B;;UAEvCC,IAAI,GAAGjB,OAAO,CAACmB,WAAW,GAAG,CAAC/D,SAAS,EAAEF,QAAQ,EAAE1F,IAAI,EAAE4I,EAAE,EAAEI,QAAQ,EAAE,EAAAgB,sBAAA,GAACxB,OAAO,CAACV,gBAAgB,cAAAkC,sBAAA,cAAAA,sBAAA,GAAI,GAAG,CAAC,CAAC,GAAG,CAACpE,SAAS,EAAEF,QAAQ,EAAE1F,IAAI,EAAE4I,EAAE,EAAEI,QAAQ,CAAC;UACrJ5Q,KAAK,GAAGgQ,QAAQ;;QAElB;;IAEJ,OAAO;MACLoB,UAAU,EAAVA,UAAU;MACVC,IAAI,EAAJA,IAAI;MACJrR,KAAK,EAALA;KACD;GACF;EAAA,OAAAiQ,MAAA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AClJH,AAWA,IAAI4B,oBAAoB,IAAAC,qBAAA,OAAAA,qBAAA,CACrBpU,eAAO,CAAC2F,OAAO,IAAG;EACjB,4CAA4C,EAAE,CAAC;CAChD,EAAAyO,qBAAA,CACF;AAED;;;AAGA,IAAsBC,OAAO;;;;EAI3B,SAAAA;;;;;;;;;EAEAA,OAAA,CAQoBC,cAAc,YAAAA,eAChCtP,OAAgB,EAChBnC,OAAe,EACf0R,QAAQ,EACR3P,MAAe,EACfjD,IAAa;IAAA;;mCAEP6S,cAAc;QAapB,OAAO,IAAI1P,KAAK,CAACE,OAAO,EAAEnC,OAAO,EAAE2R,cAAc,EAAE5P,MAAM,EAAEjD,IAAI,CAAC;;MAAA,IAjBhE4S,QAAQ,KAAA9I,SAAA,EAAR8I,QAAQ,GAAGE,4BAAkB,CAACC,mBAAU,CAAC1P,OAAO,CAAC,CAAC;MAAA,IAAAuL,KAAA,GAKhD,SAAAoE,sBAAA,GAAOR,oBAAoB,cAAAQ,sBAAA,wBAAAC,sBAAA,GAApBD,sBAAA,CAAuB3P,OAAO,CAAC,cAAA4P,sBAAA,uBAA/BA,sBAAA,CAAkC/R,OAAO,CAAC,MAAK,QAAQ;MAAA,OAAAgS,OAAA,CAAAC,OAAA,CAAAvE,KAAA,GAAAiB,MAAA,CAC1D2C,oBAAoB,CAACnP,OAAO,CAAC,CAACnC,OAAO,CAAC,IAAAgS,OAAA,CAAAC,OAAA,CAChC,IAAIC,kBAAQ,CAAClS,OAAO,EAAEmS,KAAK,EAAET,QAAQ,CAAC,CAAC5P,QAAQ,EAAE,CAACsQ,IAAI,CAAC,UAACtQ,QAAgB;;QAC5EwP,oBAAoB,GAAAtI,QAAA,KACfsI,oBAAoB,GAAAvI,SAAA,OAAAA,SAAA,CACtB5G,OAAO,IAAA6G,QAAA,MAAAqJ,sBAAA,GACHf,oBAAoB,cAAAe,sBAAA,uBAApBA,sBAAA,CAAuBlQ,OAAO,CAAC,GAAA2G,SAAA,OAAAA,SAAA,CACjC9I,OAAO,IAAG8B,QAAQ,EAAAgH,SAAA,IAAAC,SAAA,EAEtB;QACD,OAAOjH,QAAQ;OAChB,CAAC,EAAAsQ,IAAA,CAAAzD,MAAA;KAET,QAAA2D,CAAA;MAAA,OAAAN,OAAA,CAAAO,MAAA,CAAAD,CAAA;;;;;;;;;;EAEDd,OAAA,CAMoBgB,aAAa,YAAAA,cAC/BjK,MAAa,EACbC,MAAa,EACbkJ,QAAQ;IAAA;UAARA,QAAQ,KAAA9I,SAAA,EAAR8I,QAAQ,GAAGE,4BAAkB,CAACC,mBAAU,CAACtJ,MAAM,CAACpG,OAAO,CAAC,CAAC;MAEzD,EAAUoG,MAAM,CAACpG,OAAO,KAAKqG,MAAM,CAACrG,OAAO,IAAAvC,aAAA,oBAA3CC,SAAS,QAAoC,UAAU,IAAvDA,SAAS;MACT,IAAMG,OAAO,GAAGkI,IAAI,CAAChI,UAAU,CAACqI,MAAM,EAAEC,MAAM,CAAC;MAAA,OAAAwJ,OAAA,CAAAC,OAAA,CACV,IAAIC,kBAAQ,CAAClS,OAAO,EAAEyS,YAAY,CAACC,GAAG,EAAEhB,QAAQ,CAAC,CAACiB,WAAW,EAAE,EAAAP,IAAA,WAAArE,IAAA;QAAA,IAA7F6E,SAAS,GAAA7E,IAAA;UAAE8E,SAAS,GAAA9E,IAAA;QAC3B,IAAM+E,QAAQ,GAAGvK,MAAM,CAAChG,WAAW,CAACiG,MAAM,CAAC,GAAG,CAACoK,SAAS,EAAEC,SAAS,CAAC,GAAG,CAACA,SAAS,EAAED,SAAS,CAAC;QAC7F,OAAO,IAAI1K,IAAI,CAAC,IAAIhC,WAAW,CAACqC,MAAM,EAAEuK,QAAQ,CAAC,CAAC,CAAC,CAAC,EAAE,IAAI5M,WAAW,CAACsC,MAAM,EAAEsK,QAAQ,CAAC,CAAC,CAAC,CAAC,CAAC;;KAC5F,QAAAR,CAAA;MAAA,OAAAN,OAAA,CAAAO,MAAA,CAAAD,CAAA;;;EAAA,OAAAd,OAAA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;"}